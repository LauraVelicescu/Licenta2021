{"ast":null,"code":"import _classCallCheck from \"C:/Users/Andrei/Desktop/licenta/Licenta2021/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/Andrei/Desktop/licenta/Licenta2021/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _get from \"C:/Users/Andrei/Desktop/licenta/Licenta2021/frontend/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"C:/Users/Andrei/Desktop/licenta/Licenta2021/frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:/Users/Andrei/Desktop/licenta/Licenta2021/frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:/Users/Andrei/Desktop/licenta/Licenta2021/frontend/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { CdkTreeNode, CdkTree, CdkTreeNodeDef, CdkNestedTreeNode, CDK_TREE_NODE_OUTLET_NODE, CdkTreeNodePadding, CdkTreeNodeOutlet, CdkTreeNodeToggle, CdkTreeModule } from '@angular/cdk/tree';\nimport { Directive, ElementRef, Attribute, Input, IterableDiffers, ViewContainerRef, Inject, Optional, Component, ViewEncapsulation, ChangeDetectionStrategy, ViewChild, NgModule } from '@angular/core';\nimport { mixinTabIndex, mixinDisabled, MatCommonModule } from '@angular/material/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { DataSource } from '@angular/cdk/collections';\nimport { BehaviorSubject, merge } from 'rxjs';\nimport { take, map } from 'rxjs/operators';\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/tree';\n\nvar _MatTreeNodeMixinBase = mixinTabIndex(mixinDisabled(CdkTreeNode));\n/**\r\n * Wrapper for the CdkTree node with Material design styles.\r\n */\n\n\nvar MatTreeNode = /*#__PURE__*/function (_MatTreeNodeMixinBase2) {\n  _inherits(MatTreeNode, _MatTreeNodeMixinBase2);\n\n  var _super = _createSuper(MatTreeNode);\n\n  function MatTreeNode(_elementRef, _tree, tabIndex) {\n    var _this;\n\n    _classCallCheck(this, MatTreeNode);\n\n    _this = _super.call(this, _elementRef, _tree);\n    _this._elementRef = _elementRef;\n    _this._tree = _tree;\n    _this.tabIndex = Number(tabIndex) || 0; // The classes are directly added here instead of in the host property because classes on\n    // the host property are not inherited with View Engine. It is not set as a @HostBinding because\n    // it is not set by the time it's children nodes try to read the class from it.\n    // TODO: move to host after View Engine deprecation\n\n    _this._elementRef.nativeElement.classList.add('mat-tree-node');\n\n    return _this;\n  } // This is a workaround for https://github.com/angular/angular/issues/23091\n  // In aot mode, the lifecycle hooks from parent class are not called.\n\n\n  _createClass(MatTreeNode, [{\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      _get(_getPrototypeOf(MatTreeNode.prototype), \"ngOnInit\", this).call(this);\n    }\n  }, {\n    key: \"ngDoCheck\",\n    value: function ngDoCheck() {\n      _get(_getPrototypeOf(MatTreeNode.prototype), \"ngDoCheck\", this).call(this);\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      _get(_getPrototypeOf(MatTreeNode.prototype), \"ngOnDestroy\", this).call(this);\n    }\n  }]);\n\n  return MatTreeNode;\n}(_MatTreeNodeMixinBase);\n\nMatTreeNode.ɵfac = function MatTreeNode_Factory(t) {\n  return new (t || MatTreeNode)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.CdkTree), ɵngcc0.ɵɵinjectAttribute('tabindex'));\n};\n\nMatTreeNode.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: MatTreeNode,\n  selectors: [[\"mat-tree-node\"]],\n  inputs: {\n    role: \"role\",\n    disabled: \"disabled\",\n    tabIndex: \"tabIndex\"\n  },\n  exportAs: [\"matTreeNode\"],\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: CdkTreeNode,\n    useExisting: MatTreeNode\n  }]), ɵngcc0.ɵɵInheritDefinitionFeature]\n});\n\nMatTreeNode.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: CdkTree\n  }, {\n    type: String,\n    decorators: [{\n      type: Attribute,\n      args: ['tabindex']\n    }]\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatTreeNode, [{\n    type: Directive,\n    args: [{\n      selector: 'mat-tree-node',\n      exportAs: 'matTreeNode',\n      inputs: ['role', 'disabled', 'tabIndex'],\n      providers: [{\n        provide: CdkTreeNode,\n        useExisting: MatTreeNode\n      }]\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc1.CdkTree\n    }, {\n      type: String,\n      decorators: [{\n        type: Attribute,\n        args: ['tabindex']\n      }]\n    }];\n  }, null);\n})();\n/**\r\n * Wrapper for the CdkTree node definition with Material design styles.\r\n * Captures the node's template and a when predicate that describes when this node should be used.\r\n */\n\n\nvar MatTreeNodeDef = /*#__PURE__*/function (_CdkTreeNodeDef) {\n  _inherits(MatTreeNodeDef, _CdkTreeNodeDef);\n\n  var _super2 = _createSuper(MatTreeNodeDef);\n\n  function MatTreeNodeDef() {\n    _classCallCheck(this, MatTreeNodeDef);\n\n    return _super2.apply(this, arguments);\n  }\n\n  return MatTreeNodeDef;\n}(CdkTreeNodeDef);\n\nMatTreeNodeDef.ɵfac = /*@__PURE__*/function () {\n  var ɵMatTreeNodeDef_BaseFactory;\n  return function MatTreeNodeDef_Factory(t) {\n    return (ɵMatTreeNodeDef_BaseFactory || (ɵMatTreeNodeDef_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatTreeNodeDef)))(t || MatTreeNodeDef);\n  };\n}();\n\nMatTreeNodeDef.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: MatTreeNodeDef,\n  selectors: [[\"\", \"matTreeNodeDef\", \"\"]],\n  inputs: {\n    when: [\"matTreeNodeDefWhen\", \"when\"],\n    data: [\"matTreeNode\", \"data\"]\n  },\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: CdkTreeNodeDef,\n    useExisting: MatTreeNodeDef\n  }]), ɵngcc0.ɵɵInheritDefinitionFeature]\n});\nMatTreeNodeDef.propDecorators = {\n  data: [{\n    type: Input,\n    args: ['matTreeNode']\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatTreeNodeDef, [{\n    type: Directive,\n    args: [{\n      selector: '[matTreeNodeDef]',\n      inputs: ['when: matTreeNodeDefWhen'],\n      providers: [{\n        provide: CdkTreeNodeDef,\n        useExisting: MatTreeNodeDef\n      }]\n    }]\n  }], null, {\n    data: [{\n      type: Input,\n      args: ['matTreeNode']\n    }]\n  });\n})();\n/**\r\n * Wrapper for the CdkTree nested node with Material design styles.\r\n */\n\n\nvar MatNestedTreeNode = /*#__PURE__*/function (_CdkNestedTreeNode) {\n  _inherits(MatNestedTreeNode, _CdkNestedTreeNode);\n\n  var _super3 = _createSuper(MatNestedTreeNode);\n\n  function MatNestedTreeNode(_elementRef, _tree, _differs, tabIndex) {\n    var _this2;\n\n    _classCallCheck(this, MatNestedTreeNode);\n\n    _this2 = _super3.call(this, _elementRef, _tree, _differs);\n    _this2._elementRef = _elementRef;\n    _this2._tree = _tree;\n    _this2._differs = _differs;\n    _this2._disabled = false;\n    _this2.tabIndex = Number(tabIndex) || 0; // The classes are directly added here instead of in the host property because classes on\n    // the host property are not inherited with View Engine. It is not set as a @HostBinding because\n    // it is not set by the time it's children nodes try to read the class from it.\n    // TODO: move to host after View Engine deprecation\n\n    _this2._elementRef.nativeElement.classList.add('mat-nested-tree-node');\n\n    return _this2;\n  }\n  /** Whether the node is disabled. */\n\n\n  _createClass(MatNestedTreeNode, [{\n    key: \"disabled\",\n    get: function get() {\n      return this._disabled;\n    },\n    set: function set(value) {\n      this._disabled = coerceBooleanProperty(value);\n    }\n    /** Tabindex for the node. */\n\n  }, {\n    key: \"tabIndex\",\n    get: function get() {\n      return this.disabled ? -1 : this._tabIndex;\n    },\n    set: function set(value) {\n      // If the specified tabIndex value is null or undefined, fall back to the default value.\n      this._tabIndex = value != null ? value : 0;\n    } // This is a workaround for https://github.com/angular/angular/issues/19145\n    // In aot mode, the lifecycle hooks from parent class are not called.\n    // TODO(tinayuangao): Remove when the angular issue #19145 is fixed\n\n  }, {\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      _get(_getPrototypeOf(MatNestedTreeNode.prototype), \"ngOnInit\", this).call(this);\n    }\n  }, {\n    key: \"ngDoCheck\",\n    value: function ngDoCheck() {\n      _get(_getPrototypeOf(MatNestedTreeNode.prototype), \"ngDoCheck\", this).call(this);\n    }\n  }, {\n    key: \"ngAfterContentInit\",\n    value: function ngAfterContentInit() {\n      _get(_getPrototypeOf(MatNestedTreeNode.prototype), \"ngAfterContentInit\", this).call(this);\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      _get(_getPrototypeOf(MatNestedTreeNode.prototype), \"ngOnDestroy\", this).call(this);\n    }\n  }]);\n\n  return MatNestedTreeNode;\n}(CdkNestedTreeNode);\n\nMatNestedTreeNode.ɵfac = function MatNestedTreeNode_Factory(t) {\n  return new (t || MatNestedTreeNode)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.CdkTree), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers), ɵngcc0.ɵɵinjectAttribute('tabindex'));\n};\n\nMatNestedTreeNode.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: MatNestedTreeNode,\n  selectors: [[\"mat-nested-tree-node\"]],\n  inputs: {\n    role: \"role\",\n    disabled: \"disabled\",\n    tabIndex: \"tabIndex\",\n    node: [\"matNestedTreeNode\", \"node\"]\n  },\n  exportAs: [\"matNestedTreeNode\"],\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: CdkNestedTreeNode,\n    useExisting: MatNestedTreeNode\n  }, {\n    provide: CdkTreeNode,\n    useExisting: MatNestedTreeNode\n  }, {\n    provide: CDK_TREE_NODE_OUTLET_NODE,\n    useExisting: MatNestedTreeNode\n  }]), ɵngcc0.ɵɵInheritDefinitionFeature]\n});\n\nMatNestedTreeNode.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: CdkTree\n  }, {\n    type: IterableDiffers\n  }, {\n    type: String,\n    decorators: [{\n      type: Attribute,\n      args: ['tabindex']\n    }]\n  }];\n};\n\nMatNestedTreeNode.propDecorators = {\n  node: [{\n    type: Input,\n    args: ['matNestedTreeNode']\n  }],\n  disabled: [{\n    type: Input\n  }],\n  tabIndex: [{\n    type: Input\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatNestedTreeNode, [{\n    type: Directive,\n    args: [{\n      selector: 'mat-nested-tree-node',\n      exportAs: 'matNestedTreeNode',\n      inputs: ['role', 'disabled', 'tabIndex'],\n      providers: [{\n        provide: CdkNestedTreeNode,\n        useExisting: MatNestedTreeNode\n      }, {\n        provide: CdkTreeNode,\n        useExisting: MatNestedTreeNode\n      }, {\n        provide: CDK_TREE_NODE_OUTLET_NODE,\n        useExisting: MatNestedTreeNode\n      }]\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc1.CdkTree\n    }, {\n      type: ɵngcc0.IterableDiffers\n    }, {\n      type: String,\n      decorators: [{\n        type: Attribute,\n        args: ['tabindex']\n      }]\n    }];\n  }, {\n    tabIndex: [{\n      type: Input\n    }],\n    disabled: [{\n      type: Input\n    }],\n    node: [{\n      type: Input,\n      args: ['matNestedTreeNode']\n    }]\n  });\n})();\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n/**\r\n * Wrapper for the CdkTree padding with Material design styles.\r\n */\n\n\nvar MatTreeNodePadding = /*#__PURE__*/function (_CdkTreeNodePadding) {\n  _inherits(MatTreeNodePadding, _CdkTreeNodePadding);\n\n  var _super4 = _createSuper(MatTreeNodePadding);\n\n  function MatTreeNodePadding() {\n    _classCallCheck(this, MatTreeNodePadding);\n\n    return _super4.apply(this, arguments);\n  }\n\n  _createClass(MatTreeNodePadding, [{\n    key: \"level\",\n    get:\n    /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\n    function get() {\n      return this._level;\n    },\n    set: function set(value) {\n      this._setLevelInput(value);\n    }\n    /** The indent for each level. Default number 40px from material design menu sub-menu spec. */\n\n  }, {\n    key: \"indent\",\n    get: function get() {\n      return this._indent;\n    },\n    set: function set(indent) {\n      this._setIndentInput(indent);\n    }\n  }]);\n\n  return MatTreeNodePadding;\n}(CdkTreeNodePadding);\n\nMatTreeNodePadding.ɵfac = /*@__PURE__*/function () {\n  var ɵMatTreeNodePadding_BaseFactory;\n  return function MatTreeNodePadding_Factory(t) {\n    return (ɵMatTreeNodePadding_BaseFactory || (ɵMatTreeNodePadding_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatTreeNodePadding)))(t || MatTreeNodePadding);\n  };\n}();\n\nMatTreeNodePadding.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: MatTreeNodePadding,\n  selectors: [[\"\", \"matTreeNodePadding\", \"\"]],\n  inputs: {\n    level: [\"matTreeNodePadding\", \"level\"],\n    indent: [\"matTreeNodePaddingIndent\", \"indent\"]\n  },\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: CdkTreeNodePadding,\n    useExisting: MatTreeNodePadding\n  }]), ɵngcc0.ɵɵInheritDefinitionFeature]\n});\nMatTreeNodePadding.propDecorators = {\n  level: [{\n    type: Input,\n    args: ['matTreeNodePadding']\n  }],\n  indent: [{\n    type: Input,\n    args: ['matTreeNodePaddingIndent']\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatTreeNodePadding, [{\n    type: Directive,\n    args: [{\n      selector: '[matTreeNodePadding]',\n      providers: [{\n        provide: CdkTreeNodePadding,\n        useExisting: MatTreeNodePadding\n      }]\n    }]\n  }], null, {\n    level: [{\n      type: Input,\n      args: ['matTreeNodePadding']\n    }],\n    indent: [{\n      type: Input,\n      args: ['matTreeNodePaddingIndent']\n    }]\n  });\n})();\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n/**\r\n * Outlet for nested CdkNode. Put `[matTreeNodeOutlet]` on a tag to place children dataNodes\r\n * inside the outlet.\r\n */\n\n\nvar MatTreeNodeOutlet = function MatTreeNodeOutlet(viewContainer, _node) {\n  _classCallCheck(this, MatTreeNodeOutlet);\n\n  this.viewContainer = viewContainer;\n  this._node = _node;\n};\n\nMatTreeNodeOutlet.ɵfac = function MatTreeNodeOutlet_Factory(t) {\n  return new (t || MatTreeNodeOutlet)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(CDK_TREE_NODE_OUTLET_NODE, 8));\n};\n\nMatTreeNodeOutlet.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: MatTreeNodeOutlet,\n  selectors: [[\"\", \"matTreeNodeOutlet\", \"\"]],\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: CdkTreeNodeOutlet,\n    useExisting: MatTreeNodeOutlet\n  }])]\n});\n\nMatTreeNodeOutlet.ctorParameters = function () {\n  return [{\n    type: ViewContainerRef\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [CDK_TREE_NODE_OUTLET_NODE]\n    }, {\n      type: Optional\n    }]\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatTreeNodeOutlet, [{\n    type: Directive,\n    args: [{\n      selector: '[matTreeNodeOutlet]',\n      providers: [{\n        provide: CdkTreeNodeOutlet,\n        useExisting: MatTreeNodeOutlet\n      }]\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ViewContainerRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [CDK_TREE_NODE_OUTLET_NODE]\n      }, {\n        type: Optional\n      }]\n    }];\n  }, null);\n})();\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n/**\r\n * Wrapper for the CdkTable with Material design styles.\r\n */\n\n\nvar MatTree = /*#__PURE__*/function (_CdkTree) {\n  _inherits(MatTree, _CdkTree);\n\n  var _super5 = _createSuper(MatTree);\n\n  function MatTree() {\n    _classCallCheck(this, MatTree);\n\n    return _super5.apply(this, arguments);\n  }\n\n  return MatTree;\n}(CdkTree);\n\nMatTree.ɵfac = /*@__PURE__*/function () {\n  var ɵMatTree_BaseFactory;\n  return function MatTree_Factory(t) {\n    return (ɵMatTree_BaseFactory || (ɵMatTree_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatTree)))(t || MatTree);\n  };\n}();\n\nMatTree.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n  type: MatTree,\n  selectors: [[\"mat-tree\"]],\n  viewQuery: function MatTree_Query(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵviewQuery(MatTreeNodeOutlet, 7);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._nodeOutlet = _t.first);\n    }\n  },\n  hostAttrs: [\"role\", \"tree\", 1, \"mat-tree\", \"cdk-tree\"],\n  exportAs: [\"matTree\"],\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: CdkTree,\n    useExisting: MatTree\n  }]), ɵngcc0.ɵɵInheritDefinitionFeature],\n  decls: 1,\n  vars: 0,\n  consts: [[\"matTreeNodeOutlet\", \"\"]],\n  template: function MatTree_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵelementContainer(0, 0);\n    }\n  },\n  directives: [MatTreeNodeOutlet],\n  styles: [\".mat-tree{display:block}.mat-tree-node{display:flex;align-items:center;flex:1;word-wrap:break-word}.mat-nested-tree-node{border-bottom-width:0}\\n\"],\n  encapsulation: 2\n});\nMatTree.propDecorators = {\n  _nodeOutlet: [{\n    type: ViewChild,\n    args: [MatTreeNodeOutlet, {\n      static: true\n    }]\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatTree, [{\n    type: Component,\n    args: [{\n      selector: 'mat-tree',\n      exportAs: 'matTree',\n      template: \"<ng-container matTreeNodeOutlet></ng-container>\",\n      host: {\n        // The 'cdk-tree' class needs to be included here because classes set in the host in the\n        // parent class are not inherited with View Engine. The 'cdk-tree' class in CdkTreeNode has\n        // to be set in the host because:\n        // if it is set as a @HostBinding it is not set by the time the tree nodes try to read the\n        // class from it.\n        // the ElementRef is not available in the constructor so the class can't be applied directly\n        // without a breaking constructor change.\n        'class': 'mat-tree cdk-tree',\n        'role': 'tree'\n      },\n      encapsulation: ViewEncapsulation.None,\n      // See note on CdkTree for explanation on why this uses the default change detection strategy.\n      // tslint:disable-next-line:validate-decorators\n      changeDetection: ChangeDetectionStrategy.Default,\n      providers: [{\n        provide: CdkTree,\n        useExisting: MatTree\n      }],\n      styles: [\".mat-tree{display:block}.mat-tree-node{display:flex;align-items:center;flex:1;word-wrap:break-word}.mat-nested-tree-node{border-bottom-width:0}\\n\"]\n    }]\n  }], null, {\n    _nodeOutlet: [{\n      type: ViewChild,\n      args: [MatTreeNodeOutlet, {\n        static: true\n      }]\n    }]\n  });\n})();\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n/**\r\n * Wrapper for the CdkTree's toggle with Material design styles.\r\n */\n// tslint:disable-next-line: coercion-types\n\n\nvar MatTreeNodeToggle = /*#__PURE__*/function (_CdkTreeNodeToggle) {\n  _inherits(MatTreeNodeToggle, _CdkTreeNodeToggle);\n\n  var _super6 = _createSuper(MatTreeNodeToggle);\n\n  function MatTreeNodeToggle() {\n    _classCallCheck(this, MatTreeNodeToggle);\n\n    return _super6.apply(this, arguments);\n  }\n\n  _createClass(MatTreeNodeToggle, [{\n    key: \"recursive\",\n    get: function get() {\n      return this._recursive;\n    },\n    set: function set(value) {\n      // TODO: when we remove support for ViewEngine, change this setter to an input\n      // alias in the decorator metadata.\n      this._recursive = coerceBooleanProperty(value);\n    }\n  }]);\n\n  return MatTreeNodeToggle;\n}(CdkTreeNodeToggle);\n\nMatTreeNodeToggle.ɵfac = /*@__PURE__*/function () {\n  var ɵMatTreeNodeToggle_BaseFactory;\n  return function MatTreeNodeToggle_Factory(t) {\n    return (ɵMatTreeNodeToggle_BaseFactory || (ɵMatTreeNodeToggle_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatTreeNodeToggle)))(t || MatTreeNodeToggle);\n  };\n}();\n\nMatTreeNodeToggle.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: MatTreeNodeToggle,\n  selectors: [[\"\", \"matTreeNodeToggle\", \"\"]],\n  inputs: {\n    recursive: [\"matTreeNodeToggleRecursive\", \"recursive\"]\n  },\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: CdkTreeNodeToggle,\n    useExisting: MatTreeNodeToggle\n  }]), ɵngcc0.ɵɵInheritDefinitionFeature]\n});\nMatTreeNodeToggle.propDecorators = {\n  recursive: [{\n    type: Input,\n    args: ['matTreeNodeToggleRecursive']\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatTreeNodeToggle, [{\n    type: Directive,\n    args: [{\n      selector: '[matTreeNodeToggle]',\n      providers: [{\n        provide: CdkTreeNodeToggle,\n        useExisting: MatTreeNodeToggle\n      }]\n    }]\n  }], null, {\n    recursive: [{\n      type: Input,\n      args: ['matTreeNodeToggleRecursive']\n    }]\n  });\n})();\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n\nvar MAT_TREE_DIRECTIVES = [MatNestedTreeNode, MatTreeNodeDef, MatTreeNodePadding, MatTreeNodeToggle, MatTree, MatTreeNode, MatTreeNodeOutlet];\n\nvar MatTreeModule = function MatTreeModule() {\n  _classCallCheck(this, MatTreeModule);\n};\n\nMatTreeModule.ɵfac = function MatTreeModule_Factory(t) {\n  return new (t || MatTreeModule)();\n};\n\nMatTreeModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n  type: MatTreeModule\n});\nMatTreeModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n  imports: [[CdkTreeModule, MatCommonModule], MatCommonModule]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatTreeModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CdkTreeModule, MatCommonModule],\n      exports: [MatCommonModule, MAT_TREE_DIRECTIVES],\n      declarations: MAT_TREE_DIRECTIVES\n    }]\n  }], null, null);\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatTreeModule, {\n    declarations: function declarations() {\n      return [MatNestedTreeNode, MatTreeNodeDef, MatTreeNodePadding, MatTreeNodeToggle, MatTree, MatTreeNode, MatTreeNodeOutlet];\n    },\n    imports: function imports() {\n      return [CdkTreeModule, MatCommonModule];\n    },\n    exports: function exports() {\n      return [MatCommonModule, MatNestedTreeNode, MatTreeNodeDef, MatTreeNodePadding, MatTreeNodeToggle, MatTree, MatTreeNode, MatTreeNodeOutlet];\n    }\n  });\n})();\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n/**\r\n * Tree flattener to convert a normal type of node to node with children & level information.\r\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\r\n *\r\n * For example, the input data of type `T` is nested, and contains its children data:\r\n *   SomeNode: {\r\n *     key: 'Fruits',\r\n *     children: [\r\n *       NodeOne: {\r\n *         key: 'Apple',\r\n *       },\r\n *       NodeTwo: {\r\n *        key: 'Pear',\r\n *      }\r\n *    ]\r\n *  }\r\n *  After flattener flatten the tree, the structure will become\r\n *  SomeNode: {\r\n *    key: 'Fruits',\r\n *    expandable: true,\r\n *    level: 1\r\n *  },\r\n *  NodeOne: {\r\n *    key: 'Apple',\r\n *    expandable: false,\r\n *    level: 2\r\n *  },\r\n *  NodeTwo: {\r\n *   key: 'Pear',\r\n *   expandable: false,\r\n *   level: 2\r\n * }\r\n * and the output flattened type is `F` with additional information.\r\n */\n\n\nvar MatTreeFlattener = /*#__PURE__*/function () {\n  function MatTreeFlattener(transformFunction, getLevel, isExpandable, getChildren) {\n    _classCallCheck(this, MatTreeFlattener);\n\n    this.transformFunction = transformFunction;\n    this.getLevel = getLevel;\n    this.isExpandable = isExpandable;\n    this.getChildren = getChildren;\n  }\n\n  _createClass(MatTreeFlattener, [{\n    key: \"_flattenNode\",\n    value: function _flattenNode(node, level, resultNodes, parentMap) {\n      var _this3 = this;\n\n      var flatNode = this.transformFunction(node, level);\n      resultNodes.push(flatNode);\n\n      if (this.isExpandable(flatNode)) {\n        var childrenNodes = this.getChildren(node);\n\n        if (childrenNodes) {\n          if (Array.isArray(childrenNodes)) {\n            this._flattenChildren(childrenNodes, level, resultNodes, parentMap);\n          } else {\n            childrenNodes.pipe(take(1)).subscribe(function (children) {\n              _this3._flattenChildren(children, level, resultNodes, parentMap);\n            });\n          }\n        }\n      }\n\n      return resultNodes;\n    }\n  }, {\n    key: \"_flattenChildren\",\n    value: function _flattenChildren(children, level, resultNodes, parentMap) {\n      var _this4 = this;\n\n      children.forEach(function (child, index) {\n        var childParentMap = parentMap.slice();\n        childParentMap.push(index != children.length - 1);\n\n        _this4._flattenNode(child, level + 1, resultNodes, childParentMap);\n      });\n    }\n    /**\r\n     * Flatten a list of node type T to flattened version of node F.\r\n     * Please note that type T may be nested, and the length of `structuredData` may be different\r\n     * from that of returned list `F[]`.\r\n     */\n\n  }, {\n    key: \"flattenNodes\",\n    value: function flattenNodes(structuredData) {\n      var _this5 = this;\n\n      var resultNodes = [];\n      structuredData.forEach(function (node) {\n        return _this5._flattenNode(node, 0, resultNodes, []);\n      });\n      return resultNodes;\n    }\n    /**\r\n     * Expand flattened node with current expansion status.\r\n     * The returned list may have different length.\r\n     */\n\n  }, {\n    key: \"expandFlattenedNodes\",\n    value: function expandFlattenedNodes(nodes, treeControl) {\n      var _this6 = this;\n\n      var results = [];\n      var currentExpand = [];\n      currentExpand[0] = true;\n      nodes.forEach(function (node) {\n        var expand = true;\n\n        for (var i = 0; i <= _this6.getLevel(node); i++) {\n          expand = expand && currentExpand[i];\n        }\n\n        if (expand) {\n          results.push(node);\n        }\n\n        if (_this6.isExpandable(node)) {\n          currentExpand[_this6.getLevel(node) + 1] = treeControl.isExpanded(node);\n        }\n      });\n      return results;\n    }\n  }]);\n\n  return MatTreeFlattener;\n}();\n/**\r\n * Data source for flat tree.\r\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\r\n * to `MatTree`.\r\n * The nested tree nodes of type `T` are flattened through `MatTreeFlattener`, and converted\r\n * to type `F` for `MatTree` to consume.\r\n */\n\n\nvar MatTreeFlatDataSource = /*#__PURE__*/function (_DataSource) {\n  _inherits(MatTreeFlatDataSource, _DataSource);\n\n  var _super7 = _createSuper(MatTreeFlatDataSource);\n\n  function MatTreeFlatDataSource(_treeControl, _treeFlattener) {\n    var _this7;\n\n    var initialData = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n\n    _classCallCheck(this, MatTreeFlatDataSource);\n\n    _this7 = _super7.call(this);\n    _this7._treeControl = _treeControl;\n    _this7._treeFlattener = _treeFlattener;\n    _this7._flattenedData = new BehaviorSubject([]);\n    _this7._expandedData = new BehaviorSubject([]);\n    _this7._data = new BehaviorSubject(initialData);\n    return _this7;\n  }\n\n  _createClass(MatTreeFlatDataSource, [{\n    key: \"data\",\n    get: function get() {\n      return this._data.value;\n    },\n    set: function set(value) {\n      this._data.next(value);\n\n      this._flattenedData.next(this._treeFlattener.flattenNodes(this.data));\n\n      this._treeControl.dataNodes = this._flattenedData.value;\n    }\n  }, {\n    key: \"connect\",\n    value: function connect(collectionViewer) {\n      var _this8 = this;\n\n      var changes = [collectionViewer.viewChange, this._treeControl.expansionModel.changed, this._flattenedData];\n      return merge.apply(void 0, changes).pipe(map(function () {\n        _this8._expandedData.next(_this8._treeFlattener.expandFlattenedNodes(_this8._flattenedData.value, _this8._treeControl));\n\n        return _this8._expandedData.value;\n      }));\n    }\n  }, {\n    key: \"disconnect\",\n    value: function disconnect() {// no op\n    }\n  }]);\n\n  return MatTreeFlatDataSource;\n}(DataSource);\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n/**\r\n * Data source for nested tree.\r\n *\r\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\r\n * or collapse. The expansion/collapsion will be handled by TreeControl and each non-leaf node.\r\n */\n\n\nvar MatTreeNestedDataSource = /*#__PURE__*/function (_DataSource2) {\n  _inherits(MatTreeNestedDataSource, _DataSource2);\n\n  var _super8 = _createSuper(MatTreeNestedDataSource);\n\n  function MatTreeNestedDataSource() {\n    var _this9;\n\n    _classCallCheck(this, MatTreeNestedDataSource);\n\n    _this9 = _super8.apply(this, arguments);\n    _this9._data = new BehaviorSubject([]);\n    return _this9;\n  }\n  /**\r\n   * Data for the nested tree\r\n   */\n\n\n  _createClass(MatTreeNestedDataSource, [{\n    key: \"data\",\n    get: function get() {\n      return this._data.value;\n    },\n    set: function set(value) {\n      this._data.next(value);\n    }\n  }, {\n    key: \"connect\",\n    value: function connect(collectionViewer) {\n      var _this10 = this;\n\n      return merge.apply(void 0, [collectionViewer.viewChange, this._data]).pipe(map(function () {\n        return _this10.data;\n      }));\n    }\n  }, {\n    key: \"disconnect\",\n    value: function disconnect() {// no op\n    }\n  }]);\n\n  return MatTreeNestedDataSource;\n}(DataSource);\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\n\nexport { MatNestedTreeNode, MatTree, MatTreeFlatDataSource, MatTreeFlattener, MatTreeModule, MatTreeNestedDataSource, MatTreeNode, MatTreeNodeDef, MatTreeNodeOutlet, MatTreeNodePadding, MatTreeNodeToggle }; //# sourceMappingURL=tree.js.map","map":{"version":3,"sources":["C:/Users/Andrei/Desktop/licenta/Licenta2021/frontend/node_modules/@angular/material/__ivy_ngcc__/fesm2015/tree.js"],"names":["CdkTreeNode","CdkTree","CdkTreeNodeDef","CdkNestedTreeNode","CDK_TREE_NODE_OUTLET_NODE","CdkTreeNodePadding","CdkTreeNodeOutlet","CdkTreeNodeToggle","CdkTreeModule","Directive","ElementRef","Attribute","Input","IterableDiffers","ViewContainerRef","Inject","Optional","Component","ViewEncapsulation","ChangeDetectionStrategy","ViewChild","NgModule","mixinTabIndex","mixinDisabled","MatCommonModule","coerceBooleanProperty","DataSource","BehaviorSubject","merge","take","map","ɵngcc0","ɵngcc1","_MatTreeNodeMixinBase","MatTreeNode","_elementRef","_tree","tabIndex","Number","nativeElement","classList","add","ɵfac","MatTreeNode_Factory","t","ɵɵdirectiveInject","ɵɵinjectAttribute","ɵdir","ɵɵdefineDirective","type","selectors","inputs","role","disabled","exportAs","features","ɵɵProvidersFeature","provide","useExisting","ɵɵInheritDefinitionFeature","ctorParameters","String","decorators","args","ngDevMode","ɵsetClassMetadata","selector","providers","MatTreeNodeDef","ɵMatTreeNodeDef_BaseFactory","MatTreeNodeDef_Factory","ɵɵgetInheritedFactory","when","data","propDecorators","MatNestedTreeNode","_differs","_disabled","value","_tabIndex","MatNestedTreeNode_Factory","node","MatTreeNodePadding","_level","_setLevelInput","_indent","indent","_setIndentInput","ɵMatTreeNodePadding_BaseFactory","MatTreeNodePadding_Factory","level","MatTreeNodeOutlet","viewContainer","_node","MatTreeNodeOutlet_Factory","undefined","MatTree","ɵMatTree_BaseFactory","MatTree_Factory","ɵcmp","ɵɵdefineComponent","viewQuery","MatTree_Query","rf","ctx","ɵɵviewQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","_nodeOutlet","first","hostAttrs","decls","vars","consts","template","MatTree_Template","ɵɵelementContainer","directives","styles","encapsulation","static","host","None","changeDetection","Default","MatTreeNodeToggle","_recursive","ɵMatTreeNodeToggle_BaseFactory","MatTreeNodeToggle_Factory","recursive","MAT_TREE_DIRECTIVES","MatTreeModule","MatTreeModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports","exports","declarations","ngJitMode","ɵɵsetNgModuleScope","MatTreeFlattener","transformFunction","getLevel","isExpandable","getChildren","resultNodes","parentMap","flatNode","push","childrenNodes","Array","isArray","_flattenChildren","pipe","subscribe","children","forEach","child","index","childParentMap","slice","length","_flattenNode","structuredData","nodes","treeControl","results","currentExpand","expand","i","isExpanded","MatTreeFlatDataSource","_treeControl","_treeFlattener","initialData","_flattenedData","_expandedData","_data","next","flattenNodes","dataNodes","collectionViewer","changes","viewChange","expansionModel","changed","expandFlattenedNodes","MatTreeNestedDataSource","arguments"],"mappings":"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","sourcesContent":["import { CdkTreeNode, CdkTree, CdkTreeNodeDef, CdkNestedTreeNode, CDK_TREE_NODE_OUTLET_NODE, CdkTreeNodePadding, CdkTreeNodeOutlet, CdkTreeNodeToggle, CdkTreeModule } from '@angular/cdk/tree';\r\nimport { Directive, ElementRef, Attribute, Input, IterableDiffers, ViewContainerRef, Inject, Optional, Component, ViewEncapsulation, ChangeDetectionStrategy, ViewChild, NgModule } from '@angular/core';\r\nimport { mixinTabIndex, mixinDisabled, MatCommonModule } from '@angular/material/core';\r\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\r\nimport { DataSource } from '@angular/cdk/collections';\r\nimport { BehaviorSubject, merge } from 'rxjs';\r\nimport { take, map } from 'rxjs/operators';\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/tree';\nconst _MatTreeNodeMixinBase = mixinTabIndex(mixinDisabled(CdkTreeNode));\r\n/**\r\n * Wrapper for the CdkTree node with Material design styles.\r\n */\r\nclass MatTreeNode extends _MatTreeNodeMixinBase {\r\n    constructor(_elementRef, _tree, tabIndex) {\r\n        super(_elementRef, _tree);\r\n        this._elementRef = _elementRef;\r\n        this._tree = _tree;\r\n        this.tabIndex = Number(tabIndex) || 0;\r\n        // The classes are directly added here instead of in the host property because classes on\r\n        // the host property are not inherited with View Engine. It is not set as a @HostBinding because\r\n        // it is not set by the time it's children nodes try to read the class from it.\r\n        // TODO: move to host after View Engine deprecation\r\n        this._elementRef.nativeElement.classList.add('mat-tree-node');\r\n    }\r\n    // This is a workaround for https://github.com/angular/angular/issues/23091\r\n    // In aot mode, the lifecycle hooks from parent class are not called.\r\n    ngOnInit() {\r\n        super.ngOnInit();\r\n    }\r\n    ngDoCheck() {\r\n        super.ngDoCheck();\r\n    }\r\n    ngOnDestroy() {\r\n        super.ngOnDestroy();\r\n    }\r\n}\nMatTreeNode.ɵfac = function MatTreeNode_Factory(t) { return new (t || MatTreeNode)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.CdkTree), ɵngcc0.ɵɵinjectAttribute('tabindex')); };\nMatTreeNode.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatTreeNode, selectors: [[\"mat-tree-node\"]], inputs: { role: \"role\", disabled: \"disabled\", tabIndex: \"tabIndex\" }, exportAs: [\"matTreeNode\"], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CdkTreeNode, useExisting: MatTreeNode }]), ɵngcc0.ɵɵInheritDefinitionFeature] });\r\nMatTreeNode.ctorParameters = () => [\r\n    { type: ElementRef },\r\n    { type: CdkTree },\r\n    { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] }\r\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatTreeNode, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-tree-node',\n                exportAs: 'matTreeNode',\n                inputs: ['role', 'disabled', 'tabIndex'],\n                providers: [{ provide: CdkTreeNode, useExisting: MatTreeNode }]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.CdkTree }, { type: String, decorators: [{\n                type: Attribute,\n                args: ['tabindex']\n            }] }]; }, null); })();\r\n/**\r\n * Wrapper for the CdkTree node definition with Material design styles.\r\n * Captures the node's template and a when predicate that describes when this node should be used.\r\n */\r\nclass MatTreeNodeDef extends CdkTreeNodeDef {\r\n}\nMatTreeNodeDef.ɵfac = /*@__PURE__*/ function () { let ɵMatTreeNodeDef_BaseFactory; return function MatTreeNodeDef_Factory(t) { return (ɵMatTreeNodeDef_BaseFactory || (ɵMatTreeNodeDef_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatTreeNodeDef)))(t || MatTreeNodeDef); }; }();\nMatTreeNodeDef.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatTreeNodeDef, selectors: [[\"\", \"matTreeNodeDef\", \"\"]], inputs: { when: [\"matTreeNodeDefWhen\", \"when\"], data: [\"matTreeNode\", \"data\"] }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CdkTreeNodeDef, useExisting: MatTreeNodeDef }]), ɵngcc0.ɵɵInheritDefinitionFeature] });\r\nMatTreeNodeDef.propDecorators = {\r\n    data: [{ type: Input, args: ['matTreeNode',] }]\r\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatTreeNodeDef, [{\n        type: Directive,\n        args: [{\n                selector: '[matTreeNodeDef]',\n                inputs: [\n                    'when: matTreeNodeDefWhen'\n                ],\n                providers: [{ provide: CdkTreeNodeDef, useExisting: MatTreeNodeDef }]\n            }]\n    }], null, { data: [{\n            type: Input,\n            args: ['matTreeNode']\n        }] }); })();\r\n/**\r\n * Wrapper for the CdkTree nested node with Material design styles.\r\n */\r\nclass MatNestedTreeNode extends CdkNestedTreeNode {\r\n    constructor(_elementRef, _tree, _differs, tabIndex) {\r\n        super(_elementRef, _tree, _differs);\r\n        this._elementRef = _elementRef;\r\n        this._tree = _tree;\r\n        this._differs = _differs;\r\n        this._disabled = false;\r\n        this.tabIndex = Number(tabIndex) || 0;\r\n        // The classes are directly added here instead of in the host property because classes on\r\n        // the host property are not inherited with View Engine. It is not set as a @HostBinding because\r\n        // it is not set by the time it's children nodes try to read the class from it.\r\n        // TODO: move to host after View Engine deprecation\r\n        this._elementRef.nativeElement.classList.add('mat-nested-tree-node');\r\n    }\r\n    /** Whether the node is disabled. */\r\n    get disabled() { return this._disabled; }\r\n    set disabled(value) { this._disabled = coerceBooleanProperty(value); }\r\n    /** Tabindex for the node. */\r\n    get tabIndex() { return this.disabled ? -1 : this._tabIndex; }\r\n    set tabIndex(value) {\r\n        // If the specified tabIndex value is null or undefined, fall back to the default value.\r\n        this._tabIndex = value != null ? value : 0;\r\n    }\r\n    // This is a workaround for https://github.com/angular/angular/issues/19145\r\n    // In aot mode, the lifecycle hooks from parent class are not called.\r\n    // TODO(tinayuangao): Remove when the angular issue #19145 is fixed\r\n    ngOnInit() {\r\n        super.ngOnInit();\r\n    }\r\n    ngDoCheck() {\r\n        super.ngDoCheck();\r\n    }\r\n    ngAfterContentInit() {\r\n        super.ngAfterContentInit();\r\n    }\r\n    ngOnDestroy() {\r\n        super.ngOnDestroy();\r\n    }\r\n}\nMatNestedTreeNode.ɵfac = function MatNestedTreeNode_Factory(t) { return new (t || MatNestedTreeNode)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.CdkTree), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers), ɵngcc0.ɵɵinjectAttribute('tabindex')); };\nMatNestedTreeNode.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatNestedTreeNode, selectors: [[\"mat-nested-tree-node\"]], inputs: { role: \"role\", disabled: \"disabled\", tabIndex: \"tabIndex\", node: [\"matNestedTreeNode\", \"node\"] }, exportAs: [\"matNestedTreeNode\"], features: [ɵngcc0.ɵɵProvidersFeature([\n            { provide: CdkNestedTreeNode, useExisting: MatNestedTreeNode },\n            { provide: CdkTreeNode, useExisting: MatNestedTreeNode },\n            { provide: CDK_TREE_NODE_OUTLET_NODE, useExisting: MatNestedTreeNode }\n        ]), ɵngcc0.ɵɵInheritDefinitionFeature] });\r\nMatNestedTreeNode.ctorParameters = () => [\r\n    { type: ElementRef },\r\n    { type: CdkTree },\r\n    { type: IterableDiffers },\r\n    { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] }\r\n];\r\nMatNestedTreeNode.propDecorators = {\r\n    node: [{ type: Input, args: ['matNestedTreeNode',] }],\r\n    disabled: [{ type: Input }],\r\n    tabIndex: [{ type: Input }]\r\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatNestedTreeNode, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-nested-tree-node',\n                exportAs: 'matNestedTreeNode',\n                inputs: ['role', 'disabled', 'tabIndex'],\n                providers: [\n                    { provide: CdkNestedTreeNode, useExisting: MatNestedTreeNode },\n                    { provide: CdkTreeNode, useExisting: MatNestedTreeNode },\n                    { provide: CDK_TREE_NODE_OUTLET_NODE, useExisting: MatNestedTreeNode }\n                ]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.CdkTree }, { type: ɵngcc0.IterableDiffers }, { type: String, decorators: [{\n                type: Attribute,\n                args: ['tabindex']\n            }] }]; }, { tabIndex: [{\n            type: Input\n        }], disabled: [{\n            type: Input\n        }], node: [{\n            type: Input,\n            args: ['matNestedTreeNode']\n        }] }); })();\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Wrapper for the CdkTree padding with Material design styles.\r\n */\r\nclass MatTreeNodePadding extends CdkTreeNodePadding {\r\n    /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\r\n    get level() { return this._level; }\r\n    set level(value) { this._setLevelInput(value); }\r\n    /** The indent for each level. Default number 40px from material design menu sub-menu spec. */\r\n    get indent() { return this._indent; }\r\n    set indent(indent) { this._setIndentInput(indent); }\r\n}\nMatTreeNodePadding.ɵfac = /*@__PURE__*/ function () { let ɵMatTreeNodePadding_BaseFactory; return function MatTreeNodePadding_Factory(t) { return (ɵMatTreeNodePadding_BaseFactory || (ɵMatTreeNodePadding_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatTreeNodePadding)))(t || MatTreeNodePadding); }; }();\nMatTreeNodePadding.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatTreeNodePadding, selectors: [[\"\", \"matTreeNodePadding\", \"\"]], inputs: { level: [\"matTreeNodePadding\", \"level\"], indent: [\"matTreeNodePaddingIndent\", \"indent\"] }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CdkTreeNodePadding, useExisting: MatTreeNodePadding }]), ɵngcc0.ɵɵInheritDefinitionFeature] });\r\nMatTreeNodePadding.propDecorators = {\r\n    level: [{ type: Input, args: ['matTreeNodePadding',] }],\r\n    indent: [{ type: Input, args: ['matTreeNodePaddingIndent',] }]\r\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatTreeNodePadding, [{\n        type: Directive,\n        args: [{\n                selector: '[matTreeNodePadding]',\n                providers: [{ provide: CdkTreeNodePadding, useExisting: MatTreeNodePadding }]\n            }]\n    }], null, { level: [{\n            type: Input,\n            args: ['matTreeNodePadding']\n        }], indent: [{\n            type: Input,\n            args: ['matTreeNodePaddingIndent']\n        }] }); })();\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Outlet for nested CdkNode. Put `[matTreeNodeOutlet]` on a tag to place children dataNodes\r\n * inside the outlet.\r\n */\r\nclass MatTreeNodeOutlet {\r\n    constructor(viewContainer, _node) {\r\n        this.viewContainer = viewContainer;\r\n        this._node = _node;\r\n    }\r\n}\nMatTreeNodeOutlet.ɵfac = function MatTreeNodeOutlet_Factory(t) { return new (t || MatTreeNodeOutlet)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(CDK_TREE_NODE_OUTLET_NODE, 8)); };\nMatTreeNodeOutlet.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatTreeNodeOutlet, selectors: [[\"\", \"matTreeNodeOutlet\", \"\"]], features: [ɵngcc0.ɵɵProvidersFeature([{\n                provide: CdkTreeNodeOutlet,\n                useExisting: MatTreeNodeOutlet\n            }])] });\r\nMatTreeNodeOutlet.ctorParameters = () => [\r\n    { type: ViewContainerRef },\r\n    { type: undefined, decorators: [{ type: Inject, args: [CDK_TREE_NODE_OUTLET_NODE,] }, { type: Optional }] }\r\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatTreeNodeOutlet, [{\n        type: Directive,\n        args: [{\n                selector: '[matTreeNodeOutlet]',\n                providers: [{\n                        provide: CdkTreeNodeOutlet,\n                        useExisting: MatTreeNodeOutlet\n                    }]\n            }]\n    }], function () { return [{ type: ɵngcc0.ViewContainerRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [CDK_TREE_NODE_OUTLET_NODE]\n            }, {\n                type: Optional\n            }] }]; }, null); })();\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Wrapper for the CdkTable with Material design styles.\r\n */\r\nclass MatTree extends CdkTree {\r\n}\nMatTree.ɵfac = /*@__PURE__*/ function () { let ɵMatTree_BaseFactory; return function MatTree_Factory(t) { return (ɵMatTree_BaseFactory || (ɵMatTree_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatTree)))(t || MatTree); }; }();\nMatTree.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MatTree, selectors: [[\"mat-tree\"]], viewQuery: function MatTree_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(MatTreeNodeOutlet, 7);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._nodeOutlet = _t.first);\n    } }, hostAttrs: [\"role\", \"tree\", 1, \"mat-tree\", \"cdk-tree\"], exportAs: [\"matTree\"], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CdkTree, useExisting: MatTree }]), ɵngcc0.ɵɵInheritDefinitionFeature], decls: 1, vars: 0, consts: [[\"matTreeNodeOutlet\", \"\"]], template: function MatTree_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementContainer(0, 0);\n    } }, directives: [MatTreeNodeOutlet], styles: [\".mat-tree{display:block}.mat-tree-node{display:flex;align-items:center;flex:1;word-wrap:break-word}.mat-nested-tree-node{border-bottom-width:0}\\n\"], encapsulation: 2 });\r\nMatTree.propDecorators = {\r\n    _nodeOutlet: [{ type: ViewChild, args: [MatTreeNodeOutlet, { static: true },] }]\r\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatTree, [{\n        type: Component,\n        args: [{\n                selector: 'mat-tree',\n                exportAs: 'matTree',\n                template: `<ng-container matTreeNodeOutlet></ng-container>`,\n                host: {\n                    // The 'cdk-tree' class needs to be included here because classes set in the host in the\n                    // parent class are not inherited with View Engine. The 'cdk-tree' class in CdkTreeNode has\n                    // to be set in the host because:\n                    // if it is set as a @HostBinding it is not set by the time the tree nodes try to read the\n                    // class from it.\n                    // the ElementRef is not available in the constructor so the class can't be applied directly\n                    // without a breaking constructor change.\n                    'class': 'mat-tree cdk-tree',\n                    'role': 'tree'\n                },\n                encapsulation: ViewEncapsulation.None,\n                // See note on CdkTree for explanation on why this uses the default change detection strategy.\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default,\n                providers: [{ provide: CdkTree, useExisting: MatTree }],\n                styles: [\".mat-tree{display:block}.mat-tree-node{display:flex;align-items:center;flex:1;word-wrap:break-word}.mat-nested-tree-node{border-bottom-width:0}\\n\"]\n            }]\n    }], null, { _nodeOutlet: [{\n            type: ViewChild,\n            args: [MatTreeNodeOutlet, { static: true }]\n        }] }); })();\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Wrapper for the CdkTree's toggle with Material design styles.\r\n */\r\n// tslint:disable-next-line: coercion-types\r\nclass MatTreeNodeToggle extends CdkTreeNodeToggle {\r\n    get recursive() { return this._recursive; }\r\n    set recursive(value) {\r\n        // TODO: when we remove support for ViewEngine, change this setter to an input\r\n        // alias in the decorator metadata.\r\n        this._recursive = coerceBooleanProperty(value);\r\n    }\r\n}\nMatTreeNodeToggle.ɵfac = /*@__PURE__*/ function () { let ɵMatTreeNodeToggle_BaseFactory; return function MatTreeNodeToggle_Factory(t) { return (ɵMatTreeNodeToggle_BaseFactory || (ɵMatTreeNodeToggle_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatTreeNodeToggle)))(t || MatTreeNodeToggle); }; }();\nMatTreeNodeToggle.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatTreeNodeToggle, selectors: [[\"\", \"matTreeNodeToggle\", \"\"]], inputs: { recursive: [\"matTreeNodeToggleRecursive\", \"recursive\"] }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CdkTreeNodeToggle, useExisting: MatTreeNodeToggle }]), ɵngcc0.ɵɵInheritDefinitionFeature] });\r\nMatTreeNodeToggle.propDecorators = {\r\n    recursive: [{ type: Input, args: ['matTreeNodeToggleRecursive',] }]\r\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatTreeNodeToggle, [{\n        type: Directive,\n        args: [{\n                selector: '[matTreeNodeToggle]',\n                providers: [{ provide: CdkTreeNodeToggle, useExisting: MatTreeNodeToggle }]\n            }]\n    }], null, { recursive: [{\n            type: Input,\n            args: ['matTreeNodeToggleRecursive']\n        }] }); })();\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nconst MAT_TREE_DIRECTIVES = [\r\n    MatNestedTreeNode,\r\n    MatTreeNodeDef,\r\n    MatTreeNodePadding,\r\n    MatTreeNodeToggle,\r\n    MatTree,\r\n    MatTreeNode,\r\n    MatTreeNodeOutlet\r\n];\r\nclass MatTreeModule {\r\n}\nMatTreeModule.ɵfac = function MatTreeModule_Factory(t) { return new (t || MatTreeModule)(); };\nMatTreeModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: MatTreeModule });\nMatTreeModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[CdkTreeModule, MatCommonModule], MatCommonModule] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatTreeModule, [{\n        type: NgModule,\n        args: [{\n                imports: [CdkTreeModule, MatCommonModule],\n                exports: [MatCommonModule, MAT_TREE_DIRECTIVES],\n                declarations: MAT_TREE_DIRECTIVES\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatTreeModule, { declarations: function () { return [MatNestedTreeNode, MatTreeNodeDef, MatTreeNodePadding, MatTreeNodeToggle, MatTree, MatTreeNode, MatTreeNodeOutlet]; }, imports: function () { return [CdkTreeModule, MatCommonModule]; }, exports: function () { return [MatCommonModule, MatNestedTreeNode, MatTreeNodeDef, MatTreeNodePadding, MatTreeNodeToggle, MatTree, MatTreeNode, MatTreeNodeOutlet]; } }); })();\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Tree flattener to convert a normal type of node to node with children & level information.\r\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\r\n *\r\n * For example, the input data of type `T` is nested, and contains its children data:\r\n *   SomeNode: {\r\n *     key: 'Fruits',\r\n *     children: [\r\n *       NodeOne: {\r\n *         key: 'Apple',\r\n *       },\r\n *       NodeTwo: {\r\n *        key: 'Pear',\r\n *      }\r\n *    ]\r\n *  }\r\n *  After flattener flatten the tree, the structure will become\r\n *  SomeNode: {\r\n *    key: 'Fruits',\r\n *    expandable: true,\r\n *    level: 1\r\n *  },\r\n *  NodeOne: {\r\n *    key: 'Apple',\r\n *    expandable: false,\r\n *    level: 2\r\n *  },\r\n *  NodeTwo: {\r\n *   key: 'Pear',\r\n *   expandable: false,\r\n *   level: 2\r\n * }\r\n * and the output flattened type is `F` with additional information.\r\n */\r\nclass MatTreeFlattener {\r\n    constructor(transformFunction, getLevel, isExpandable, getChildren) {\r\n        this.transformFunction = transformFunction;\r\n        this.getLevel = getLevel;\r\n        this.isExpandable = isExpandable;\r\n        this.getChildren = getChildren;\r\n    }\r\n    _flattenNode(node, level, resultNodes, parentMap) {\r\n        const flatNode = this.transformFunction(node, level);\r\n        resultNodes.push(flatNode);\r\n        if (this.isExpandable(flatNode)) {\r\n            const childrenNodes = this.getChildren(node);\r\n            if (childrenNodes) {\r\n                if (Array.isArray(childrenNodes)) {\r\n                    this._flattenChildren(childrenNodes, level, resultNodes, parentMap);\r\n                }\r\n                else {\r\n                    childrenNodes.pipe(take(1)).subscribe(children => {\r\n                        this._flattenChildren(children, level, resultNodes, parentMap);\r\n                    });\r\n                }\r\n            }\r\n        }\r\n        return resultNodes;\r\n    }\r\n    _flattenChildren(children, level, resultNodes, parentMap) {\r\n        children.forEach((child, index) => {\r\n            let childParentMap = parentMap.slice();\r\n            childParentMap.push(index != children.length - 1);\r\n            this._flattenNode(child, level + 1, resultNodes, childParentMap);\r\n        });\r\n    }\r\n    /**\r\n     * Flatten a list of node type T to flattened version of node F.\r\n     * Please note that type T may be nested, and the length of `structuredData` may be different\r\n     * from that of returned list `F[]`.\r\n     */\r\n    flattenNodes(structuredData) {\r\n        let resultNodes = [];\r\n        structuredData.forEach(node => this._flattenNode(node, 0, resultNodes, []));\r\n        return resultNodes;\r\n    }\r\n    /**\r\n     * Expand flattened node with current expansion status.\r\n     * The returned list may have different length.\r\n     */\r\n    expandFlattenedNodes(nodes, treeControl) {\r\n        let results = [];\r\n        let currentExpand = [];\r\n        currentExpand[0] = true;\r\n        nodes.forEach(node => {\r\n            let expand = true;\r\n            for (let i = 0; i <= this.getLevel(node); i++) {\r\n                expand = expand && currentExpand[i];\r\n            }\r\n            if (expand) {\r\n                results.push(node);\r\n            }\r\n            if (this.isExpandable(node)) {\r\n                currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\r\n            }\r\n        });\r\n        return results;\r\n    }\r\n}\r\n/**\r\n * Data source for flat tree.\r\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\r\n * to `MatTree`.\r\n * The nested tree nodes of type `T` are flattened through `MatTreeFlattener`, and converted\r\n * to type `F` for `MatTree` to consume.\r\n */\r\nclass MatTreeFlatDataSource extends DataSource {\r\n    constructor(_treeControl, _treeFlattener, initialData = []) {\r\n        super();\r\n        this._treeControl = _treeControl;\r\n        this._treeFlattener = _treeFlattener;\r\n        this._flattenedData = new BehaviorSubject([]);\r\n        this._expandedData = new BehaviorSubject([]);\r\n        this._data = new BehaviorSubject(initialData);\r\n    }\r\n    get data() { return this._data.value; }\r\n    set data(value) {\r\n        this._data.next(value);\r\n        this._flattenedData.next(this._treeFlattener.flattenNodes(this.data));\r\n        this._treeControl.dataNodes = this._flattenedData.value;\r\n    }\r\n    connect(collectionViewer) {\r\n        const changes = [\r\n            collectionViewer.viewChange,\r\n            this._treeControl.expansionModel.changed,\r\n            this._flattenedData\r\n        ];\r\n        return merge(...changes).pipe(map(() => {\r\n            this._expandedData.next(this._treeFlattener.expandFlattenedNodes(this._flattenedData.value, this._treeControl));\r\n            return this._expandedData.value;\r\n        }));\r\n    }\r\n    disconnect() {\r\n        // no op\r\n    }\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Data source for nested tree.\r\n *\r\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\r\n * or collapse. The expansion/collapsion will be handled by TreeControl and each non-leaf node.\r\n */\r\nclass MatTreeNestedDataSource extends DataSource {\r\n    constructor() {\r\n        super(...arguments);\r\n        this._data = new BehaviorSubject([]);\r\n    }\r\n    /**\r\n     * Data for the nested tree\r\n     */\r\n    get data() { return this._data.value; }\r\n    set data(value) { this._data.next(value); }\r\n    connect(collectionViewer) {\r\n        return merge(...[collectionViewer.viewChange, this._data])\r\n            .pipe(map(() => {\r\n            return this.data;\r\n        }));\r\n    }\r\n    disconnect() {\r\n        // no op\r\n    }\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/**\r\n * Generated bundle index. Do not edit.\r\n */\r\n\r\nexport { MatNestedTreeNode, MatTree, MatTreeFlatDataSource, MatTreeFlattener, MatTreeModule, MatTreeNestedDataSource, MatTreeNode, MatTreeNodeDef, MatTreeNodeOutlet, MatTreeNodePadding, MatTreeNodeToggle };\r\n\r\n\n//# sourceMappingURL=tree.js.map"]},"metadata":{},"sourceType":"module"}