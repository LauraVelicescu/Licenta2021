{"ast":null,"code":"import _createClass from \"C:/Users/Andrei/Desktop/licenta/Licenta2021/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _classCallCheck from \"C:/Users/Andrei/Desktop/licenta/Licenta2021/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport { InjectionToken, Injectable, Inject, Component, ChangeDetectionStrategy, ChangeDetectorRef, EventEmitter, ElementRef, Renderer2, Input, Output, NgModule } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { CommonModule } from '@angular/common';\n/**\n * Notification\n *\n * This class describes the structure of a notifiction, including all information it needs to live, and everyone else needs to work with it.\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\n\nfunction NotifierContainerComponent_li_1_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r3 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"li\", 2);\n    ɵngcc0.ɵɵelementStart(1, \"notifier-notification\", 3);\n    ɵngcc0.ɵɵlistener(\"ready\", function NotifierContainerComponent_li_1_Template_notifier_notification_ready_1_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r3);\n      var ctx_r2 = ɵngcc0.ɵɵnextContext();\n      return ctx_r2.onNotificationReady($event);\n    })(\"dismiss\", function NotifierContainerComponent_li_1_Template_notifier_notification_dismiss_1_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r3);\n      var ctx_r4 = ɵngcc0.ɵɵnextContext();\n      return ctx_r4.onNotificationDismiss($event);\n    });\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var notification_r1 = ctx.$implicit;\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"notification\", notification_r1);\n  }\n}\n\nvar _c0 = function _c0(a0) {\n  return {\n    notification: a0\n  };\n};\n\nfunction NotifierNotificationComponent_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainer(0, 2);\n  }\n\n  if (rf & 2) {\n    var ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r0.notification.template)(\"ngTemplateOutletContext\", ɵngcc0.ɵɵpureFunction1(2, _c0, ctx_r0.notification));\n  }\n}\n\nfunction NotifierNotificationComponent_ng_template_1_button_2_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r5 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"button\", 5);\n    ɵngcc0.ɵɵlistener(\"click\", function NotifierNotificationComponent_ng_template_1_button_2_Template_button_click_0_listener() {\n      ɵngcc0.ɵɵrestoreView(_r5);\n      var ctx_r4 = ɵngcc0.ɵɵnextContext(2);\n      return ctx_r4.onClickDismiss();\n    });\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(1, \"svg\", 6);\n    ɵngcc0.ɵɵelement(2, \"path\", 7);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n  }\n}\n\nfunction NotifierNotificationComponent_ng_template_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"p\", 3);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵtemplate(2, NotifierNotificationComponent_ng_template_1_button_2_Template, 3, 0, \"button\", 4);\n  }\n\n  if (rf & 2) {\n    var ctx_r2 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r2.notification.message);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r2.config.behaviour.showDismissButton);\n  }\n}\n\nvar NotifierNotification =\n/**\n * Constructor\n *\n * @param options Notifier options\n */\nfunction NotifierNotification(options) {\n  _classCallCheck(this, NotifierNotification);\n\n  /**\n   * The template to customize\n   * the appearance of the notification\n   */\n  this.template = null;\n  Object.assign(this, options); // If not set manually, we have to create a unique notification ID by ourselves. The ID generation relies on the current browser\n  // datetime in ms, in praticular the moment this notification gets constructed. Concurrency, and thus two IDs being the exact same,\n  // is not possible due to the action queue concept.\n\n  if (options.id === undefined) {\n    this.id = \"ID_\".concat(new Date().getTime());\n  }\n};\n/**\n * Notifier configuration\n *\n * The notifier configuration defines what notifications look like, how they behave, and how they get animated. It is a global\n * configuration, which means that it only can be set once (at the beginning), and cannot be changed afterwards. Aligning to the world of\n * Angular, this configuration can be provided in the root app module - alternatively, a meaningful default configuration will be used.\n */\n\n\nvar NotifierConfig =\n/**\n * Constructor\n *\n * @param [customOptions={}] Custom notifier options, optional\n */\nfunction NotifierConfig() {\n  var customOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  _classCallCheck(this, NotifierConfig);\n\n  // Set default values\n  this.animations = {\n    enabled: true,\n    hide: {\n      easing: 'ease',\n      offset: 50,\n      preset: 'fade',\n      speed: 300\n    },\n    overlap: 150,\n    shift: {\n      easing: 'ease',\n      speed: 300\n    },\n    show: {\n      easing: 'ease',\n      preset: 'slide',\n      speed: 300\n    }\n  };\n  this.behaviour = {\n    autoHide: 7000,\n    onClick: false,\n    onMouseover: 'pauseAutoHide',\n    showDismissButton: true,\n    stacking: 4\n  };\n  this.position = {\n    horizontal: {\n      distance: 12,\n      position: 'left'\n    },\n    vertical: {\n      distance: 12,\n      gap: 10,\n      position: 'bottom'\n    }\n  };\n  this.theme = 'material'; // The following merges the custom options into the notifier config, respecting the already set default values\n  // This linear, more explicit and code-sizy workflow is preferred here over a recursive one (because we know the object structure)\n  // Technical sidenote: Objects are merged, other types of values simply overwritten / copied\n\n  if (customOptions.theme !== undefined) {\n    this.theme = customOptions.theme;\n  }\n\n  if (customOptions.animations !== undefined) {\n    if (customOptions.animations.enabled !== undefined) {\n      this.animations.enabled = customOptions.animations.enabled;\n    }\n\n    if (customOptions.animations.overlap !== undefined) {\n      this.animations.overlap = customOptions.animations.overlap;\n    }\n\n    if (customOptions.animations.hide !== undefined) {\n      Object.assign(this.animations.hide, customOptions.animations.hide);\n    }\n\n    if (customOptions.animations.shift !== undefined) {\n      Object.assign(this.animations.shift, customOptions.animations.shift);\n    }\n\n    if (customOptions.animations.show !== undefined) {\n      Object.assign(this.animations.show, customOptions.animations.show);\n    }\n  }\n\n  if (customOptions.behaviour !== undefined) {\n    Object.assign(this.behaviour, customOptions.behaviour);\n  }\n\n  if (customOptions.position !== undefined) {\n    if (customOptions.position.horizontal !== undefined) {\n      Object.assign(this.position.horizontal, customOptions.position.horizontal);\n    }\n\n    if (customOptions.position.vertical !== undefined) {\n      Object.assign(this.position.vertical, customOptions.position.vertical);\n    }\n  }\n};\n/**\n * Injection Token for notifier options\n */\n\n\nvar NotifierOptionsToken = new InjectionToken('[angular-notifier] Notifier Options');\n/**\n * Injection Token for notifier configuration\n */\n\nvar NotifierConfigToken = new InjectionToken('[anuglar-notifier] Notifier Config');\n/**\n * Notifier queue service\n *\n * In general, API calls don't get processed right away. Instead, we have to queue them up in order to prevent simultanious API calls\n * interfering with each other. This, at least in theory, is possible at any time. In particular, animations - which potentially overlap -\n * can cause changes in JS classes as well as affect the DOM. Therefore, the queue service takes all actions, puts them in a queue, and\n * processes them at the right time (which is when the previous action has been processed successfully).\n *\n * Technical sidenote:\n * An action looks pretty similar to the ones within the Flux / Redux pattern.\n */\n\nvar NotifierQueueService = /*#__PURE__*/function () {\n  /**\n   * Constructor\n   */\n  function NotifierQueueService() {\n    _classCallCheck(this, NotifierQueueService);\n\n    this.actionStream = new Subject();\n    this.actionQueue = [];\n    this.isActionInProgress = false;\n  }\n  /**\n   * Push a new action to the queue, and try to run it\n   *\n   * @param action Action object\n   */\n\n\n  _createClass(NotifierQueueService, [{\n    key: \"push\",\n    value: function push(action) {\n      this.actionQueue.push(action);\n      this.tryToRunNextAction();\n    }\n    /**\n     * Continue with the next action (called when the current action is finished)\n     */\n\n  }, {\n    key: \"continue\",\n    value: function _continue() {\n      this.isActionInProgress = false;\n      this.tryToRunNextAction();\n    }\n    /**\n     * Try to run the next action in the queue; we skip if there already is some action in progress, or if there is no action left\n     */\n\n  }, {\n    key: \"tryToRunNextAction\",\n    value: function tryToRunNextAction() {\n      if (this.isActionInProgress || this.actionQueue.length === 0) {\n        return; // Skip (the queue can now go drink a coffee as it has nothing to do anymore)\n      }\n\n      this.isActionInProgress = true;\n      this.actionStream.next(this.actionQueue.shift()); // Push next action to the stream, and remove the current action from the queue\n    }\n  }]);\n\n  return NotifierQueueService;\n}();\n\nNotifierQueueService.ɵfac = function NotifierQueueService_Factory(t) {\n  return new (t || NotifierQueueService)();\n};\n\nNotifierQueueService.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: NotifierQueueService,\n  factory: NotifierQueueService.ɵfac\n});\n\nNotifierQueueService.ctorParameters = function () {\n  return [];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NotifierQueueService, [{\n    type: Injectable\n  }], function () {\n    return [];\n  }, null);\n})();\n/**\n * Notifier service\n *\n * This service provides access to the public notifier API. Once injected into a component, directive, pipe, service, or any other building\n * block of an applications, it can be used to show new notifications, and hide existing ones. Internally, it transforms API calls into\n * actions, which then get thrown into the action queue - eventually being processed at the right moment.\n */\n\n\nvar NotifierService = /*#__PURE__*/function () {\n  /**\n   * Constructor\n   *\n   * @param notifierQueueService Notifier queue service\n   * @param config               Notifier configuration, optionally injected as a dependency\n   */\n  function NotifierService(notifierQueueService, config) {\n    _classCallCheck(this, NotifierService);\n\n    this.queueService = notifierQueueService;\n    this.config = config;\n  }\n  /**\n   * Get the notifier configuration\n   *\n   * @returns Notifier configuration\n   */\n\n\n  _createClass(NotifierService, [{\n    key: \"getConfig\",\n    value: function getConfig() {\n      return this.config;\n    }\n    /**\n     * API: Show a new notification\n     *\n     * @param notificationOptions Notification options\n     */\n\n  }, {\n    key: \"show\",\n    value: function show(notificationOptions) {\n      this.queueService.push({\n        payload: notificationOptions,\n        type: 'SHOW'\n      });\n    }\n    /**\n     * API: Hide a specific notification, given its ID\n     *\n     * @param notificationId ID of the notification to hide\n     */\n\n  }, {\n    key: \"hide\",\n    value: function hide(notificationId) {\n      this.queueService.push({\n        payload: notificationId,\n        type: 'HIDE'\n      });\n    }\n    /**\n     * API: Hide the newest notification\n     */\n\n  }, {\n    key: \"hideNewest\",\n    value: function hideNewest() {\n      this.queueService.push({\n        type: 'HIDE_NEWEST'\n      });\n    }\n    /**\n     * API: Hide the oldest notification\n     */\n\n  }, {\n    key: \"hideOldest\",\n    value: function hideOldest() {\n      this.queueService.push({\n        type: 'HIDE_OLDEST'\n      });\n    }\n    /**\n     * API: Hide all notifications at once\n     */\n\n  }, {\n    key: \"hideAll\",\n    value: function hideAll() {\n      this.queueService.push({\n        type: 'HIDE_ALL'\n      });\n    }\n    /**\n     * API: Shortcut for showing a new notification\n     *\n     * @param type             Type of the notification\n     * @param message          Message of the notification\n     * @param [notificationId] Unique ID for the notification (optional)\n     */\n\n  }, {\n    key: \"notify\",\n    value: function notify(type, message, notificationId) {\n      var notificationOptions = {\n        message: message,\n        type: type\n      };\n\n      if (notificationId !== undefined) {\n        notificationOptions.id = notificationId;\n      }\n\n      this.show(notificationOptions);\n    }\n  }]);\n\n  return NotifierService;\n}();\n\nNotifierService.ɵfac = function NotifierService_Factory(t) {\n  return new (t || NotifierService)(ɵngcc0.ɵɵinject(NotifierQueueService), ɵngcc0.ɵɵinject(NotifierConfigToken));\n};\n\nNotifierService.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: NotifierService,\n  factory: NotifierService.ɵfac\n});\n\nNotifierService.ctorParameters = function () {\n  return [{\n    type: NotifierQueueService\n  }, {\n    type: NotifierConfig,\n    decorators: [{\n      type: Inject,\n      args: [NotifierConfigToken]\n    }]\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NotifierService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: NotifierQueueService\n    }, {\n      type: NotifierConfig,\n      decorators: [{\n        type: Inject,\n        args: [NotifierConfigToken]\n      }]\n    }];\n  }, null);\n})();\n/**\n * Notifier container component\n * ----------------------------\n * This component acts as a wrapper for all notification components; consequently, it is responsible for creating a new notification\n * component and removing an existing notification component. Being more precicely, it also handles side effects of those actions, such as\n * shifting or even completely removing other notifications as well. Overall, this components handles actions coming from the queue service\n * by subscribing to its action stream.\n *\n * Technical sidenote:\n * This component has to be used somewhere in an application to work; it will not inject and create itself automatically, primarily in order\n * to not break the Angular AoT compilation. Moreover, this component (and also the notification components) set their change detection\n * strategy onPush, which means that we handle change detection manually in order to get the best performance. (#perfmatters)\n */\n\n\nvar NotifierContainerComponent = /*#__PURE__*/function () {\n  /**\n   * Constructor\n   *\n   * @param changeDetector       Change detector, used for manually triggering change detection runs\n   * @param notifierQueueService Notifier queue service\n   * @param notifierService      Notifier service\n   */\n  function NotifierContainerComponent(changeDetector, notifierQueueService, notifierService) {\n    var _this = this;\n\n    _classCallCheck(this, NotifierContainerComponent);\n\n    this.changeDetector = changeDetector;\n    this.queueService = notifierQueueService;\n    this.config = notifierService.getConfig();\n    this.notifications = []; // Connects this component up to the action queue, then handle incoming actions\n\n    this.queueServiceSubscription = this.queueService.actionStream.subscribe(function (action) {\n      _this.handleAction(action).then(function () {\n        _this.queueService.continue();\n      });\n    });\n  }\n  /**\n   * Component destroyment lifecycle hook, cleans up the observable subsciption\n   */\n\n\n  _createClass(NotifierContainerComponent, [{\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      if (this.queueServiceSubscription) {\n        this.queueServiceSubscription.unsubscribe();\n      }\n    }\n    /**\n     * Notification identifier, used as the ngFor trackby function\n     *\n     * @param   index        Index\n     * @param   notification Notifier notification\n     * @returns Notification ID as the unique identnfier\n     */\n\n  }, {\n    key: \"identifyNotification\",\n    value: function identifyNotification(index, notification) {\n      return notification.id;\n    }\n    /**\n     * Event handler, handles clicks on notification dismiss buttons\n     *\n     * @param notificationId ID of the notification to dismiss\n     */\n\n  }, {\n    key: \"onNotificationDismiss\",\n    value: function onNotificationDismiss(notificationId) {\n      this.queueService.push({\n        payload: notificationId,\n        type: 'HIDE'\n      });\n    }\n    /**\n     * Event handler, handles notification ready events\n     *\n     * @param notificationComponent Notification component reference\n     */\n\n  }, {\n    key: \"onNotificationReady\",\n    value: function onNotificationReady(notificationComponent) {\n      var currentNotification = this.notifications[this.notifications.length - 1]; // Get the latest notification\n\n      currentNotification.component = notificationComponent; // Save the new omponent reference\n\n      this.continueHandleShowAction(currentNotification); // Continue with handling the show action\n    }\n    /**\n     * Handle incoming actions by mapping action types to methods, and then running them\n     *\n     * @param   action Action object\n     * @returns Promise, resolved when done\n     */\n\n  }, {\n    key: \"handleAction\",\n    value: function handleAction(action) {\n      switch (action.type // TODO: Maybe a map (actionType -> class method) is a cleaner solution here?\n      ) {\n        case 'SHOW':\n          return this.handleShowAction(action);\n\n        case 'HIDE':\n          return this.handleHideAction(action);\n\n        case 'HIDE_OLDEST':\n          return this.handleHideOldestAction(action);\n\n        case 'HIDE_NEWEST':\n          return this.handleHideNewestAction(action);\n\n        case 'HIDE_ALL':\n          return this.handleHideAllAction();\n\n        default:\n          return new Promise(function (resolve) {\n            resolve(); // Ignore unknown action types\n          });\n      }\n    }\n    /**\n     * Show a new notification\n     *\n     * We simply add the notification to the list, and then wait until its properly initialized / created / rendered.\n     *\n     * @param   action Action object\n     * @returns Promise, resolved when done\n     */\n\n  }, {\n    key: \"handleShowAction\",\n    value: function handleShowAction(action) {\n      var _this2 = this;\n\n      return new Promise(function (resolve) {\n        _this2.tempPromiseResolver = resolve; // Save the promise resolve function so that it can be called later on by another method\n\n        _this2.addNotificationToList(new NotifierNotification(action.payload));\n      });\n    }\n    /**\n     * Continue to show a new notification (after the notification components is initialized / created / rendered).\n     *\n     * If this is the first (and thus only) notification, we can simply show it. Otherwhise, if stacking is disabled (or a low value), we\n     * switch out notifications, in particular we hide the existing one, and then show our new one. Yet, if stacking is enabled, we first\n     * shift all older notifications, and then show our new notification. In addition, if there are too many notification on the screen,\n     * we hide the oldest one first. Furthermore, if configured, animation overlapping is applied.\n     *\n     * @param notification New notification to show\n     */\n\n  }, {\n    key: \"continueHandleShowAction\",\n    value: function continueHandleShowAction(notification) {\n      var _this3 = this;\n\n      // First (which means only one) notification in the list?\n      var numberOfNotifications = this.notifications.length;\n\n      if (numberOfNotifications === 1) {\n        notification.component.show().then(this.tempPromiseResolver); // Done\n      } else {\n        var implicitStackingLimit = 2; // Stacking enabled? (stacking value below 2 means stacking is disabled)\n\n        if (this.config.behaviour.stacking === false || this.config.behaviour.stacking < implicitStackingLimit) {\n          this.notifications[0].component.hide().then(function () {\n            _this3.removeNotificationFromList(_this3.notifications[0]);\n\n            notification.component.show().then(_this3.tempPromiseResolver); // Done\n          });\n        } else {\n          var stepPromises = []; // Are there now too many notifications?\n\n          if (numberOfNotifications > this.config.behaviour.stacking) {\n            var oldNotifications = this.notifications.slice(1, numberOfNotifications - 1); // Are animations enabled?\n\n            if (this.config.animations.enabled) {\n              // Is animation overlap enabled?\n              if (this.config.animations.overlap !== false && this.config.animations.overlap > 0) {\n                stepPromises.push(this.notifications[0].component.hide());\n                setTimeout(function () {\n                  stepPromises.push(_this3.shiftNotifications(oldNotifications, notification.component.getHeight(), true));\n                }, this.config.animations.hide.speed - this.config.animations.overlap);\n                setTimeout(function () {\n                  stepPromises.push(notification.component.show());\n                }, this.config.animations.hide.speed + this.config.animations.shift.speed - this.config.animations.overlap);\n              } else {\n                stepPromises.push(new Promise(function (resolve) {\n                  _this3.notifications[0].component.hide().then(function () {\n                    _this3.shiftNotifications(oldNotifications, notification.component.getHeight(), true).then(function () {\n                      notification.component.show().then(resolve);\n                    });\n                  });\n                }));\n              }\n            } else {\n              stepPromises.push(this.notifications[0].component.hide());\n              stepPromises.push(this.shiftNotifications(oldNotifications, notification.component.getHeight(), true));\n              stepPromises.push(notification.component.show());\n            }\n          } else {\n            var _oldNotifications = this.notifications.slice(0, numberOfNotifications - 1); // Are animations enabled?\n\n\n            if (this.config.animations.enabled) {\n              // Is animation overlap enabled?\n              if (this.config.animations.overlap !== false && this.config.animations.overlap > 0) {\n                stepPromises.push(this.shiftNotifications(_oldNotifications, notification.component.getHeight(), true));\n                setTimeout(function () {\n                  stepPromises.push(notification.component.show());\n                }, this.config.animations.shift.speed - this.config.animations.overlap);\n              } else {\n                stepPromises.push(new Promise(function (resolve) {\n                  _this3.shiftNotifications(_oldNotifications, notification.component.getHeight(), true).then(function () {\n                    notification.component.show().then(resolve);\n                  });\n                }));\n              }\n            } else {\n              stepPromises.push(this.shiftNotifications(_oldNotifications, notification.component.getHeight(), true));\n              stepPromises.push(notification.component.show());\n            }\n          }\n\n          Promise.all(stepPromises).then(function () {\n            if (numberOfNotifications > _this3.config.behaviour.stacking) {\n              _this3.removeNotificationFromList(_this3.notifications[0]);\n            }\n\n            _this3.tempPromiseResolver();\n          }); // Done\n        }\n      }\n    }\n    /**\n     * Hide an existing notification\n     *\n     * Fist, we skip everything if there are no notifications at all, or the given notification does not exist. Then, we hide the given\n     * notification. If there exist older notifications, we then shift them around to fill the gap. Once both hiding the given notification\n     * and shifting the older notificaitons is done, the given notification gets finally removed (from the DOM).\n     *\n     * @param   action Action object, payload contains the notification ID\n     * @returns Promise, resolved when done\n     */\n\n  }, {\n    key: \"handleHideAction\",\n    value: function handleHideAction(action) {\n      var _this4 = this;\n\n      return new Promise(function (resolve) {\n        var stepPromises = []; // Does the notification exist / are there even any notifications? (let's prevent accidential errors)\n\n        var notification = _this4.findNotificationById(action.payload);\n\n        if (notification === undefined) {\n          resolve();\n          return;\n        } // Get older notifications\n\n\n        var notificationIndex = _this4.findNotificationIndexById(action.payload);\n\n        if (notificationIndex === undefined) {\n          resolve();\n          return;\n        }\n\n        var oldNotifications = _this4.notifications.slice(0, notificationIndex); // Do older notifications exist, and thus do we need to shift other notifications as a consequence?\n\n\n        if (oldNotifications.length > 0) {\n          // Are animations enabled?\n          if (_this4.config.animations.enabled && _this4.config.animations.hide.speed > 0) {\n            // Is animation overlap enabled?\n            if (_this4.config.animations.overlap !== false && _this4.config.animations.overlap > 0) {\n              stepPromises.push(notification.component.hide());\n              setTimeout(function () {\n                stepPromises.push(_this4.shiftNotifications(oldNotifications, notification.component.getHeight(), false));\n              }, _this4.config.animations.hide.speed - _this4.config.animations.overlap);\n            } else {\n              notification.component.hide().then(function () {\n                stepPromises.push(_this4.shiftNotifications(oldNotifications, notification.component.getHeight(), false));\n              });\n            }\n          } else {\n            stepPromises.push(notification.component.hide());\n            stepPromises.push(_this4.shiftNotifications(oldNotifications, notification.component.getHeight(), false));\n          }\n        } else {\n          stepPromises.push(notification.component.hide());\n        } // Wait until both hiding and shifting is done, then remove the notification from the list\n\n\n        Promise.all(stepPromises).then(function () {\n          _this4.removeNotificationFromList(notification);\n\n          resolve(); // Done\n        });\n      });\n    }\n    /**\n     * Hide the oldest notification (bridge to handleHideAction)\n     *\n     * @param   action Action object\n     * @returns Promise, resolved when done\n     */\n\n  }, {\n    key: \"handleHideOldestAction\",\n    value: function handleHideOldestAction(action) {\n      // Are there any notifications? (prevent accidential errors)\n      if (this.notifications.length === 0) {\n        return new Promise(function (resolve) {\n          resolve();\n        }); // Done\n      } else {\n        action.payload = this.notifications[0].id;\n        return this.handleHideAction(action);\n      }\n    }\n    /**\n     * Hide the newest notification (bridge to handleHideAction)\n     *\n     * @param   action Action object\n     * @returns Promise, resolved when done\n     */\n\n  }, {\n    key: \"handleHideNewestAction\",\n    value: function handleHideNewestAction(action) {\n      // Are there any notifications? (prevent accidential errors)\n      if (this.notifications.length === 0) {\n        return new Promise(function (resolve) {\n          resolve();\n        }); // Done\n      } else {\n        action.payload = this.notifications[this.notifications.length - 1].id;\n        return this.handleHideAction(action);\n      }\n    }\n    /**\n     * Hide all notifications at once\n     *\n     * @returns Promise, resolved when done\n     */\n\n  }, {\n    key: \"handleHideAllAction\",\n    value: function handleHideAllAction() {\n      var _this5 = this;\n\n      return new Promise(function (resolve) {\n        // Are there any notifications? (prevent accidential errors)\n        var numberOfNotifications = _this5.notifications.length;\n\n        if (numberOfNotifications === 0) {\n          resolve(); // Done\n\n          return;\n        } // Are animations enabled?\n\n\n        if (_this5.config.animations.enabled && _this5.config.animations.hide.speed > 0 && _this5.config.animations.hide.offset !== false && _this5.config.animations.hide.offset > 0) {\n          var _loop = function _loop(i) {\n            var animationOffset = _this5.config.position.vertical.position === 'top' ? numberOfNotifications - 1 : i;\n            setTimeout(function () {\n              _this5.notifications[i].component.hide().then(function () {\n                // Are we done here, was this the last notification to be hidden?\n                if (_this5.config.position.vertical.position === 'top' && i === 0 || _this5.config.position.vertical.position === 'bottom' && i === numberOfNotifications - 1) {\n                  _this5.removeAllNotificationsFromList();\n\n                  resolve(); // Done\n                }\n              });\n            }, _this5.config.animations.hide.offset * animationOffset);\n          };\n\n          for (var i = numberOfNotifications - 1; i >= 0; i--) {\n            _loop(i);\n          }\n        } else {\n          var stepPromises = [];\n\n          for (var _i = numberOfNotifications - 1; _i >= 0; _i--) {\n            stepPromises.push(_this5.notifications[_i].component.hide());\n          }\n\n          Promise.all(stepPromises).then(function () {\n            _this5.removeAllNotificationsFromList();\n\n            resolve(); // Done\n          });\n        }\n      });\n    }\n    /**\n     * Shift multiple notifications at once\n     *\n     * @param   notifications List containing the notifications to be shifted\n     * @param   distance      Distance to shift (in px)\n     * @param   toMakePlace   Flag, defining in which direciton to shift\n     * @returns Promise, resolved when done\n     */\n\n  }, {\n    key: \"shiftNotifications\",\n    value: function shiftNotifications(notifications, distance, toMakePlace) {\n      return new Promise(function (resolve) {\n        // Are there any notifications to shift?\n        if (notifications.length === 0) {\n          resolve();\n          return;\n        }\n\n        var notificationPromises = [];\n\n        for (var i = notifications.length - 1; i >= 0; i--) {\n          notificationPromises.push(notifications[i].component.shift(distance, toMakePlace));\n        }\n\n        Promise.all(notificationPromises).then(resolve); // Done\n      });\n    }\n    /**\n     * Add a new notification to the list of notifications (triggers change detection)\n     *\n     * @param notification Notification to add to the list of notifications\n     */\n\n  }, {\n    key: \"addNotificationToList\",\n    value: function addNotificationToList(notification) {\n      this.notifications.push(notification);\n      this.changeDetector.markForCheck(); // Run change detection because the notification list changed\n    }\n    /**\n     * Remove an existing notification from the list of notifications (triggers change detection)\n     *\n     * @param notification Notification to be removed from the list of notifications\n     */\n\n  }, {\n    key: \"removeNotificationFromList\",\n    value: function removeNotificationFromList(notification) {\n      this.notifications = this.notifications.filter(function (item) {\n        return item.component !== notification.component;\n      });\n      this.changeDetector.markForCheck(); // Run change detection because the notification list changed\n    }\n    /**\n     * Remove all notifications from the list (triggers change detection)\n     */\n\n  }, {\n    key: \"removeAllNotificationsFromList\",\n    value: function removeAllNotificationsFromList() {\n      this.notifications = [];\n      this.changeDetector.markForCheck(); // Run change detection because the notification list changed\n    }\n    /**\n     * Helper: Find a notification in the notification list by a given notification ID\n     *\n     * @param   notificationId Notification ID, used for finding notification\n     * @returns Notification, undefined if not found\n     */\n\n  }, {\n    key: \"findNotificationById\",\n    value: function findNotificationById(notificationId) {\n      return this.notifications.find(function (currentNotification) {\n        return currentNotification.id === notificationId;\n      });\n    }\n    /**\n     * Helper: Find a notification's index by a given notification ID\n     *\n     * @param   notificationId Notification ID, used for finding a notification's index\n     * @returns Notification index, undefined if not found\n     */\n\n  }, {\n    key: \"findNotificationIndexById\",\n    value: function findNotificationIndexById(notificationId) {\n      var notificationIndex = this.notifications.findIndex(function (currentNotification) {\n        return currentNotification.id === notificationId;\n      });\n      return notificationIndex !== -1 ? notificationIndex : undefined;\n    }\n  }]);\n\n  return NotifierContainerComponent;\n}();\n\nNotifierContainerComponent.ɵfac = function NotifierContainerComponent_Factory(t) {\n  return new (t || NotifierContainerComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(NotifierQueueService), ɵngcc0.ɵɵdirectiveInject(NotifierService));\n};\n\nNotifierContainerComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n  type: NotifierContainerComponent,\n  selectors: [[\"notifier-container\"]],\n  hostAttrs: [1, \"notifier__container\"],\n  decls: 2,\n  vars: 2,\n  consts: [[1, \"notifier__container-list\"], [\"class\", \"notifier__container-list-item\", 4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [1, \"notifier__container-list-item\"], [3, \"notification\", \"ready\", \"dismiss\"]],\n  template: function NotifierContainerComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵelementStart(0, \"ul\", 0);\n      ɵngcc0.ɵɵtemplate(1, NotifierContainerComponent_li_1_Template, 2, 1, \"li\", 1);\n      ɵngcc0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngForOf\", ctx.notifications)(\"ngForTrackBy\", ctx.identifyNotification);\n    }\n  },\n  directives: function directives() {\n    return [ɵngcc1.NgForOf, NotifierNotificationComponent];\n  },\n  encapsulation: 2,\n  changeDetection: 0\n});\n\nNotifierContainerComponent.ctorParameters = function () {\n  return [{\n    type: ChangeDetectorRef\n  }, {\n    type: NotifierQueueService\n  }, {\n    type: NotifierService\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NotifierContainerComponent, [{\n    type: Component,\n    args: [{\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      host: {\n        class: 'notifier__container'\n      },\n      selector: 'notifier-container',\n      template: \"<ul class=\\\"notifier__container-list\\\">\\n  <li class=\\\"notifier__container-list-item\\\" *ngFor=\\\"let notification of notifications; trackBy: identifyNotification\\\">\\n    <notifier-notification [notification]=\\\"notification\\\" (ready)=\\\"onNotificationReady($event)\\\" (dismiss)=\\\"onNotificationDismiss($event)\\\">\\n    </notifier-notification>\\n  </li>\\n</ul>\\n\"\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ChangeDetectorRef\n    }, {\n      type: NotifierQueueService\n    }, {\n      type: NotifierService\n    }];\n  }, null);\n})();\n\nvar ɵ0 = function ɵ0() {\n  return {\n    from: {\n      opacity: '1'\n    },\n    to: {\n      opacity: '0'\n    }\n  };\n},\n    ɵ1 = function ɵ1() {\n  return {\n    from: {\n      opacity: '0'\n    },\n    to: {\n      opacity: '1'\n    }\n  };\n};\n/**\n * Fade animation preset\n */\n\n\nvar fade = {\n  hide: ɵ0,\n  show: ɵ1\n};\n\nvar ɵ0$1 = function ɵ0$1(notification) {\n  // Prepare variables\n  var config = notification.component.getConfig();\n  var shift = notification.component.getShift();\n  var from;\n  var to; // Configure variables, depending on configuration and component\n\n  if (config.position.horizontal.position === 'left') {\n    from = {\n      transform: \"translate3d( 0, \".concat(shift, \"px, 0 )\")\n    };\n    to = {\n      transform: \"translate3d( calc( -100% - \".concat(config.position.horizontal.distance, \"px - 10px ), \").concat(shift, \"px, 0 )\")\n    };\n  } else if (config.position.horizontal.position === 'right') {\n    from = {\n      transform: \"translate3d( 0, \".concat(shift, \"px, 0 )\")\n    };\n    to = {\n      transform: \"translate3d( calc( 100% + \".concat(config.position.horizontal.distance, \"px + 10px ), \").concat(shift, \"px, 0 )\")\n    };\n  } else {\n    var horizontalPosition;\n\n    if (config.position.vertical.position === 'top') {\n      horizontalPosition = \"calc( -100% - \".concat(config.position.horizontal.distance, \"px - 10px )\");\n    } else {\n      horizontalPosition = \"calc( 100% + \".concat(config.position.horizontal.distance, \"px + 10px )\");\n    }\n\n    from = {\n      transform: \"translate3d( -50%, \".concat(shift, \"px, 0 )\")\n    };\n    to = {\n      transform: \"translate3d( -50%, \".concat(horizontalPosition, \", 0 )\")\n    };\n  } // Done\n\n\n  return {\n    from: from,\n    to: to\n  };\n},\n    ɵ1$1 = function ɵ1$1(notification) {\n  // Prepare variables\n  var config = notification.component.getConfig();\n  var from;\n  var to; // Configure variables, depending on configuration and component\n\n  if (config.position.horizontal.position === 'left') {\n    from = {\n      transform: \"translate3d( calc( -100% - \".concat(config.position.horizontal.distance, \"px - 10px ), 0, 0 )\")\n    };\n    to = {\n      transform: 'translate3d( 0, 0, 0 )'\n    };\n  } else if (config.position.horizontal.position === 'right') {\n    from = {\n      transform: \"translate3d( calc( 100% + \".concat(config.position.horizontal.distance, \"px + 10px ), 0, 0 )\")\n    };\n    to = {\n      transform: 'translate3d( 0, 0, 0 )'\n    };\n  } else {\n    var horizontalPosition;\n\n    if (config.position.vertical.position === 'top') {\n      horizontalPosition = \"calc( -100% - \".concat(config.position.horizontal.distance, \"px - 10px )\");\n    } else {\n      horizontalPosition = \"calc( 100% + \".concat(config.position.horizontal.distance, \"px + 10px )\");\n    }\n\n    from = {\n      transform: \"translate3d( -50%, \".concat(horizontalPosition, \", 0 )\")\n    };\n    to = {\n      transform: 'translate3d( -50%, 0, 0 )'\n    };\n  } // Done\n\n\n  return {\n    from: from,\n    to: to\n  };\n};\n/**\n * Slide animation preset\n */\n\n\nvar slide = {\n  hide: ɵ0$1,\n  show: ɵ1$1\n};\n/**\n * Notifier animation service\n */\n\nvar NotifierAnimationService = /*#__PURE__*/function () {\n  /**\n   * Constructor\n   */\n  function NotifierAnimationService() {\n    _classCallCheck(this, NotifierAnimationService);\n\n    this.animationPresets = {\n      fade: fade,\n      slide: slide\n    };\n  }\n  /**\n   * Get animation data\n   *\n   * This method generates all data the Web Animations API needs to animate our notification. The result depends on both the animation\n   * direction (either in or out) as well as the notifications (and its attributes) itself.\n   *\n   * @param   direction    Animation direction, either in or out\n   * @param   notification Notification the animation data should be generated for\n   * @returns Animation information\n   */\n\n\n  _createClass(NotifierAnimationService, [{\n    key: \"getAnimationData\",\n    value: function getAnimationData(direction, notification) {\n      // Get all necessary animation data\n      var keyframes;\n      var duration;\n      var easing;\n\n      if (direction === 'show') {\n        keyframes = this.animationPresets[notification.component.getConfig().animations.show.preset].show(notification);\n        duration = notification.component.getConfig().animations.show.speed;\n        easing = notification.component.getConfig().animations.show.easing;\n      } else {\n        keyframes = this.animationPresets[notification.component.getConfig().animations.hide.preset].hide(notification);\n        duration = notification.component.getConfig().animations.hide.speed;\n        easing = notification.component.getConfig().animations.hide.easing;\n      } // Build and return animation data\n\n\n      return {\n        keyframes: [keyframes.from, keyframes.to],\n        options: {\n          duration: duration,\n          easing: easing,\n          fill: 'forwards'\n        }\n      };\n    }\n  }]);\n\n  return NotifierAnimationService;\n}();\n\nNotifierAnimationService.ɵfac = function NotifierAnimationService_Factory(t) {\n  return new (t || NotifierAnimationService)();\n};\n\nNotifierAnimationService.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: NotifierAnimationService,\n  factory: NotifierAnimationService.ɵfac\n});\n\nNotifierAnimationService.ctorParameters = function () {\n  return [];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NotifierAnimationService, [{\n    type: Injectable\n  }], function () {\n    return [];\n  }, null);\n})();\n/**\n * Notifier timer service\n *\n * This service acts as a timer, needed due to the still rather limited setTimeout JavaScript API. The timer service can start and stop a\n * timer. Furthermore, it can also pause the timer at any time, and resume later on. The timer API workd promise-based.\n */\n\n\nvar NotifierTimerService = /*#__PURE__*/function () {\n  /**\n   * Constructor\n   */\n  function NotifierTimerService() {\n    _classCallCheck(this, NotifierTimerService);\n\n    this.now = 0;\n    this.remaining = 0;\n  }\n  /**\n   * Start (or resume) the timer\n   *\n   * @param   duration Timer duration, in ms\n   * @returns          Promise, resolved once the timer finishes\n   */\n\n\n  _createClass(NotifierTimerService, [{\n    key: \"start\",\n    value: function start(duration) {\n      var _this6 = this;\n\n      return new Promise(function (resolve) {\n        // For the first run ...\n        _this6.remaining = duration; // Setup, then start the timer\n\n        _this6.finishPromiseResolver = resolve;\n\n        _this6.continue();\n      });\n    }\n    /**\n     * Pause the timer\n     */\n\n  }, {\n    key: \"pause\",\n    value: function pause() {\n      clearTimeout(this.timerId);\n      this.remaining -= new Date().getTime() - this.now;\n    }\n    /**\n     * Continue the timer\n     */\n\n  }, {\n    key: \"continue\",\n    value: function _continue() {\n      var _this7 = this;\n\n      this.now = new Date().getTime();\n      this.timerId = window.setTimeout(function () {\n        _this7.finish();\n      }, this.remaining);\n    }\n    /**\n     * Stop the timer\n     */\n\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      clearTimeout(this.timerId);\n      this.remaining = 0;\n    }\n    /**\n     * Finish up the timeout by resolving the timer promise\n     */\n\n  }, {\n    key: \"finish\",\n    value: function finish() {\n      this.finishPromiseResolver();\n    }\n  }]);\n\n  return NotifierTimerService;\n}();\n\nNotifierTimerService.ɵfac = function NotifierTimerService_Factory(t) {\n  return new (t || NotifierTimerService)();\n};\n\nNotifierTimerService.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: NotifierTimerService,\n  factory: NotifierTimerService.ɵfac\n});\n\nNotifierTimerService.ctorParameters = function () {\n  return [];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NotifierTimerService, [{\n    type: Injectable\n  }], function () {\n    return [];\n  }, null);\n})();\n/**\n * Notifier notification component\n * -------------------------------\n * This component is responsible for actually displaying the notification on screen. In addition, it's able to show and hide this\n * notification, in particular to animate this notification in and out, as well as shift (move) this notification vertically around.\n * Furthermore, the notification component handles all interactions the user has with this notification / component, such as clicks and\n * mouse movements.\n */\n\n\nvar NotifierNotificationComponent = /*#__PURE__*/function () {\n  /**\n   * Constructor\n   *\n   * @param elementRef               Reference to the component's element\n   * @param renderer                 Angular renderer\n   * @param notifierService          Notifier service\n   * @param notifierTimerService     Notifier timer service\n   * @param notifierAnimationService Notifier animation service\n   */\n  function NotifierNotificationComponent(elementRef, renderer, notifierService, notifierTimerService, notifierAnimationService) {\n    _classCallCheck(this, NotifierNotificationComponent);\n\n    this.config = notifierService.getConfig();\n    this.ready = new EventEmitter();\n    this.dismiss = new EventEmitter();\n    this.timerService = notifierTimerService;\n    this.animationService = notifierAnimationService;\n    this.renderer = renderer;\n    this.element = elementRef.nativeElement;\n    this.elementShift = 0;\n  }\n  /**\n   * Component after view init lifecycle hook, setts up the component and then emits the ready event\n   */\n\n\n  _createClass(NotifierNotificationComponent, [{\n    key: \"ngAfterViewInit\",\n    value: function ngAfterViewInit() {\n      this.setup();\n      this.elementHeight = this.element.offsetHeight;\n      this.elementWidth = this.element.offsetWidth;\n      this.ready.emit(this);\n    }\n    /**\n     * Get the notifier config\n     *\n     * @returns Notifier configuration\n     */\n\n  }, {\n    key: \"getConfig\",\n    value: function getConfig() {\n      return this.config;\n    }\n    /**\n     * Get notification element height (in px)\n     *\n     * @returns Notification element height (in px)\n     */\n\n  }, {\n    key: \"getHeight\",\n    value: function getHeight() {\n      return this.elementHeight;\n    }\n    /**\n     * Get notification element width (in px)\n     *\n     * @returns Notification element height (in px)\n     */\n\n  }, {\n    key: \"getWidth\",\n    value: function getWidth() {\n      return this.elementWidth;\n    }\n    /**\n     * Get notification shift offset (in px)\n     *\n     * @returns Notification element shift offset (in px)\n     */\n\n  }, {\n    key: \"getShift\",\n    value: function getShift() {\n      return this.elementShift;\n    }\n    /**\n     * Show (animate in) this notification\n     *\n     * @returns Promise, resolved when done\n     */\n\n  }, {\n    key: \"show\",\n    value: function show() {\n      var _this8 = this;\n\n      return new Promise(function (resolve) {\n        // Are animations enabled?\n        if (_this8.config.animations.enabled && _this8.config.animations.show.speed > 0) {\n          // Get animation data\n          var animationData = _this8.animationService.getAnimationData('show', _this8.notification); // Set initial styles (styles before animation), prevents quick flicker when animation starts\n\n\n          var animatedProperties = Object.keys(animationData.keyframes[0]);\n\n          for (var i = animatedProperties.length - 1; i >= 0; i--) {\n            _this8.renderer.setStyle(_this8.element, animatedProperties[i], animationData.keyframes[0][animatedProperties[i]]);\n          } // Animate notification in\n\n\n          _this8.renderer.setStyle(_this8.element, 'visibility', 'visible');\n\n          var animation = _this8.element.animate(animationData.keyframes, animationData.options);\n\n          animation.onfinish = function () {\n            _this8.startAutoHideTimer();\n\n            resolve(); // Done\n          };\n        } else {\n          // Show notification\n          _this8.renderer.setStyle(_this8.element, 'visibility', 'visible');\n\n          _this8.startAutoHideTimer();\n\n          resolve(); // Done\n        }\n      });\n    }\n    /**\n     * Hide (animate out) this notification\n     *\n     * @returns Promise, resolved when done\n     */\n\n  }, {\n    key: \"hide\",\n    value: function hide() {\n      var _this9 = this;\n\n      return new Promise(function (resolve) {\n        _this9.stopAutoHideTimer(); // Are animations enabled?\n\n\n        if (_this9.config.animations.enabled && _this9.config.animations.hide.speed > 0) {\n          var animationData = _this9.animationService.getAnimationData('hide', _this9.notification);\n\n          var animation = _this9.element.animate(animationData.keyframes, animationData.options);\n\n          animation.onfinish = function () {\n            resolve(); // Done\n          };\n        } else {\n          resolve(); // Done\n        }\n      });\n    }\n    /**\n     * Shift (move) this notification\n     *\n     * @param   distance         Distance to shift (in px)\n     * @param   shiftToMakePlace Flag, defining in which direction to shift\n     * @returns Promise, resolved when done\n     */\n\n  }, {\n    key: \"shift\",\n    value: function shift(distance, shiftToMakePlace) {\n      var _this10 = this;\n\n      return new Promise(function (resolve) {\n        // Calculate new position (position after the shift)\n        var newElementShift;\n\n        if (_this10.config.position.vertical.position === 'top' && shiftToMakePlace || _this10.config.position.vertical.position === 'bottom' && !shiftToMakePlace) {\n          newElementShift = _this10.elementShift + distance + _this10.config.position.vertical.gap;\n        } else {\n          newElementShift = _this10.elementShift - distance - _this10.config.position.vertical.gap;\n        }\n\n        var horizontalPosition = _this10.config.position.horizontal.position === 'middle' ? '-50%' : '0'; // Are animations enabled?\n\n        if (_this10.config.animations.enabled && _this10.config.animations.shift.speed > 0) {\n          var animationData = {\n            // TODO: Extract into animation service\n            keyframes: [{\n              transform: \"translate3d( \".concat(horizontalPosition, \", \").concat(_this10.elementShift, \"px, 0 )\")\n            }, {\n              transform: \"translate3d( \".concat(horizontalPosition, \", \").concat(newElementShift, \"px, 0 )\")\n            }],\n            options: {\n              duration: _this10.config.animations.shift.speed,\n              easing: _this10.config.animations.shift.easing,\n              fill: 'forwards'\n            }\n          };\n          _this10.elementShift = newElementShift;\n\n          var animation = _this10.element.animate(animationData.keyframes, animationData.options);\n\n          animation.onfinish = function () {\n            resolve(); // Done\n          };\n        } else {\n          _this10.renderer.setStyle(_this10.element, 'transform', \"translate3d( \".concat(horizontalPosition, \", \").concat(newElementShift, \"px, 0 )\"));\n\n          _this10.elementShift = newElementShift;\n          resolve(); // Done\n        }\n      });\n    }\n    /**\n     * Handle click on dismiss button\n     */\n\n  }, {\n    key: \"onClickDismiss\",\n    value: function onClickDismiss() {\n      this.dismiss.emit(this.notification.id);\n    }\n    /**\n     * Handle mouseover over notification area\n     */\n\n  }, {\n    key: \"onNotificationMouseover\",\n    value: function onNotificationMouseover() {\n      if (this.config.behaviour.onMouseover === 'pauseAutoHide') {\n        this.pauseAutoHideTimer();\n      } else if (this.config.behaviour.onMouseover === 'resetAutoHide') {\n        this.stopAutoHideTimer();\n      }\n    }\n    /**\n     * Handle mouseout from notification area\n     */\n\n  }, {\n    key: \"onNotificationMouseout\",\n    value: function onNotificationMouseout() {\n      if (this.config.behaviour.onMouseover === 'pauseAutoHide') {\n        this.continueAutoHideTimer();\n      } else if (this.config.behaviour.onMouseover === 'resetAutoHide') {\n        this.startAutoHideTimer();\n      }\n    }\n    /**\n     * Handle click on notification area\n     */\n\n  }, {\n    key: \"onNotificationClick\",\n    value: function onNotificationClick() {\n      if (this.config.behaviour.onClick === 'hide') {\n        this.onClickDismiss();\n      }\n    }\n    /**\n     * Start the auto hide timer (if enabled)\n     */\n\n  }, {\n    key: \"startAutoHideTimer\",\n    value: function startAutoHideTimer() {\n      var _this11 = this;\n\n      if (this.config.behaviour.autoHide !== false && this.config.behaviour.autoHide > 0) {\n        this.timerService.start(this.config.behaviour.autoHide).then(function () {\n          _this11.onClickDismiss();\n        });\n      }\n    }\n    /**\n     * Pause the auto hide timer (if enabled)\n     */\n\n  }, {\n    key: \"pauseAutoHideTimer\",\n    value: function pauseAutoHideTimer() {\n      if (this.config.behaviour.autoHide !== false && this.config.behaviour.autoHide > 0) {\n        this.timerService.pause();\n      }\n    }\n    /**\n     * Continue the auto hide timer (if enabled)\n     */\n\n  }, {\n    key: \"continueAutoHideTimer\",\n    value: function continueAutoHideTimer() {\n      if (this.config.behaviour.autoHide !== false && this.config.behaviour.autoHide > 0) {\n        this.timerService.continue();\n      }\n    }\n    /**\n     * Stop the auto hide timer (if enabled)\n     */\n\n  }, {\n    key: \"stopAutoHideTimer\",\n    value: function stopAutoHideTimer() {\n      if (this.config.behaviour.autoHide !== false && this.config.behaviour.autoHide > 0) {\n        this.timerService.stop();\n      }\n    }\n    /**\n     * Initial notification setup\n     */\n\n  }, {\n    key: \"setup\",\n    value: function setup() {\n      // Set start position (initially the exact same for every new notification)\n      if (this.config.position.horizontal.position === 'left') {\n        this.renderer.setStyle(this.element, 'left', \"\".concat(this.config.position.horizontal.distance, \"px\"));\n      } else if (this.config.position.horizontal.position === 'right') {\n        this.renderer.setStyle(this.element, 'right', \"\".concat(this.config.position.horizontal.distance, \"px\"));\n      } else {\n        this.renderer.setStyle(this.element, 'left', '50%'); // Let's get the GPU handle some work as well (#perfmatters)\n\n        this.renderer.setStyle(this.element, 'transform', 'translate3d( -50%, 0, 0 )');\n      }\n\n      if (this.config.position.vertical.position === 'top') {\n        this.renderer.setStyle(this.element, 'top', \"\".concat(this.config.position.vertical.distance, \"px\"));\n      } else {\n        this.renderer.setStyle(this.element, 'bottom', \"\".concat(this.config.position.vertical.distance, \"px\"));\n      } // Add classes (responsible for visual design)\n\n\n      this.renderer.addClass(this.element, \"notifier__notification--\".concat(this.notification.type));\n      this.renderer.addClass(this.element, \"notifier__notification--\".concat(this.config.theme));\n    }\n  }]);\n\n  return NotifierNotificationComponent;\n}();\n\nNotifierNotificationComponent.ɵfac = function NotifierNotificationComponent_Factory(t) {\n  return new (t || NotifierNotificationComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(NotifierService), ɵngcc0.ɵɵdirectiveInject(NotifierTimerService), ɵngcc0.ɵɵdirectiveInject(NotifierAnimationService));\n};\n\nNotifierNotificationComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n  type: NotifierNotificationComponent,\n  selectors: [[\"notifier-notification\"]],\n  hostAttrs: [1, \"notifier__notification\"],\n  hostBindings: function NotifierNotificationComponent_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"click\", function NotifierNotificationComponent_click_HostBindingHandler() {\n        return ctx.onNotificationClick();\n      })(\"mouseout\", function NotifierNotificationComponent_mouseout_HostBindingHandler() {\n        return ctx.onNotificationMouseout();\n      })(\"mouseover\", function NotifierNotificationComponent_mouseover_HostBindingHandler() {\n        return ctx.onNotificationMouseover();\n      });\n    }\n  },\n  inputs: {\n    notification: \"notification\"\n  },\n  outputs: {\n    ready: \"ready\",\n    dismiss: \"dismiss\"\n  },\n  features: [ɵngcc0.ɵɵProvidersFeature([// We provide the timer to the component's local injector, so that every notification components gets its own\n  // instance of the timer service, thus running their timers independently from each other\n  NotifierTimerService])],\n  decls: 3,\n  vars: 2,\n  consts: [[3, \"ngTemplateOutlet\", \"ngTemplateOutletContext\", 4, \"ngIf\", \"ngIfElse\"], [\"predefinedNotification\", \"\"], [3, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"], [1, \"notifier__notification-message\"], [\"class\", \"notifier__notification-button\", \"type\", \"button\", \"title\", \"dismiss\", 3, \"click\", 4, \"ngIf\"], [\"type\", \"button\", \"title\", \"dismiss\", 1, \"notifier__notification-button\", 3, \"click\"], [\"viewBox\", \"0 0 24 24\", \"width\", \"20\", \"height\", \"20\", 1, \"notifier__notification-button-icon\"], [\"d\", \"M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z\"]],\n  template: function NotifierNotificationComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵtemplate(0, NotifierNotificationComponent_ng_container_0_Template, 1, 4, \"ng-container\", 0);\n      ɵngcc0.ɵɵtemplate(1, NotifierNotificationComponent_ng_template_1_Template, 3, 2, \"ng-template\", null, 1, ɵngcc0.ɵɵtemplateRefExtractor);\n    }\n\n    if (rf & 2) {\n      var _r1 = ɵngcc0.ɵɵreference(2);\n\n      ɵngcc0.ɵɵproperty(\"ngIf\", ctx.notification.template)(\"ngIfElse\", _r1);\n    }\n  },\n  directives: [ɵngcc1.NgIf, ɵngcc1.NgTemplateOutlet],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\nNotifierNotificationComponent.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: Renderer2\n  }, {\n    type: NotifierService\n  }, {\n    type: NotifierTimerService\n  }, {\n    type: NotifierAnimationService\n  }];\n};\n\nNotifierNotificationComponent.propDecorators = {\n  notification: [{\n    type: Input\n  }],\n  ready: [{\n    type: Output\n  }],\n  dismiss: [{\n    type: Output\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NotifierNotificationComponent, [{\n    type: Component,\n    args: [{\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      host: {\n        '(click)': 'onNotificationClick()',\n        '(mouseout)': 'onNotificationMouseout()',\n        '(mouseover)': 'onNotificationMouseover()',\n        class: 'notifier__notification'\n      },\n      providers: [// We provide the timer to the component's local injector, so that every notification components gets its own\n      // instance of the timer service, thus running their timers independently from each other\n      NotifierTimerService],\n      selector: 'notifier-notification',\n      template: \"<ng-container\\n  *ngIf=\\\"notification.template; else predefinedNotification\\\"\\n  [ngTemplateOutlet]=\\\"notification.template\\\"\\n  [ngTemplateOutletContext]=\\\"{ notification: notification }\\\"\\n>\\n</ng-container>\\n\\n<ng-template #predefinedNotification>\\n  <p class=\\\"notifier__notification-message\\\">{{ notification.message }}</p>\\n  <button\\n    class=\\\"notifier__notification-button\\\"\\n    type=\\\"button\\\"\\n    title=\\\"dismiss\\\"\\n    *ngIf=\\\"config.behaviour.showDismissButton\\\"\\n    (click)=\\\"onClickDismiss()\\\"\\n  >\\n    <svg class=\\\"notifier__notification-button-icon\\\" viewBox=\\\"0 0 24 24\\\" width=\\\"20\\\" height=\\\"20\\\">\\n      <path d=\\\"M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z\\\" />\\n    </svg>\\n  </button>\\n</ng-template>\\n\"\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc0.Renderer2\n    }, {\n      type: NotifierService\n    }, {\n      type: NotifierTimerService\n    }, {\n      type: NotifierAnimationService\n    }];\n  }, {\n    ready: [{\n      type: Output\n    }],\n    dismiss: [{\n      type: Output\n    }],\n    notification: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * Factory for a notifier configuration with custom options\n *\n * Sidenote:\n * Required as Angular AoT compilation cannot handle dynamic functions; see <https://github.com/angular/angular/issues/11262>.\n *\n * @param   options - Custom notifier options\n * @returns - Notifier configuration as result\n */\n\n\nfunction notifierCustomConfigFactory(options) {\n  return new NotifierConfig(options);\n}\n/**\n * Factory for a notifier configuration with default options\n *\n * Sidenote:\n * Required as Angular AoT compilation cannot handle dynamic functions; see <https://github.com/angular/angular/issues/11262>.\n *\n * @returns - Notifier configuration as result\n */\n\n\nfunction notifierDefaultConfigFactory() {\n  return new NotifierConfig({});\n}\n/**\n * Notifier module\n */\n\n\nvar NotifierModule = /*#__PURE__*/function () {\n  function NotifierModule() {\n    _classCallCheck(this, NotifierModule);\n  }\n\n  _createClass(NotifierModule, null, [{\n    key: \"withConfig\",\n    value:\n    /**\n     * Setup the notifier module with custom providers, in this case with a custom configuration based on the givne options\n     *\n     * @param   [options={}] - Custom notifier options\n     * @returns - Notifier module with custom providers\n     */\n    function withConfig() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return {\n        ngModule: NotifierModule,\n        providers: [// Provide the options itself upfront (as we need to inject them as dependencies -- see below)\n        {\n          provide: NotifierOptionsToken,\n          useValue: options\n        }, // Provide a custom notifier configuration, based on the given notifier options\n        {\n          deps: [NotifierOptionsToken],\n          provide: NotifierConfigToken,\n          useFactory: notifierCustomConfigFactory\n        }]\n      };\n    }\n  }]);\n\n  return NotifierModule;\n}();\n\nNotifierModule.ɵfac = function NotifierModule_Factory(t) {\n  return new (t || NotifierModule)();\n};\n\nNotifierModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n  type: NotifierModule\n});\nNotifierModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n  providers: [NotifierAnimationService, NotifierService, NotifierQueueService, // Provide the default notifier configuration if just the module is imported\n  {\n    provide: NotifierConfigToken,\n    useFactory: notifierDefaultConfigFactory\n  }],\n  imports: [[CommonModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NotifierModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [NotifierContainerComponent, NotifierNotificationComponent],\n      exports: [NotifierContainerComponent],\n      imports: [CommonModule],\n      providers: [NotifierAnimationService, NotifierService, NotifierQueueService, // Provide the default notifier configuration if just the module is imported\n      {\n        provide: NotifierConfigToken,\n        useFactory: notifierDefaultConfigFactory\n      }]\n    }]\n  }], null, null);\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NotifierModule, {\n    declarations: function declarations() {\n      return [NotifierContainerComponent, NotifierNotificationComponent];\n    },\n    imports: function imports() {\n      return [CommonModule];\n    },\n    exports: function exports() {\n      return [NotifierContainerComponent];\n    }\n  });\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { NotifierConfig, NotifierConfigToken, NotifierContainerComponent, NotifierModule, NotifierNotificationComponent, NotifierOptionsToken, NotifierService, notifierCustomConfigFactory, notifierDefaultConfigFactory, NotifierQueueService as ɵa, NotifierTimerService as ɵb, NotifierAnimationService as ɵc }; //# sourceMappingURL=angular-notifier.js.map","map":{"version":3,"sources":["C:/Users/Andrei/Desktop/licenta/Licenta2021/frontend/node_modules/angular-notifier/__ivy_ngcc__/fesm2015/angular-notifier.js"],"names":["InjectionToken","Injectable","Inject","Component","ChangeDetectionStrategy","ChangeDetectorRef","EventEmitter","ElementRef","Renderer2","Input","Output","NgModule","Subject","CommonModule","ɵngcc0","ɵngcc1","NotifierContainerComponent_li_1_Template","rf","ctx","_r3","ɵɵgetCurrentView","ɵɵelementStart","ɵɵlistener","NotifierContainerComponent_li_1_Template_notifier_notification_ready_1_listener","$event","ɵɵrestoreView","ctx_r2","ɵɵnextContext","onNotificationReady","NotifierContainerComponent_li_1_Template_notifier_notification_dismiss_1_listener","ctx_r4","onNotificationDismiss","ɵɵelementEnd","notification_r1","$implicit","ɵɵadvance","ɵɵproperty","_c0","a0","notification","NotifierNotificationComponent_ng_container_0_Template","ɵɵelementContainer","ctx_r0","template","ɵɵpureFunction1","NotifierNotificationComponent_ng_template_1_button_2_Template","_r5","NotifierNotificationComponent_ng_template_1_button_2_Template_button_click_0_listener","onClickDismiss","ɵɵnamespaceSVG","ɵɵelement","NotifierNotificationComponent_ng_template_1_Template","ɵɵtext","ɵɵtemplate","ɵɵtextInterpolate","message","config","behaviour","showDismissButton","NotifierNotification","options","Object","assign","id","undefined","Date","getTime","NotifierConfig","customOptions","animations","enabled","hide","easing","offset","preset","speed","overlap","shift","show","autoHide","onClick","onMouseover","stacking","position","horizontal","distance","vertical","gap","theme","NotifierOptionsToken","NotifierConfigToken","NotifierQueueService","actionStream","actionQueue","isActionInProgress","action","push","tryToRunNextAction","length","next","ɵfac","NotifierQueueService_Factory","t","ɵprov","ɵɵdefineInjectable","token","factory","ctorParameters","ngDevMode","ɵsetClassMetadata","type","NotifierService","notifierQueueService","queueService","notificationOptions","payload","notificationId","NotifierService_Factory","ɵɵinject","decorators","args","NotifierContainerComponent","changeDetector","notifierService","getConfig","notifications","queueServiceSubscription","subscribe","handleAction","then","continue","unsubscribe","index","notificationComponent","currentNotification","component","continueHandleShowAction","handleShowAction","handleHideAction","handleHideOldestAction","handleHideNewestAction","handleHideAllAction","Promise","resolve","tempPromiseResolver","addNotificationToList","numberOfNotifications","implicitStackingLimit","removeNotificationFromList","stepPromises","oldNotifications","slice","setTimeout","shiftNotifications","getHeight","all","findNotificationById","notificationIndex","findNotificationIndexById","i","animationOffset","removeAllNotificationsFromList","toMakePlace","notificationPromises","markForCheck","filter","item","find","findIndex","NotifierContainerComponent_Factory","ɵɵdirectiveInject","ɵcmp","ɵɵdefineComponent","selectors","hostAttrs","decls","vars","consts","NotifierContainerComponent_Template","identifyNotification","directives","NgForOf","NotifierNotificationComponent","encapsulation","changeDetection","OnPush","host","class","selector","ɵ0","from","opacity","to","ɵ1","fade","ɵ0$1","getShift","transform","horizontalPosition","ɵ1$1","slide","NotifierAnimationService","animationPresets","direction","keyframes","duration","fill","NotifierAnimationService_Factory","NotifierTimerService","now","remaining","finishPromiseResolver","clearTimeout","timerId","window","finish","NotifierTimerService_Factory","elementRef","renderer","notifierTimerService","notifierAnimationService","ready","dismiss","timerService","animationService","element","nativeElement","elementShift","setup","elementHeight","offsetHeight","elementWidth","offsetWidth","emit","animationData","getAnimationData","animatedProperties","keys","setStyle","animation","animate","onfinish","startAutoHideTimer","stopAutoHideTimer","shiftToMakePlace","newElementShift","pauseAutoHideTimer","continueAutoHideTimer","start","pause","stop","addClass","NotifierNotificationComponent_Factory","hostBindings","NotifierNotificationComponent_HostBindings","NotifierNotificationComponent_click_HostBindingHandler","onNotificationClick","NotifierNotificationComponent_mouseout_HostBindingHandler","onNotificationMouseout","NotifierNotificationComponent_mouseover_HostBindingHandler","onNotificationMouseover","inputs","outputs","features","ɵɵProvidersFeature","NotifierNotificationComponent_Template","ɵɵtemplateRefExtractor","_r1","ɵɵreference","NgIf","NgTemplateOutlet","propDecorators","providers","notifierCustomConfigFactory","notifierDefaultConfigFactory","NotifierModule","ngModule","provide","useValue","deps","useFactory","NotifierModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports","declarations","exports","ngJitMode","ɵɵsetNgModuleScope","ɵa","ɵb","ɵc"],"mappings":"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","sourcesContent":["import { InjectionToken, Injectable, Inject, Component, ChangeDetectionStrategy, ChangeDetectorRef, EventEmitter, ElementRef, Renderer2, Input, Output, NgModule } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { CommonModule } from '@angular/common';\n\n/**\n * Notification\n *\n * This class describes the structure of a notifiction, including all information it needs to live, and everyone else needs to work with it.\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\n\nfunction NotifierContainerComponent_li_1_Template(rf, ctx) { if (rf & 1) {\n    const _r3 = ɵngcc0.ɵɵgetCurrentView();\n    ɵngcc0.ɵɵelementStart(0, \"li\", 2);\n    ɵngcc0.ɵɵelementStart(1, \"notifier-notification\", 3);\n    ɵngcc0.ɵɵlistener(\"ready\", function NotifierContainerComponent_li_1_Template_notifier_notification_ready_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r3); const ctx_r2 = ɵngcc0.ɵɵnextContext(); return ctx_r2.onNotificationReady($event); })(\"dismiss\", function NotifierContainerComponent_li_1_Template_notifier_notification_dismiss_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r3); const ctx_r4 = ɵngcc0.ɵɵnextContext(); return ctx_r4.onNotificationDismiss($event); });\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const notification_r1 = ctx.$implicit;\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"notification\", notification_r1);\n} }\nconst _c0 = function (a0) { return { notification: a0 }; };\nfunction NotifierNotificationComponent_ng_container_0_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementContainer(0, 2);\n} if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r0.notification.template)(\"ngTemplateOutletContext\", ɵngcc0.ɵɵpureFunction1(2, _c0, ctx_r0.notification));\n} }\nfunction NotifierNotificationComponent_ng_template_1_button_2_Template(rf, ctx) { if (rf & 1) {\n    const _r5 = ɵngcc0.ɵɵgetCurrentView();\n    ɵngcc0.ɵɵelementStart(0, \"button\", 5);\n    ɵngcc0.ɵɵlistener(\"click\", function NotifierNotificationComponent_ng_template_1_button_2_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r5); const ctx_r4 = ɵngcc0.ɵɵnextContext(2); return ctx_r4.onClickDismiss(); });\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelementStart(1, \"svg\", 6);\n    ɵngcc0.ɵɵelement(2, \"path\", 7);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n} }\nfunction NotifierNotificationComponent_ng_template_1_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"p\", 3);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵtemplate(2, NotifierNotificationComponent_ng_template_1_button_2_Template, 3, 0, \"button\", 4);\n} if (rf & 2) {\n    const ctx_r2 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r2.notification.message);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r2.config.behaviour.showDismissButton);\n} }\nclass NotifierNotification {\n    /**\n     * Constructor\n     *\n     * @param options Notifier options\n     */\n    constructor(options) {\n        /**\n         * The template to customize\n         * the appearance of the notification\n         */\n        this.template = null;\n        Object.assign(this, options);\n        // If not set manually, we have to create a unique notification ID by ourselves. The ID generation relies on the current browser\n        // datetime in ms, in praticular the moment this notification gets constructed. Concurrency, and thus two IDs being the exact same,\n        // is not possible due to the action queue concept.\n        if (options.id === undefined) {\n            this.id = `ID_${new Date().getTime()}`;\n        }\n    }\n}\n\n/**\n * Notifier configuration\n *\n * The notifier configuration defines what notifications look like, how they behave, and how they get animated. It is a global\n * configuration, which means that it only can be set once (at the beginning), and cannot be changed afterwards. Aligning to the world of\n * Angular, this configuration can be provided in the root app module - alternatively, a meaningful default configuration will be used.\n */\nclass NotifierConfig {\n    /**\n     * Constructor\n     *\n     * @param [customOptions={}] Custom notifier options, optional\n     */\n    constructor(customOptions = {}) {\n        // Set default values\n        this.animations = {\n            enabled: true,\n            hide: {\n                easing: 'ease',\n                offset: 50,\n                preset: 'fade',\n                speed: 300,\n            },\n            overlap: 150,\n            shift: {\n                easing: 'ease',\n                speed: 300,\n            },\n            show: {\n                easing: 'ease',\n                preset: 'slide',\n                speed: 300,\n            },\n        };\n        this.behaviour = {\n            autoHide: 7000,\n            onClick: false,\n            onMouseover: 'pauseAutoHide',\n            showDismissButton: true,\n            stacking: 4,\n        };\n        this.position = {\n            horizontal: {\n                distance: 12,\n                position: 'left',\n            },\n            vertical: {\n                distance: 12,\n                gap: 10,\n                position: 'bottom',\n            },\n        };\n        this.theme = 'material';\n        // The following merges the custom options into the notifier config, respecting the already set default values\n        // This linear, more explicit and code-sizy workflow is preferred here over a recursive one (because we know the object structure)\n        // Technical sidenote: Objects are merged, other types of values simply overwritten / copied\n        if (customOptions.theme !== undefined) {\n            this.theme = customOptions.theme;\n        }\n        if (customOptions.animations !== undefined) {\n            if (customOptions.animations.enabled !== undefined) {\n                this.animations.enabled = customOptions.animations.enabled;\n            }\n            if (customOptions.animations.overlap !== undefined) {\n                this.animations.overlap = customOptions.animations.overlap;\n            }\n            if (customOptions.animations.hide !== undefined) {\n                Object.assign(this.animations.hide, customOptions.animations.hide);\n            }\n            if (customOptions.animations.shift !== undefined) {\n                Object.assign(this.animations.shift, customOptions.animations.shift);\n            }\n            if (customOptions.animations.show !== undefined) {\n                Object.assign(this.animations.show, customOptions.animations.show);\n            }\n        }\n        if (customOptions.behaviour !== undefined) {\n            Object.assign(this.behaviour, customOptions.behaviour);\n        }\n        if (customOptions.position !== undefined) {\n            if (customOptions.position.horizontal !== undefined) {\n                Object.assign(this.position.horizontal, customOptions.position.horizontal);\n            }\n            if (customOptions.position.vertical !== undefined) {\n                Object.assign(this.position.vertical, customOptions.position.vertical);\n            }\n        }\n    }\n}\n\n/**\n * Injection Token for notifier options\n */\nconst NotifierOptionsToken = new InjectionToken('[angular-notifier] Notifier Options');\n/**\n * Injection Token for notifier configuration\n */\nconst NotifierConfigToken = new InjectionToken('[anuglar-notifier] Notifier Config');\n\n/**\n * Notifier queue service\n *\n * In general, API calls don't get processed right away. Instead, we have to queue them up in order to prevent simultanious API calls\n * interfering with each other. This, at least in theory, is possible at any time. In particular, animations - which potentially overlap -\n * can cause changes in JS classes as well as affect the DOM. Therefore, the queue service takes all actions, puts them in a queue, and\n * processes them at the right time (which is when the previous action has been processed successfully).\n *\n * Technical sidenote:\n * An action looks pretty similar to the ones within the Flux / Redux pattern.\n */\nclass NotifierQueueService {\n    /**\n     * Constructor\n     */\n    constructor() {\n        this.actionStream = new Subject();\n        this.actionQueue = [];\n        this.isActionInProgress = false;\n    }\n    /**\n     * Push a new action to the queue, and try to run it\n     *\n     * @param action Action object\n     */\n    push(action) {\n        this.actionQueue.push(action);\n        this.tryToRunNextAction();\n    }\n    /**\n     * Continue with the next action (called when the current action is finished)\n     */\n    continue() {\n        this.isActionInProgress = false;\n        this.tryToRunNextAction();\n    }\n    /**\n     * Try to run the next action in the queue; we skip if there already is some action in progress, or if there is no action left\n     */\n    tryToRunNextAction() {\n        if (this.isActionInProgress || this.actionQueue.length === 0) {\n            return; // Skip (the queue can now go drink a coffee as it has nothing to do anymore)\n        }\n        this.isActionInProgress = true;\n        this.actionStream.next(this.actionQueue.shift()); // Push next action to the stream, and remove the current action from the queue\n    }\n}\nNotifierQueueService.ɵfac = function NotifierQueueService_Factory(t) { return new (t || NotifierQueueService)(); };\nNotifierQueueService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: NotifierQueueService, factory: NotifierQueueService.ɵfac });\nNotifierQueueService.ctorParameters = () => [];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NotifierQueueService, [{\n        type: Injectable\n    }], function () { return []; }, null); })();\n\n/**\n * Notifier service\n *\n * This service provides access to the public notifier API. Once injected into a component, directive, pipe, service, or any other building\n * block of an applications, it can be used to show new notifications, and hide existing ones. Internally, it transforms API calls into\n * actions, which then get thrown into the action queue - eventually being processed at the right moment.\n */\nclass NotifierService {\n    /**\n     * Constructor\n     *\n     * @param notifierQueueService Notifier queue service\n     * @param config               Notifier configuration, optionally injected as a dependency\n     */\n    constructor(notifierQueueService, config) {\n        this.queueService = notifierQueueService;\n        this.config = config;\n    }\n    /**\n     * Get the notifier configuration\n     *\n     * @returns Notifier configuration\n     */\n    getConfig() {\n        return this.config;\n    }\n    /**\n     * API: Show a new notification\n     *\n     * @param notificationOptions Notification options\n     */\n    show(notificationOptions) {\n        this.queueService.push({\n            payload: notificationOptions,\n            type: 'SHOW',\n        });\n    }\n    /**\n     * API: Hide a specific notification, given its ID\n     *\n     * @param notificationId ID of the notification to hide\n     */\n    hide(notificationId) {\n        this.queueService.push({\n            payload: notificationId,\n            type: 'HIDE',\n        });\n    }\n    /**\n     * API: Hide the newest notification\n     */\n    hideNewest() {\n        this.queueService.push({\n            type: 'HIDE_NEWEST',\n        });\n    }\n    /**\n     * API: Hide the oldest notification\n     */\n    hideOldest() {\n        this.queueService.push({\n            type: 'HIDE_OLDEST',\n        });\n    }\n    /**\n     * API: Hide all notifications at once\n     */\n    hideAll() {\n        this.queueService.push({\n            type: 'HIDE_ALL',\n        });\n    }\n    /**\n     * API: Shortcut for showing a new notification\n     *\n     * @param type             Type of the notification\n     * @param message          Message of the notification\n     * @param [notificationId] Unique ID for the notification (optional)\n     */\n    notify(type, message, notificationId) {\n        const notificationOptions = {\n            message,\n            type,\n        };\n        if (notificationId !== undefined) {\n            notificationOptions.id = notificationId;\n        }\n        this.show(notificationOptions);\n    }\n}\nNotifierService.ɵfac = function NotifierService_Factory(t) { return new (t || NotifierService)(ɵngcc0.ɵɵinject(NotifierQueueService), ɵngcc0.ɵɵinject(NotifierConfigToken)); };\nNotifierService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: NotifierService, factory: NotifierService.ɵfac });\nNotifierService.ctorParameters = () => [\n    { type: NotifierQueueService },\n    { type: NotifierConfig, decorators: [{ type: Inject, args: [NotifierConfigToken,] }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NotifierService, [{\n        type: Injectable\n    }], function () { return [{ type: NotifierQueueService }, { type: NotifierConfig, decorators: [{\n                type: Inject,\n                args: [NotifierConfigToken]\n            }] }]; }, null); })();\n\n/**\n * Notifier container component\n * ----------------------------\n * This component acts as a wrapper for all notification components; consequently, it is responsible for creating a new notification\n * component and removing an existing notification component. Being more precicely, it also handles side effects of those actions, such as\n * shifting or even completely removing other notifications as well. Overall, this components handles actions coming from the queue service\n * by subscribing to its action stream.\n *\n * Technical sidenote:\n * This component has to be used somewhere in an application to work; it will not inject and create itself automatically, primarily in order\n * to not break the Angular AoT compilation. Moreover, this component (and also the notification components) set their change detection\n * strategy onPush, which means that we handle change detection manually in order to get the best performance. (#perfmatters)\n */\nclass NotifierContainerComponent {\n    /**\n     * Constructor\n     *\n     * @param changeDetector       Change detector, used for manually triggering change detection runs\n     * @param notifierQueueService Notifier queue service\n     * @param notifierService      Notifier service\n     */\n    constructor(changeDetector, notifierQueueService, notifierService) {\n        this.changeDetector = changeDetector;\n        this.queueService = notifierQueueService;\n        this.config = notifierService.getConfig();\n        this.notifications = [];\n        // Connects this component up to the action queue, then handle incoming actions\n        this.queueServiceSubscription = this.queueService.actionStream.subscribe((action) => {\n            this.handleAction(action).then(() => {\n                this.queueService.continue();\n            });\n        });\n    }\n    /**\n     * Component destroyment lifecycle hook, cleans up the observable subsciption\n     */\n    ngOnDestroy() {\n        if (this.queueServiceSubscription) {\n            this.queueServiceSubscription.unsubscribe();\n        }\n    }\n    /**\n     * Notification identifier, used as the ngFor trackby function\n     *\n     * @param   index        Index\n     * @param   notification Notifier notification\n     * @returns Notification ID as the unique identnfier\n     */\n    identifyNotification(index, notification) {\n        return notification.id;\n    }\n    /**\n     * Event handler, handles clicks on notification dismiss buttons\n     *\n     * @param notificationId ID of the notification to dismiss\n     */\n    onNotificationDismiss(notificationId) {\n        this.queueService.push({\n            payload: notificationId,\n            type: 'HIDE',\n        });\n    }\n    /**\n     * Event handler, handles notification ready events\n     *\n     * @param notificationComponent Notification component reference\n     */\n    onNotificationReady(notificationComponent) {\n        const currentNotification = this.notifications[this.notifications.length - 1]; // Get the latest notification\n        currentNotification.component = notificationComponent; // Save the new omponent reference\n        this.continueHandleShowAction(currentNotification); // Continue with handling the show action\n    }\n    /**\n     * Handle incoming actions by mapping action types to methods, and then running them\n     *\n     * @param   action Action object\n     * @returns Promise, resolved when done\n     */\n    handleAction(action) {\n        switch (action.type // TODO: Maybe a map (actionType -> class method) is a cleaner solution here?\n        ) {\n            case 'SHOW':\n                return this.handleShowAction(action);\n            case 'HIDE':\n                return this.handleHideAction(action);\n            case 'HIDE_OLDEST':\n                return this.handleHideOldestAction(action);\n            case 'HIDE_NEWEST':\n                return this.handleHideNewestAction(action);\n            case 'HIDE_ALL':\n                return this.handleHideAllAction();\n            default:\n                return new Promise((resolve) => {\n                    resolve(); // Ignore unknown action types\n                });\n        }\n    }\n    /**\n     * Show a new notification\n     *\n     * We simply add the notification to the list, and then wait until its properly initialized / created / rendered.\n     *\n     * @param   action Action object\n     * @returns Promise, resolved when done\n     */\n    handleShowAction(action) {\n        return new Promise((resolve) => {\n            this.tempPromiseResolver = resolve; // Save the promise resolve function so that it can be called later on by another method\n            this.addNotificationToList(new NotifierNotification(action.payload));\n        });\n    }\n    /**\n     * Continue to show a new notification (after the notification components is initialized / created / rendered).\n     *\n     * If this is the first (and thus only) notification, we can simply show it. Otherwhise, if stacking is disabled (or a low value), we\n     * switch out notifications, in particular we hide the existing one, and then show our new one. Yet, if stacking is enabled, we first\n     * shift all older notifications, and then show our new notification. In addition, if there are too many notification on the screen,\n     * we hide the oldest one first. Furthermore, if configured, animation overlapping is applied.\n     *\n     * @param notification New notification to show\n     */\n    continueHandleShowAction(notification) {\n        // First (which means only one) notification in the list?\n        const numberOfNotifications = this.notifications.length;\n        if (numberOfNotifications === 1) {\n            notification.component.show().then(this.tempPromiseResolver); // Done\n        }\n        else {\n            const implicitStackingLimit = 2;\n            // Stacking enabled? (stacking value below 2 means stacking is disabled)\n            if (this.config.behaviour.stacking === false || this.config.behaviour.stacking < implicitStackingLimit) {\n                this.notifications[0].component.hide().then(() => {\n                    this.removeNotificationFromList(this.notifications[0]);\n                    notification.component.show().then(this.tempPromiseResolver); // Done\n                });\n            }\n            else {\n                const stepPromises = [];\n                // Are there now too many notifications?\n                if (numberOfNotifications > this.config.behaviour.stacking) {\n                    const oldNotifications = this.notifications.slice(1, numberOfNotifications - 1);\n                    // Are animations enabled?\n                    if (this.config.animations.enabled) {\n                        // Is animation overlap enabled?\n                        if (this.config.animations.overlap !== false && this.config.animations.overlap > 0) {\n                            stepPromises.push(this.notifications[0].component.hide());\n                            setTimeout(() => {\n                                stepPromises.push(this.shiftNotifications(oldNotifications, notification.component.getHeight(), true));\n                            }, this.config.animations.hide.speed - this.config.animations.overlap);\n                            setTimeout(() => {\n                                stepPromises.push(notification.component.show());\n                            }, this.config.animations.hide.speed + this.config.animations.shift.speed - this.config.animations.overlap);\n                        }\n                        else {\n                            stepPromises.push(new Promise((resolve) => {\n                                this.notifications[0].component.hide().then(() => {\n                                    this.shiftNotifications(oldNotifications, notification.component.getHeight(), true).then(() => {\n                                        notification.component.show().then(resolve);\n                                    });\n                                });\n                            }));\n                        }\n                    }\n                    else {\n                        stepPromises.push(this.notifications[0].component.hide());\n                        stepPromises.push(this.shiftNotifications(oldNotifications, notification.component.getHeight(), true));\n                        stepPromises.push(notification.component.show());\n                    }\n                }\n                else {\n                    const oldNotifications = this.notifications.slice(0, numberOfNotifications - 1);\n                    // Are animations enabled?\n                    if (this.config.animations.enabled) {\n                        // Is animation overlap enabled?\n                        if (this.config.animations.overlap !== false && this.config.animations.overlap > 0) {\n                            stepPromises.push(this.shiftNotifications(oldNotifications, notification.component.getHeight(), true));\n                            setTimeout(() => {\n                                stepPromises.push(notification.component.show());\n                            }, this.config.animations.shift.speed - this.config.animations.overlap);\n                        }\n                        else {\n                            stepPromises.push(new Promise((resolve) => {\n                                this.shiftNotifications(oldNotifications, notification.component.getHeight(), true).then(() => {\n                                    notification.component.show().then(resolve);\n                                });\n                            }));\n                        }\n                    }\n                    else {\n                        stepPromises.push(this.shiftNotifications(oldNotifications, notification.component.getHeight(), true));\n                        stepPromises.push(notification.component.show());\n                    }\n                }\n                Promise.all(stepPromises).then(() => {\n                    if (numberOfNotifications > this.config.behaviour.stacking) {\n                        this.removeNotificationFromList(this.notifications[0]);\n                    }\n                    this.tempPromiseResolver();\n                }); // Done\n            }\n        }\n    }\n    /**\n     * Hide an existing notification\n     *\n     * Fist, we skip everything if there are no notifications at all, or the given notification does not exist. Then, we hide the given\n     * notification. If there exist older notifications, we then shift them around to fill the gap. Once both hiding the given notification\n     * and shifting the older notificaitons is done, the given notification gets finally removed (from the DOM).\n     *\n     * @param   action Action object, payload contains the notification ID\n     * @returns Promise, resolved when done\n     */\n    handleHideAction(action) {\n        return new Promise((resolve) => {\n            const stepPromises = [];\n            // Does the notification exist / are there even any notifications? (let's prevent accidential errors)\n            const notification = this.findNotificationById(action.payload);\n            if (notification === undefined) {\n                resolve();\n                return;\n            }\n            // Get older notifications\n            const notificationIndex = this.findNotificationIndexById(action.payload);\n            if (notificationIndex === undefined) {\n                resolve();\n                return;\n            }\n            const oldNotifications = this.notifications.slice(0, notificationIndex);\n            // Do older notifications exist, and thus do we need to shift other notifications as a consequence?\n            if (oldNotifications.length > 0) {\n                // Are animations enabled?\n                if (this.config.animations.enabled && this.config.animations.hide.speed > 0) {\n                    // Is animation overlap enabled?\n                    if (this.config.animations.overlap !== false && this.config.animations.overlap > 0) {\n                        stepPromises.push(notification.component.hide());\n                        setTimeout(() => {\n                            stepPromises.push(this.shiftNotifications(oldNotifications, notification.component.getHeight(), false));\n                        }, this.config.animations.hide.speed - this.config.animations.overlap);\n                    }\n                    else {\n                        notification.component.hide().then(() => {\n                            stepPromises.push(this.shiftNotifications(oldNotifications, notification.component.getHeight(), false));\n                        });\n                    }\n                }\n                else {\n                    stepPromises.push(notification.component.hide());\n                    stepPromises.push(this.shiftNotifications(oldNotifications, notification.component.getHeight(), false));\n                }\n            }\n            else {\n                stepPromises.push(notification.component.hide());\n            }\n            // Wait until both hiding and shifting is done, then remove the notification from the list\n            Promise.all(stepPromises).then(() => {\n                this.removeNotificationFromList(notification);\n                resolve(); // Done\n            });\n        });\n    }\n    /**\n     * Hide the oldest notification (bridge to handleHideAction)\n     *\n     * @param   action Action object\n     * @returns Promise, resolved when done\n     */\n    handleHideOldestAction(action) {\n        // Are there any notifications? (prevent accidential errors)\n        if (this.notifications.length === 0) {\n            return new Promise((resolve) => {\n                resolve();\n            }); // Done\n        }\n        else {\n            action.payload = this.notifications[0].id;\n            return this.handleHideAction(action);\n        }\n    }\n    /**\n     * Hide the newest notification (bridge to handleHideAction)\n     *\n     * @param   action Action object\n     * @returns Promise, resolved when done\n     */\n    handleHideNewestAction(action) {\n        // Are there any notifications? (prevent accidential errors)\n        if (this.notifications.length === 0) {\n            return new Promise((resolve) => {\n                resolve();\n            }); // Done\n        }\n        else {\n            action.payload = this.notifications[this.notifications.length - 1].id;\n            return this.handleHideAction(action);\n        }\n    }\n    /**\n     * Hide all notifications at once\n     *\n     * @returns Promise, resolved when done\n     */\n    handleHideAllAction() {\n        return new Promise((resolve) => {\n            // Are there any notifications? (prevent accidential errors)\n            const numberOfNotifications = this.notifications.length;\n            if (numberOfNotifications === 0) {\n                resolve(); // Done\n                return;\n            }\n            // Are animations enabled?\n            if (this.config.animations.enabled &&\n                this.config.animations.hide.speed > 0 &&\n                this.config.animations.hide.offset !== false &&\n                this.config.animations.hide.offset > 0) {\n                for (let i = numberOfNotifications - 1; i >= 0; i--) {\n                    const animationOffset = this.config.position.vertical.position === 'top' ? numberOfNotifications - 1 : i;\n                    setTimeout(() => {\n                        this.notifications[i].component.hide().then(() => {\n                            // Are we done here, was this the last notification to be hidden?\n                            if ((this.config.position.vertical.position === 'top' && i === 0) ||\n                                (this.config.position.vertical.position === 'bottom' && i === numberOfNotifications - 1)) {\n                                this.removeAllNotificationsFromList();\n                                resolve(); // Done\n                            }\n                        });\n                    }, this.config.animations.hide.offset * animationOffset);\n                }\n            }\n            else {\n                const stepPromises = [];\n                for (let i = numberOfNotifications - 1; i >= 0; i--) {\n                    stepPromises.push(this.notifications[i].component.hide());\n                }\n                Promise.all(stepPromises).then(() => {\n                    this.removeAllNotificationsFromList();\n                    resolve(); // Done\n                });\n            }\n        });\n    }\n    /**\n     * Shift multiple notifications at once\n     *\n     * @param   notifications List containing the notifications to be shifted\n     * @param   distance      Distance to shift (in px)\n     * @param   toMakePlace   Flag, defining in which direciton to shift\n     * @returns Promise, resolved when done\n     */\n    shiftNotifications(notifications, distance, toMakePlace) {\n        return new Promise((resolve) => {\n            // Are there any notifications to shift?\n            if (notifications.length === 0) {\n                resolve();\n                return;\n            }\n            const notificationPromises = [];\n            for (let i = notifications.length - 1; i >= 0; i--) {\n                notificationPromises.push(notifications[i].component.shift(distance, toMakePlace));\n            }\n            Promise.all(notificationPromises).then(resolve); // Done\n        });\n    }\n    /**\n     * Add a new notification to the list of notifications (triggers change detection)\n     *\n     * @param notification Notification to add to the list of notifications\n     */\n    addNotificationToList(notification) {\n        this.notifications.push(notification);\n        this.changeDetector.markForCheck(); // Run change detection because the notification list changed\n    }\n    /**\n     * Remove an existing notification from the list of notifications (triggers change detection)\n     *\n     * @param notification Notification to be removed from the list of notifications\n     */\n    removeNotificationFromList(notification) {\n        this.notifications = this.notifications.filter((item) => item.component !== notification.component);\n        this.changeDetector.markForCheck(); // Run change detection because the notification list changed\n    }\n    /**\n     * Remove all notifications from the list (triggers change detection)\n     */\n    removeAllNotificationsFromList() {\n        this.notifications = [];\n        this.changeDetector.markForCheck(); // Run change detection because the notification list changed\n    }\n    /**\n     * Helper: Find a notification in the notification list by a given notification ID\n     *\n     * @param   notificationId Notification ID, used for finding notification\n     * @returns Notification, undefined if not found\n     */\n    findNotificationById(notificationId) {\n        return this.notifications.find((currentNotification) => currentNotification.id === notificationId);\n    }\n    /**\n     * Helper: Find a notification's index by a given notification ID\n     *\n     * @param   notificationId Notification ID, used for finding a notification's index\n     * @returns Notification index, undefined if not found\n     */\n    findNotificationIndexById(notificationId) {\n        const notificationIndex = this.notifications.findIndex((currentNotification) => currentNotification.id === notificationId);\n        return notificationIndex !== -1 ? notificationIndex : undefined;\n    }\n}\nNotifierContainerComponent.ɵfac = function NotifierContainerComponent_Factory(t) { return new (t || NotifierContainerComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(NotifierQueueService), ɵngcc0.ɵɵdirectiveInject(NotifierService)); };\nNotifierContainerComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: NotifierContainerComponent, selectors: [[\"notifier-container\"]], hostAttrs: [1, \"notifier__container\"], decls: 2, vars: 2, consts: [[1, \"notifier__container-list\"], [\"class\", \"notifier__container-list-item\", 4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [1, \"notifier__container-list-item\"], [3, \"notification\", \"ready\", \"dismiss\"]], template: function NotifierContainerComponent_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"ul\", 0);\n        ɵngcc0.ɵɵtemplate(1, NotifierContainerComponent_li_1_Template, 2, 1, \"li\", 1);\n        ɵngcc0.ɵɵelementEnd();\n    } if (rf & 2) {\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngForOf\", ctx.notifications)(\"ngForTrackBy\", ctx.identifyNotification);\n    } }, directives: function () { return [ɵngcc1.NgForOf, NotifierNotificationComponent]; }, encapsulation: 2, changeDetection: 0 });\nNotifierContainerComponent.ctorParameters = () => [\n    { type: ChangeDetectorRef },\n    { type: NotifierQueueService },\n    { type: NotifierService }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NotifierContainerComponent, [{\n        type: Component,\n        args: [{\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                host: {\n                    class: 'notifier__container'\n                },\n                selector: 'notifier-container',\n                template: \"<ul class=\\\"notifier__container-list\\\">\\n  <li class=\\\"notifier__container-list-item\\\" *ngFor=\\\"let notification of notifications; trackBy: identifyNotification\\\">\\n    <notifier-notification [notification]=\\\"notification\\\" (ready)=\\\"onNotificationReady($event)\\\" (dismiss)=\\\"onNotificationDismiss($event)\\\">\\n    </notifier-notification>\\n  </li>\\n</ul>\\n\"\n            }]\n    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: NotifierQueueService }, { type: NotifierService }]; }, null); })();\n\nconst ɵ0 = () => {\n    return {\n        from: {\n            opacity: '1',\n        },\n        to: {\n            opacity: '0',\n        },\n    };\n}, ɵ1 = () => {\n    return {\n        from: {\n            opacity: '0',\n        },\n        to: {\n            opacity: '1',\n        },\n    };\n};\n/**\n * Fade animation preset\n */\nconst fade = {\n    hide: ɵ0,\n    show: ɵ1,\n};\n\nconst ɵ0$1 = (notification) => {\n    // Prepare variables\n    const config = notification.component.getConfig();\n    const shift = notification.component.getShift();\n    let from;\n    let to;\n    // Configure variables, depending on configuration and component\n    if (config.position.horizontal.position === 'left') {\n        from = {\n            transform: `translate3d( 0, ${shift}px, 0 )`,\n        };\n        to = {\n            transform: `translate3d( calc( -100% - ${config.position.horizontal.distance}px - 10px ), ${shift}px, 0 )`,\n        };\n    }\n    else if (config.position.horizontal.position === 'right') {\n        from = {\n            transform: `translate3d( 0, ${shift}px, 0 )`,\n        };\n        to = {\n            transform: `translate3d( calc( 100% + ${config.position.horizontal.distance}px + 10px ), ${shift}px, 0 )`,\n        };\n    }\n    else {\n        let horizontalPosition;\n        if (config.position.vertical.position === 'top') {\n            horizontalPosition = `calc( -100% - ${config.position.horizontal.distance}px - 10px )`;\n        }\n        else {\n            horizontalPosition = `calc( 100% + ${config.position.horizontal.distance}px + 10px )`;\n        }\n        from = {\n            transform: `translate3d( -50%, ${shift}px, 0 )`,\n        };\n        to = {\n            transform: `translate3d( -50%, ${horizontalPosition}, 0 )`,\n        };\n    }\n    // Done\n    return {\n        from,\n        to,\n    };\n}, ɵ1$1 = (notification) => {\n    // Prepare variables\n    const config = notification.component.getConfig();\n    let from;\n    let to;\n    // Configure variables, depending on configuration and component\n    if (config.position.horizontal.position === 'left') {\n        from = {\n            transform: `translate3d( calc( -100% - ${config.position.horizontal.distance}px - 10px ), 0, 0 )`,\n        };\n        to = {\n            transform: 'translate3d( 0, 0, 0 )',\n        };\n    }\n    else if (config.position.horizontal.position === 'right') {\n        from = {\n            transform: `translate3d( calc( 100% + ${config.position.horizontal.distance}px + 10px ), 0, 0 )`,\n        };\n        to = {\n            transform: 'translate3d( 0, 0, 0 )',\n        };\n    }\n    else {\n        let horizontalPosition;\n        if (config.position.vertical.position === 'top') {\n            horizontalPosition = `calc( -100% - ${config.position.horizontal.distance}px - 10px )`;\n        }\n        else {\n            horizontalPosition = `calc( 100% + ${config.position.horizontal.distance}px + 10px )`;\n        }\n        from = {\n            transform: `translate3d( -50%, ${horizontalPosition}, 0 )`,\n        };\n        to = {\n            transform: 'translate3d( -50%, 0, 0 )',\n        };\n    }\n    // Done\n    return {\n        from,\n        to,\n    };\n};\n/**\n * Slide animation preset\n */\nconst slide = {\n    hide: ɵ0$1,\n    show: ɵ1$1,\n};\n\n/**\n * Notifier animation service\n */\nclass NotifierAnimationService {\n    /**\n     * Constructor\n     */\n    constructor() {\n        this.animationPresets = {\n            fade,\n            slide,\n        };\n    }\n    /**\n     * Get animation data\n     *\n     * This method generates all data the Web Animations API needs to animate our notification. The result depends on both the animation\n     * direction (either in or out) as well as the notifications (and its attributes) itself.\n     *\n     * @param   direction    Animation direction, either in or out\n     * @param   notification Notification the animation data should be generated for\n     * @returns Animation information\n     */\n    getAnimationData(direction, notification) {\n        // Get all necessary animation data\n        let keyframes;\n        let duration;\n        let easing;\n        if (direction === 'show') {\n            keyframes = this.animationPresets[notification.component.getConfig().animations.show.preset].show(notification);\n            duration = notification.component.getConfig().animations.show.speed;\n            easing = notification.component.getConfig().animations.show.easing;\n        }\n        else {\n            keyframes = this.animationPresets[notification.component.getConfig().animations.hide.preset].hide(notification);\n            duration = notification.component.getConfig().animations.hide.speed;\n            easing = notification.component.getConfig().animations.hide.easing;\n        }\n        // Build and return animation data\n        return {\n            keyframes: [keyframes.from, keyframes.to],\n            options: {\n                duration,\n                easing,\n                fill: 'forwards',\n            },\n        };\n    }\n}\nNotifierAnimationService.ɵfac = function NotifierAnimationService_Factory(t) { return new (t || NotifierAnimationService)(); };\nNotifierAnimationService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: NotifierAnimationService, factory: NotifierAnimationService.ɵfac });\nNotifierAnimationService.ctorParameters = () => [];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NotifierAnimationService, [{\n        type: Injectable\n    }], function () { return []; }, null); })();\n\n/**\n * Notifier timer service\n *\n * This service acts as a timer, needed due to the still rather limited setTimeout JavaScript API. The timer service can start and stop a\n * timer. Furthermore, it can also pause the timer at any time, and resume later on. The timer API workd promise-based.\n */\nclass NotifierTimerService {\n    /**\n     * Constructor\n     */\n    constructor() {\n        this.now = 0;\n        this.remaining = 0;\n    }\n    /**\n     * Start (or resume) the timer\n     *\n     * @param   duration Timer duration, in ms\n     * @returns          Promise, resolved once the timer finishes\n     */\n    start(duration) {\n        return new Promise((resolve) => {\n            // For the first run ...\n            this.remaining = duration;\n            // Setup, then start the timer\n            this.finishPromiseResolver = resolve;\n            this.continue();\n        });\n    }\n    /**\n     * Pause the timer\n     */\n    pause() {\n        clearTimeout(this.timerId);\n        this.remaining -= new Date().getTime() - this.now;\n    }\n    /**\n     * Continue the timer\n     */\n    continue() {\n        this.now = new Date().getTime();\n        this.timerId = window.setTimeout(() => {\n            this.finish();\n        }, this.remaining);\n    }\n    /**\n     * Stop the timer\n     */\n    stop() {\n        clearTimeout(this.timerId);\n        this.remaining = 0;\n    }\n    /**\n     * Finish up the timeout by resolving the timer promise\n     */\n    finish() {\n        this.finishPromiseResolver();\n    }\n}\nNotifierTimerService.ɵfac = function NotifierTimerService_Factory(t) { return new (t || NotifierTimerService)(); };\nNotifierTimerService.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: NotifierTimerService, factory: NotifierTimerService.ɵfac });\nNotifierTimerService.ctorParameters = () => [];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NotifierTimerService, [{\n        type: Injectable\n    }], function () { return []; }, null); })();\n\n/**\n * Notifier notification component\n * -------------------------------\n * This component is responsible for actually displaying the notification on screen. In addition, it's able to show and hide this\n * notification, in particular to animate this notification in and out, as well as shift (move) this notification vertically around.\n * Furthermore, the notification component handles all interactions the user has with this notification / component, such as clicks and\n * mouse movements.\n */\nclass NotifierNotificationComponent {\n    /**\n     * Constructor\n     *\n     * @param elementRef               Reference to the component's element\n     * @param renderer                 Angular renderer\n     * @param notifierService          Notifier service\n     * @param notifierTimerService     Notifier timer service\n     * @param notifierAnimationService Notifier animation service\n     */\n    constructor(elementRef, renderer, notifierService, notifierTimerService, notifierAnimationService) {\n        this.config = notifierService.getConfig();\n        this.ready = new EventEmitter();\n        this.dismiss = new EventEmitter();\n        this.timerService = notifierTimerService;\n        this.animationService = notifierAnimationService;\n        this.renderer = renderer;\n        this.element = elementRef.nativeElement;\n        this.elementShift = 0;\n    }\n    /**\n     * Component after view init lifecycle hook, setts up the component and then emits the ready event\n     */\n    ngAfterViewInit() {\n        this.setup();\n        this.elementHeight = this.element.offsetHeight;\n        this.elementWidth = this.element.offsetWidth;\n        this.ready.emit(this);\n    }\n    /**\n     * Get the notifier config\n     *\n     * @returns Notifier configuration\n     */\n    getConfig() {\n        return this.config;\n    }\n    /**\n     * Get notification element height (in px)\n     *\n     * @returns Notification element height (in px)\n     */\n    getHeight() {\n        return this.elementHeight;\n    }\n    /**\n     * Get notification element width (in px)\n     *\n     * @returns Notification element height (in px)\n     */\n    getWidth() {\n        return this.elementWidth;\n    }\n    /**\n     * Get notification shift offset (in px)\n     *\n     * @returns Notification element shift offset (in px)\n     */\n    getShift() {\n        return this.elementShift;\n    }\n    /**\n     * Show (animate in) this notification\n     *\n     * @returns Promise, resolved when done\n     */\n    show() {\n        return new Promise((resolve) => {\n            // Are animations enabled?\n            if (this.config.animations.enabled && this.config.animations.show.speed > 0) {\n                // Get animation data\n                const animationData = this.animationService.getAnimationData('show', this.notification);\n                // Set initial styles (styles before animation), prevents quick flicker when animation starts\n                const animatedProperties = Object.keys(animationData.keyframes[0]);\n                for (let i = animatedProperties.length - 1; i >= 0; i--) {\n                    this.renderer.setStyle(this.element, animatedProperties[i], animationData.keyframes[0][animatedProperties[i]]);\n                }\n                // Animate notification in\n                this.renderer.setStyle(this.element, 'visibility', 'visible');\n                const animation = this.element.animate(animationData.keyframes, animationData.options);\n                animation.onfinish = () => {\n                    this.startAutoHideTimer();\n                    resolve(); // Done\n                };\n            }\n            else {\n                // Show notification\n                this.renderer.setStyle(this.element, 'visibility', 'visible');\n                this.startAutoHideTimer();\n                resolve(); // Done\n            }\n        });\n    }\n    /**\n     * Hide (animate out) this notification\n     *\n     * @returns Promise, resolved when done\n     */\n    hide() {\n        return new Promise((resolve) => {\n            this.stopAutoHideTimer();\n            // Are animations enabled?\n            if (this.config.animations.enabled && this.config.animations.hide.speed > 0) {\n                const animationData = this.animationService.getAnimationData('hide', this.notification);\n                const animation = this.element.animate(animationData.keyframes, animationData.options);\n                animation.onfinish = () => {\n                    resolve(); // Done\n                };\n            }\n            else {\n                resolve(); // Done\n            }\n        });\n    }\n    /**\n     * Shift (move) this notification\n     *\n     * @param   distance         Distance to shift (in px)\n     * @param   shiftToMakePlace Flag, defining in which direction to shift\n     * @returns Promise, resolved when done\n     */\n    shift(distance, shiftToMakePlace) {\n        return new Promise((resolve) => {\n            // Calculate new position (position after the shift)\n            let newElementShift;\n            if ((this.config.position.vertical.position === 'top' && shiftToMakePlace) ||\n                (this.config.position.vertical.position === 'bottom' && !shiftToMakePlace)) {\n                newElementShift = this.elementShift + distance + this.config.position.vertical.gap;\n            }\n            else {\n                newElementShift = this.elementShift - distance - this.config.position.vertical.gap;\n            }\n            const horizontalPosition = this.config.position.horizontal.position === 'middle' ? '-50%' : '0';\n            // Are animations enabled?\n            if (this.config.animations.enabled && this.config.animations.shift.speed > 0) {\n                const animationData = {\n                    // TODO: Extract into animation service\n                    keyframes: [\n                        {\n                            transform: `translate3d( ${horizontalPosition}, ${this.elementShift}px, 0 )`,\n                        },\n                        {\n                            transform: `translate3d( ${horizontalPosition}, ${newElementShift}px, 0 )`,\n                        },\n                    ],\n                    options: {\n                        duration: this.config.animations.shift.speed,\n                        easing: this.config.animations.shift.easing,\n                        fill: 'forwards',\n                    },\n                };\n                this.elementShift = newElementShift;\n                const animation = this.element.animate(animationData.keyframes, animationData.options);\n                animation.onfinish = () => {\n                    resolve(); // Done\n                };\n            }\n            else {\n                this.renderer.setStyle(this.element, 'transform', `translate3d( ${horizontalPosition}, ${newElementShift}px, 0 )`);\n                this.elementShift = newElementShift;\n                resolve(); // Done\n            }\n        });\n    }\n    /**\n     * Handle click on dismiss button\n     */\n    onClickDismiss() {\n        this.dismiss.emit(this.notification.id);\n    }\n    /**\n     * Handle mouseover over notification area\n     */\n    onNotificationMouseover() {\n        if (this.config.behaviour.onMouseover === 'pauseAutoHide') {\n            this.pauseAutoHideTimer();\n        }\n        else if (this.config.behaviour.onMouseover === 'resetAutoHide') {\n            this.stopAutoHideTimer();\n        }\n    }\n    /**\n     * Handle mouseout from notification area\n     */\n    onNotificationMouseout() {\n        if (this.config.behaviour.onMouseover === 'pauseAutoHide') {\n            this.continueAutoHideTimer();\n        }\n        else if (this.config.behaviour.onMouseover === 'resetAutoHide') {\n            this.startAutoHideTimer();\n        }\n    }\n    /**\n     * Handle click on notification area\n     */\n    onNotificationClick() {\n        if (this.config.behaviour.onClick === 'hide') {\n            this.onClickDismiss();\n        }\n    }\n    /**\n     * Start the auto hide timer (if enabled)\n     */\n    startAutoHideTimer() {\n        if (this.config.behaviour.autoHide !== false && this.config.behaviour.autoHide > 0) {\n            this.timerService.start(this.config.behaviour.autoHide).then(() => {\n                this.onClickDismiss();\n            });\n        }\n    }\n    /**\n     * Pause the auto hide timer (if enabled)\n     */\n    pauseAutoHideTimer() {\n        if (this.config.behaviour.autoHide !== false && this.config.behaviour.autoHide > 0) {\n            this.timerService.pause();\n        }\n    }\n    /**\n     * Continue the auto hide timer (if enabled)\n     */\n    continueAutoHideTimer() {\n        if (this.config.behaviour.autoHide !== false && this.config.behaviour.autoHide > 0) {\n            this.timerService.continue();\n        }\n    }\n    /**\n     * Stop the auto hide timer (if enabled)\n     */\n    stopAutoHideTimer() {\n        if (this.config.behaviour.autoHide !== false && this.config.behaviour.autoHide > 0) {\n            this.timerService.stop();\n        }\n    }\n    /**\n     * Initial notification setup\n     */\n    setup() {\n        // Set start position (initially the exact same for every new notification)\n        if (this.config.position.horizontal.position === 'left') {\n            this.renderer.setStyle(this.element, 'left', `${this.config.position.horizontal.distance}px`);\n        }\n        else if (this.config.position.horizontal.position === 'right') {\n            this.renderer.setStyle(this.element, 'right', `${this.config.position.horizontal.distance}px`);\n        }\n        else {\n            this.renderer.setStyle(this.element, 'left', '50%');\n            // Let's get the GPU handle some work as well (#perfmatters)\n            this.renderer.setStyle(this.element, 'transform', 'translate3d( -50%, 0, 0 )');\n        }\n        if (this.config.position.vertical.position === 'top') {\n            this.renderer.setStyle(this.element, 'top', `${this.config.position.vertical.distance}px`);\n        }\n        else {\n            this.renderer.setStyle(this.element, 'bottom', `${this.config.position.vertical.distance}px`);\n        }\n        // Add classes (responsible for visual design)\n        this.renderer.addClass(this.element, `notifier__notification--${this.notification.type}`);\n        this.renderer.addClass(this.element, `notifier__notification--${this.config.theme}`);\n    }\n}\nNotifierNotificationComponent.ɵfac = function NotifierNotificationComponent_Factory(t) { return new (t || NotifierNotificationComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(NotifierService), ɵngcc0.ɵɵdirectiveInject(NotifierTimerService), ɵngcc0.ɵɵdirectiveInject(NotifierAnimationService)); };\nNotifierNotificationComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: NotifierNotificationComponent, selectors: [[\"notifier-notification\"]], hostAttrs: [1, \"notifier__notification\"], hostBindings: function NotifierNotificationComponent_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function NotifierNotificationComponent_click_HostBindingHandler() { return ctx.onNotificationClick(); })(\"mouseout\", function NotifierNotificationComponent_mouseout_HostBindingHandler() { return ctx.onNotificationMouseout(); })(\"mouseover\", function NotifierNotificationComponent_mouseover_HostBindingHandler() { return ctx.onNotificationMouseover(); });\n    } }, inputs: { notification: \"notification\" }, outputs: { ready: \"ready\", dismiss: \"dismiss\" }, features: [ɵngcc0.ɵɵProvidersFeature([\n            // We provide the timer to the component's local injector, so that every notification components gets its own\n            // instance of the timer service, thus running their timers independently from each other\n            NotifierTimerService,\n        ])], decls: 3, vars: 2, consts: [[3, \"ngTemplateOutlet\", \"ngTemplateOutletContext\", 4, \"ngIf\", \"ngIfElse\"], [\"predefinedNotification\", \"\"], [3, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"], [1, \"notifier__notification-message\"], [\"class\", \"notifier__notification-button\", \"type\", \"button\", \"title\", \"dismiss\", 3, \"click\", 4, \"ngIf\"], [\"type\", \"button\", \"title\", \"dismiss\", 1, \"notifier__notification-button\", 3, \"click\"], [\"viewBox\", \"0 0 24 24\", \"width\", \"20\", \"height\", \"20\", 1, \"notifier__notification-button-icon\"], [\"d\", \"M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z\"]], template: function NotifierNotificationComponent_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵtemplate(0, NotifierNotificationComponent_ng_container_0_Template, 1, 4, \"ng-container\", 0);\n        ɵngcc0.ɵɵtemplate(1, NotifierNotificationComponent_ng_template_1_Template, 3, 2, \"ng-template\", null, 1, ɵngcc0.ɵɵtemplateRefExtractor);\n    } if (rf & 2) {\n        const _r1 = ɵngcc0.ɵɵreference(2);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.notification.template)(\"ngIfElse\", _r1);\n    } }, directives: [ɵngcc1.NgIf, ɵngcc1.NgTemplateOutlet], encapsulation: 2, changeDetection: 0 });\nNotifierNotificationComponent.ctorParameters = () => [\n    { type: ElementRef },\n    { type: Renderer2 },\n    { type: NotifierService },\n    { type: NotifierTimerService },\n    { type: NotifierAnimationService }\n];\nNotifierNotificationComponent.propDecorators = {\n    notification: [{ type: Input }],\n    ready: [{ type: Output }],\n    dismiss: [{ type: Output }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NotifierNotificationComponent, [{\n        type: Component,\n        args: [{\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                host: {\n                    '(click)': 'onNotificationClick()',\n                    '(mouseout)': 'onNotificationMouseout()',\n                    '(mouseover)': 'onNotificationMouseover()',\n                    class: 'notifier__notification'\n                },\n                providers: [\n                    // We provide the timer to the component's local injector, so that every notification components gets its own\n                    // instance of the timer service, thus running their timers independently from each other\n                    NotifierTimerService,\n                ],\n                selector: 'notifier-notification',\n                template: \"<ng-container\\n  *ngIf=\\\"notification.template; else predefinedNotification\\\"\\n  [ngTemplateOutlet]=\\\"notification.template\\\"\\n  [ngTemplateOutletContext]=\\\"{ notification: notification }\\\"\\n>\\n</ng-container>\\n\\n<ng-template #predefinedNotification>\\n  <p class=\\\"notifier__notification-message\\\">{{ notification.message }}</p>\\n  <button\\n    class=\\\"notifier__notification-button\\\"\\n    type=\\\"button\\\"\\n    title=\\\"dismiss\\\"\\n    *ngIf=\\\"config.behaviour.showDismissButton\\\"\\n    (click)=\\\"onClickDismiss()\\\"\\n  >\\n    <svg class=\\\"notifier__notification-button-icon\\\" viewBox=\\\"0 0 24 24\\\" width=\\\"20\\\" height=\\\"20\\\">\\n      <path d=\\\"M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z\\\" />\\n    </svg>\\n  </button>\\n</ng-template>\\n\"\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }, { type: NotifierService }, { type: NotifierTimerService }, { type: NotifierAnimationService }]; }, { ready: [{\n            type: Output\n        }], dismiss: [{\n            type: Output\n        }], notification: [{\n            type: Input\n        }] }); })();\n\n/**\n * Factory for a notifier configuration with custom options\n *\n * Sidenote:\n * Required as Angular AoT compilation cannot handle dynamic functions; see <https://github.com/angular/angular/issues/11262>.\n *\n * @param   options - Custom notifier options\n * @returns - Notifier configuration as result\n */\nfunction notifierCustomConfigFactory(options) {\n    return new NotifierConfig(options);\n}\n/**\n * Factory for a notifier configuration with default options\n *\n * Sidenote:\n * Required as Angular AoT compilation cannot handle dynamic functions; see <https://github.com/angular/angular/issues/11262>.\n *\n * @returns - Notifier configuration as result\n */\nfunction notifierDefaultConfigFactory() {\n    return new NotifierConfig({});\n}\n/**\n * Notifier module\n */\nclass NotifierModule {\n    /**\n     * Setup the notifier module with custom providers, in this case with a custom configuration based on the givne options\n     *\n     * @param   [options={}] - Custom notifier options\n     * @returns - Notifier module with custom providers\n     */\n    static withConfig(options = {}) {\n        return {\n            ngModule: NotifierModule,\n            providers: [\n                // Provide the options itself upfront (as we need to inject them as dependencies -- see below)\n                {\n                    provide: NotifierOptionsToken,\n                    useValue: options,\n                },\n                // Provide a custom notifier configuration, based on the given notifier options\n                {\n                    deps: [NotifierOptionsToken],\n                    provide: NotifierConfigToken,\n                    useFactory: notifierCustomConfigFactory,\n                },\n            ],\n        };\n    }\n}\nNotifierModule.ɵfac = function NotifierModule_Factory(t) { return new (t || NotifierModule)(); };\nNotifierModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: NotifierModule });\nNotifierModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [\n        NotifierAnimationService,\n        NotifierService,\n        NotifierQueueService,\n        // Provide the default notifier configuration if just the module is imported\n        {\n            provide: NotifierConfigToken,\n            useFactory: notifierDefaultConfigFactory\n        },\n    ], imports: [[CommonModule]] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NotifierModule, [{\n        type: NgModule,\n        args: [{\n                declarations: [NotifierContainerComponent, NotifierNotificationComponent],\n                exports: [NotifierContainerComponent],\n                imports: [CommonModule],\n                providers: [\n                    NotifierAnimationService,\n                    NotifierService,\n                    NotifierQueueService,\n                    // Provide the default notifier configuration if just the module is imported\n                    {\n                        provide: NotifierConfigToken,\n                        useFactory: notifierDefaultConfigFactory\n                    },\n                ]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NotifierModule, { declarations: function () { return [NotifierContainerComponent, NotifierNotificationComponent]; }, imports: function () { return [CommonModule]; }, exports: function () { return [NotifierContainerComponent]; } }); })();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { NotifierConfig, NotifierConfigToken, NotifierContainerComponent, NotifierModule, NotifierNotificationComponent, NotifierOptionsToken, NotifierService, notifierCustomConfigFactory, notifierDefaultConfigFactory, NotifierQueueService as ɵa, NotifierTimerService as ɵb, NotifierAnimationService as ɵc };\n\n//# sourceMappingURL=angular-notifier.js.map"]},"metadata":{},"sourceType":"module"}