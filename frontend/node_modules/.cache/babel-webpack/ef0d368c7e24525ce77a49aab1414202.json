{"ast":null,"code":"import _slicedToArray from \"C:/Users/Andrei/Desktop/licenta/Licenta2021/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _assertThisInitialized from \"C:/Users/Andrei/Desktop/licenta/Licenta2021/frontend/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _get from \"C:/Users/Andrei/Desktop/licenta/Licenta2021/frontend/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"C:/Users/Andrei/Desktop/licenta/Licenta2021/frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:/Users/Andrei/Desktop/licenta/Licenta2021/frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:/Users/Andrei/Desktop/licenta/Licenta2021/frontend/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"C:/Users/Andrei/Desktop/licenta/Licenta2021/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/Andrei/Desktop/licenta/Licenta2021/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { DOCUMENT } from '@angular/common';\nimport { ɵɵdefineInjectable, ɵɵinject, Injectable, Inject, QueryList, NgZone, Directive, ElementRef, Input, InjectionToken, Optional, EventEmitter, Output, NgModule } from '@angular/core';\nimport { Subject, Subscription, of } from 'rxjs';\nimport { hasModifierKey, A, Z, ZERO, NINE, END, HOME, LEFT_ARROW, RIGHT_ARROW, UP_ARROW, DOWN_ARROW, TAB } from '@angular/cdk/keycodes';\nimport { tap, debounceTime, filter, map, take } from 'rxjs/operators';\nimport { coerceBooleanProperty, coerceElement } from '@angular/cdk/coercion';\nimport { Platform, normalizePassiveListenerOptions, _getShadowRoot, PlatformModule } from '@angular/cdk/platform';\nimport { ContentObserver, ObserversModule } from '@angular/cdk/observers';\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n/** IDs are delimited by an empty space, as per the spec. */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nimport * as ɵngcc2 from '@angular/cdk/observers';\nvar ID_DELIMITER = ' ';\n/**\r\n * Adds the given ID to the specified ARIA attribute on an element.\r\n * Used for attributes such as aria-labelledby, aria-owns, etc.\r\n */\n\nfunction addAriaReferencedId(el, attr, id) {\n  var ids = getAriaReferenceIds(el, attr);\n\n  if (ids.some(function (existingId) {\n    return existingId.trim() == id.trim();\n  })) {\n    return;\n  }\n\n  ids.push(id.trim());\n  el.setAttribute(attr, ids.join(ID_DELIMITER));\n}\n/**\r\n * Removes the given ID from the specified ARIA attribute on an element.\r\n * Used for attributes such as aria-labelledby, aria-owns, etc.\r\n */\n\n\nfunction removeAriaReferencedId(el, attr, id) {\n  var ids = getAriaReferenceIds(el, attr);\n  var filteredIds = ids.filter(function (val) {\n    return val != id.trim();\n  });\n\n  if (filteredIds.length) {\n    el.setAttribute(attr, filteredIds.join(ID_DELIMITER));\n  } else {\n    el.removeAttribute(attr);\n  }\n}\n/**\r\n * Gets the list of IDs referenced by the given ARIA attribute on an element.\r\n * Used for attributes such as aria-labelledby, aria-owns, etc.\r\n */\n\n\nfunction getAriaReferenceIds(el, attr) {\n  // Get string array of all individual ids (whitespace delimited) in the attribute value\n  return (el.getAttribute(attr) || '').match(/\\S+/g) || [];\n}\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n/** ID used for the body container where all messages are appended. */\n\n\nvar MESSAGES_CONTAINER_ID = 'cdk-describedby-message-container';\n/** ID prefix used for each created message element. */\n\nvar CDK_DESCRIBEDBY_ID_PREFIX = 'cdk-describedby-message';\n/** Attribute given to each host element that is described by a message element. */\n\nvar CDK_DESCRIBEDBY_HOST_ATTRIBUTE = 'cdk-describedby-host';\n/** Global incremental identifier for each registered message element. */\n\nvar nextId = 0;\n/** Global map of all registered message elements that have been placed into the document. */\n\nvar messageRegistry = new Map();\n/** Container for all registered messages. */\n\nvar messagesContainer = null;\n/**\r\n * Utility that creates visually hidden elements with a message content. Useful for elements that\r\n * want to use aria-describedby to further describe themselves without adding additional visual\r\n * content.\r\n */\n\nvar AriaDescriber = /*#__PURE__*/function () {\n  function AriaDescriber(_document) {\n    _classCallCheck(this, AriaDescriber);\n\n    this._document = _document;\n  }\n\n  _createClass(AriaDescriber, [{\n    key: \"describe\",\n    value: function describe(hostElement, message, role) {\n      if (!this._canBeDescribed(hostElement, message)) {\n        return;\n      }\n\n      var key = getKey(message, role);\n\n      if (typeof message !== 'string') {\n        // We need to ensure that the element has an ID.\n        setMessageId(message);\n        messageRegistry.set(key, {\n          messageElement: message,\n          referenceCount: 0\n        });\n      } else if (!messageRegistry.has(key)) {\n        this._createMessageElement(message, role);\n      }\n\n      if (!this._isElementDescribedByMessage(hostElement, key)) {\n        this._addMessageReference(hostElement, key);\n      }\n    }\n  }, {\n    key: \"removeDescription\",\n    value: function removeDescription(hostElement, message, role) {\n      if (!message || !this._isElementNode(hostElement)) {\n        return;\n      }\n\n      var key = getKey(message, role);\n\n      if (this._isElementDescribedByMessage(hostElement, key)) {\n        this._removeMessageReference(hostElement, key);\n      } // If the message is a string, it means that it's one that we created for the\n      // consumer so we can remove it safely, otherwise we should leave it in place.\n\n\n      if (typeof message === 'string') {\n        var registeredMessage = messageRegistry.get(key);\n\n        if (registeredMessage && registeredMessage.referenceCount === 0) {\n          this._deleteMessageElement(key);\n        }\n      }\n\n      if (messagesContainer && messagesContainer.childNodes.length === 0) {\n        this._deleteMessagesContainer();\n      }\n    }\n    /** Unregisters all created message elements and removes the message container. */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      var describedElements = this._document.querySelectorAll(\"[\".concat(CDK_DESCRIBEDBY_HOST_ATTRIBUTE, \"]\"));\n\n      for (var i = 0; i < describedElements.length; i++) {\n        this._removeCdkDescribedByReferenceIds(describedElements[i]);\n\n        describedElements[i].removeAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE);\n      }\n\n      if (messagesContainer) {\n        this._deleteMessagesContainer();\n      }\n\n      messageRegistry.clear();\n    }\n    /**\r\n     * Creates a new element in the visually hidden message container element with the message\r\n     * as its content and adds it to the message registry.\r\n     */\n\n  }, {\n    key: \"_createMessageElement\",\n    value: function _createMessageElement(message, role) {\n      var messageElement = this._document.createElement('div');\n\n      setMessageId(messageElement);\n      messageElement.textContent = message;\n\n      if (role) {\n        messageElement.setAttribute('role', role);\n      }\n\n      this._createMessagesContainer();\n\n      messagesContainer.appendChild(messageElement);\n      messageRegistry.set(getKey(message, role), {\n        messageElement: messageElement,\n        referenceCount: 0\n      });\n    }\n    /** Deletes the message element from the global messages container. */\n\n  }, {\n    key: \"_deleteMessageElement\",\n    value: function _deleteMessageElement(key) {\n      var registeredMessage = messageRegistry.get(key);\n      var messageElement = registeredMessage && registeredMessage.messageElement;\n\n      if (messagesContainer && messageElement) {\n        messagesContainer.removeChild(messageElement);\n      }\n\n      messageRegistry.delete(key);\n    }\n    /** Creates the global container for all aria-describedby messages. */\n\n  }, {\n    key: \"_createMessagesContainer\",\n    value: function _createMessagesContainer() {\n      if (!messagesContainer) {\n        var preExistingContainer = this._document.getElementById(MESSAGES_CONTAINER_ID); // When going from the server to the client, we may end up in a situation where there's\n        // already a container on the page, but we don't have a reference to it. Clear the\n        // old container so we don't get duplicates. Doing this, instead of emptying the previous\n        // container, should be slightly faster.\n\n\n        if (preExistingContainer && preExistingContainer.parentNode) {\n          preExistingContainer.parentNode.removeChild(preExistingContainer);\n        }\n\n        messagesContainer = this._document.createElement('div');\n        messagesContainer.id = MESSAGES_CONTAINER_ID; // We add `visibility: hidden` in order to prevent text in this container from\n        // being searchable by the browser's Ctrl + F functionality.\n        // Screen-readers will still read the description for elements with aria-describedby even\n        // when the description element is not visible.\n\n        messagesContainer.style.visibility = 'hidden'; // Even though we use `visibility: hidden`, we still apply `cdk-visually-hidden` so that\n        // the description element doesn't impact page layout.\n\n        messagesContainer.classList.add('cdk-visually-hidden');\n\n        this._document.body.appendChild(messagesContainer);\n      }\n    }\n    /** Deletes the global messages container. */\n\n  }, {\n    key: \"_deleteMessagesContainer\",\n    value: function _deleteMessagesContainer() {\n      if (messagesContainer && messagesContainer.parentNode) {\n        messagesContainer.parentNode.removeChild(messagesContainer);\n        messagesContainer = null;\n      }\n    }\n    /** Removes all cdk-describedby messages that are hosted through the element. */\n\n  }, {\n    key: \"_removeCdkDescribedByReferenceIds\",\n    value: function _removeCdkDescribedByReferenceIds(element) {\n      // Remove all aria-describedby reference IDs that are prefixed by CDK_DESCRIBEDBY_ID_PREFIX\n      var originalReferenceIds = getAriaReferenceIds(element, 'aria-describedby').filter(function (id) {\n        return id.indexOf(CDK_DESCRIBEDBY_ID_PREFIX) != 0;\n      });\n      element.setAttribute('aria-describedby', originalReferenceIds.join(' '));\n    }\n    /**\r\n     * Adds a message reference to the element using aria-describedby and increments the registered\r\n     * message's reference count.\r\n     */\n\n  }, {\n    key: \"_addMessageReference\",\n    value: function _addMessageReference(element, key) {\n      var registeredMessage = messageRegistry.get(key); // Add the aria-describedby reference and set the\n      // describedby_host attribute to mark the element.\n\n      addAriaReferencedId(element, 'aria-describedby', registeredMessage.messageElement.id);\n      element.setAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE, '');\n      registeredMessage.referenceCount++;\n    }\n    /**\r\n     * Removes a message reference from the element using aria-describedby\r\n     * and decrements the registered message's reference count.\r\n     */\n\n  }, {\n    key: \"_removeMessageReference\",\n    value: function _removeMessageReference(element, key) {\n      var registeredMessage = messageRegistry.get(key);\n      registeredMessage.referenceCount--;\n      removeAriaReferencedId(element, 'aria-describedby', registeredMessage.messageElement.id);\n      element.removeAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE);\n    }\n    /** Returns true if the element has been described by the provided message ID. */\n\n  }, {\n    key: \"_isElementDescribedByMessage\",\n    value: function _isElementDescribedByMessage(element, key) {\n      var referenceIds = getAriaReferenceIds(element, 'aria-describedby');\n      var registeredMessage = messageRegistry.get(key);\n      var messageId = registeredMessage && registeredMessage.messageElement.id;\n      return !!messageId && referenceIds.indexOf(messageId) != -1;\n    }\n    /** Determines whether a message can be described on a particular element. */\n\n  }, {\n    key: \"_canBeDescribed\",\n    value: function _canBeDescribed(element, message) {\n      if (!this._isElementNode(element)) {\n        return false;\n      }\n\n      if (message && typeof message === 'object') {\n        // We'd have to make some assumptions about the description element's text, if the consumer\n        // passed in an element. Assume that if an element is passed in, the consumer has verified\n        // that it can be used as a description.\n        return true;\n      }\n\n      var trimmedMessage = message == null ? '' : \"\".concat(message).trim();\n      var ariaLabel = element.getAttribute('aria-label'); // We shouldn't set descriptions if they're exactly the same as the `aria-label` of the\n      // element, because screen readers will end up reading out the same text twice in a row.\n\n      return trimmedMessage ? !ariaLabel || ariaLabel.trim() !== trimmedMessage : false;\n    }\n    /** Checks whether a node is an Element node. */\n\n  }, {\n    key: \"_isElementNode\",\n    value: function _isElementNode(element) {\n      return element.nodeType === this._document.ELEMENT_NODE;\n    }\n  }]);\n\n  return AriaDescriber;\n}();\n\nAriaDescriber.ɵfac = function AriaDescriber_Factory(t) {\n  return new (t || AriaDescriber)(ɵngcc0.ɵɵinject(DOCUMENT));\n};\n\nAriaDescriber.ɵprov = ɵɵdefineInjectable({\n  factory: function AriaDescriber_Factory() {\n    return new AriaDescriber(ɵɵinject(DOCUMENT));\n  },\n  token: AriaDescriber,\n  providedIn: \"root\"\n});\n\nAriaDescriber.ctorParameters = function () {\n  return [{\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [DOCUMENT]\n    }]\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(AriaDescriber, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, null);\n})();\n/** Gets a key that can be used to look messages up in the registry. */\n\n\nfunction getKey(message, role) {\n  return typeof message === 'string' ? \"\".concat(role || '', \"/\").concat(message) : message;\n}\n/** Assigns a unique ID to an element, if it doesn't have one already. */\n\n\nfunction setMessageId(element) {\n  if (!element.id) {\n    element.id = \"\".concat(CDK_DESCRIBEDBY_ID_PREFIX, \"-\").concat(nextId++);\n  }\n}\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n/**\r\n * This class manages keyboard events for selectable lists. If you pass it a query list\r\n * of items, it will set the active item correctly when arrow events occur.\r\n */\n\n\nvar ListKeyManager = /*#__PURE__*/function () {\n  function ListKeyManager(_items) {\n    var _this = this;\n\n    _classCallCheck(this, ListKeyManager);\n\n    this._items = _items;\n    this._activeItemIndex = -1;\n    this._activeItem = null;\n    this._wrap = false;\n    this._letterKeyStream = new Subject();\n    this._typeaheadSubscription = Subscription.EMPTY;\n    this._vertical = true;\n    this._allowedModifierKeys = [];\n    this._homeAndEnd = false;\n    /**\r\n     * Predicate function that can be used to check whether an item should be skipped\r\n     * by the key manager. By default, disabled items are skipped.\r\n     */\n\n    this._skipPredicateFn = function (item) {\n      return item.disabled;\n    }; // Buffer for the letters that the user has pressed when the typeahead option is turned on.\n\n\n    this._pressedLetters = [];\n    /**\r\n     * Stream that emits any time the TAB key is pressed, so components can react\r\n     * when focus is shifted off of the list.\r\n     */\n\n    this.tabOut = new Subject();\n    /** Stream that emits whenever the active item of the list manager changes. */\n\n    this.change = new Subject(); // We allow for the items to be an array because, in some cases, the consumer may\n    // not have access to a QueryList of the items they want to manage (e.g. when the\n    // items aren't being collected via `ViewChildren` or `ContentChildren`).\n\n    if (_items instanceof QueryList) {\n      _items.changes.subscribe(function (newItems) {\n        if (_this._activeItem) {\n          var itemArray = newItems.toArray();\n          var newIndex = itemArray.indexOf(_this._activeItem);\n\n          if (newIndex > -1 && newIndex !== _this._activeItemIndex) {\n            _this._activeItemIndex = newIndex;\n          }\n        }\n      });\n    }\n  }\n  /**\r\n   * Sets the predicate function that determines which items should be skipped by the\r\n   * list key manager.\r\n   * @param predicate Function that determines whether the given item should be skipped.\r\n   */\n\n\n  _createClass(ListKeyManager, [{\n    key: \"skipPredicate\",\n    value: function skipPredicate(predicate) {\n      this._skipPredicateFn = predicate;\n      return this;\n    }\n    /**\r\n     * Configures wrapping mode, which determines whether the active item will wrap to\r\n     * the other end of list when there are no more items in the given direction.\r\n     * @param shouldWrap Whether the list should wrap when reaching the end.\r\n     */\n\n  }, {\n    key: \"withWrap\",\n    value: function withWrap() {\n      var shouldWrap = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      this._wrap = shouldWrap;\n      return this;\n    }\n    /**\r\n     * Configures whether the key manager should be able to move the selection vertically.\r\n     * @param enabled Whether vertical selection should be enabled.\r\n     */\n\n  }, {\n    key: \"withVerticalOrientation\",\n    value: function withVerticalOrientation() {\n      var enabled = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      this._vertical = enabled;\n      return this;\n    }\n    /**\r\n     * Configures the key manager to move the selection horizontally.\r\n     * Passing in `null` will disable horizontal movement.\r\n     * @param direction Direction in which the selection can be moved.\r\n     */\n\n  }, {\n    key: \"withHorizontalOrientation\",\n    value: function withHorizontalOrientation(direction) {\n      this._horizontal = direction;\n      return this;\n    }\n    /**\r\n     * Modifier keys which are allowed to be held down and whose default actions will be prevented\r\n     * as the user is pressing the arrow keys. Defaults to not allowing any modifier keys.\r\n     */\n\n  }, {\n    key: \"withAllowedModifierKeys\",\n    value: function withAllowedModifierKeys(keys) {\n      this._allowedModifierKeys = keys;\n      return this;\n    }\n    /**\r\n     * Turns on typeahead mode which allows users to set the active item by typing.\r\n     * @param debounceInterval Time to wait after the last keystroke before setting the active item.\r\n     */\n\n  }, {\n    key: \"withTypeAhead\",\n    value: function withTypeAhead() {\n      var _this2 = this;\n\n      var debounceInterval = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 200;\n\n      if ((typeof ngDevMode === 'undefined' || ngDevMode) && this._items.length && this._items.some(function (item) {\n        return typeof item.getLabel !== 'function';\n      })) {\n        throw Error('ListKeyManager items in typeahead mode must implement the `getLabel` method.');\n      }\n\n      this._typeaheadSubscription.unsubscribe(); // Debounce the presses of non-navigational keys, collect the ones that correspond to letters\n      // and convert those letters back into a string. Afterwards find the first item that starts\n      // with that string and select it.\n\n\n      this._typeaheadSubscription = this._letterKeyStream.pipe(tap(function (letter) {\n        return _this2._pressedLetters.push(letter);\n      }), debounceTime(debounceInterval), filter(function () {\n        return _this2._pressedLetters.length > 0;\n      }), map(function () {\n        return _this2._pressedLetters.join('');\n      })).subscribe(function (inputString) {\n        var items = _this2._getItemsArray(); // Start at 1 because we want to start searching at the item immediately\n        // following the current active item.\n\n\n        for (var i = 1; i < items.length + 1; i++) {\n          var index = (_this2._activeItemIndex + i) % items.length;\n          var item = items[index];\n\n          if (!_this2._skipPredicateFn(item) && item.getLabel().toUpperCase().trim().indexOf(inputString) === 0) {\n            _this2.setActiveItem(index);\n\n            break;\n          }\n        }\n\n        _this2._pressedLetters = [];\n      });\n      return this;\n    }\n    /**\r\n     * Configures the key manager to activate the first and last items\r\n     * respectively when the Home or End key is pressed.\r\n     * @param enabled Whether pressing the Home or End key activates the first/last item.\r\n     */\n\n  }, {\n    key: \"withHomeAndEnd\",\n    value: function withHomeAndEnd() {\n      var enabled = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      this._homeAndEnd = enabled;\n      return this;\n    }\n  }, {\n    key: \"setActiveItem\",\n    value: function setActiveItem(item) {\n      var previousActiveItem = this._activeItem;\n      this.updateActiveItem(item);\n\n      if (this._activeItem !== previousActiveItem) {\n        this.change.next(this._activeItemIndex);\n      }\n    }\n    /**\r\n     * Sets the active item depending on the key event passed in.\r\n     * @param event Keyboard event to be used for determining which element should be active.\r\n     */\n\n  }, {\n    key: \"onKeydown\",\n    value: function onKeydown(event) {\n      var _this3 = this;\n\n      var keyCode = event.keyCode;\n      var modifiers = ['altKey', 'ctrlKey', 'metaKey', 'shiftKey'];\n      var isModifierAllowed = modifiers.every(function (modifier) {\n        return !event[modifier] || _this3._allowedModifierKeys.indexOf(modifier) > -1;\n      });\n\n      switch (keyCode) {\n        case TAB:\n          this.tabOut.next();\n          return;\n\n        case DOWN_ARROW:\n          if (this._vertical && isModifierAllowed) {\n            this.setNextItemActive();\n            break;\n          } else {\n            return;\n          }\n\n        case UP_ARROW:\n          if (this._vertical && isModifierAllowed) {\n            this.setPreviousItemActive();\n            break;\n          } else {\n            return;\n          }\n\n        case RIGHT_ARROW:\n          if (this._horizontal && isModifierAllowed) {\n            this._horizontal === 'rtl' ? this.setPreviousItemActive() : this.setNextItemActive();\n            break;\n          } else {\n            return;\n          }\n\n        case LEFT_ARROW:\n          if (this._horizontal && isModifierAllowed) {\n            this._horizontal === 'rtl' ? this.setNextItemActive() : this.setPreviousItemActive();\n            break;\n          } else {\n            return;\n          }\n\n        case HOME:\n          if (this._homeAndEnd && isModifierAllowed) {\n            this.setFirstItemActive();\n            break;\n          } else {\n            return;\n          }\n\n        case END:\n          if (this._homeAndEnd && isModifierAllowed) {\n            this.setLastItemActive();\n            break;\n          } else {\n            return;\n          }\n\n        default:\n          if (isModifierAllowed || hasModifierKey(event, 'shiftKey')) {\n            // Attempt to use the `event.key` which also maps it to the user's keyboard language,\n            // otherwise fall back to resolving alphanumeric characters via the keyCode.\n            if (event.key && event.key.length === 1) {\n              this._letterKeyStream.next(event.key.toLocaleUpperCase());\n            } else if (keyCode >= A && keyCode <= Z || keyCode >= ZERO && keyCode <= NINE) {\n              this._letterKeyStream.next(String.fromCharCode(keyCode));\n            }\n          } // Note that we return here, in order to avoid preventing\n          // the default action of non-navigational keys.\n\n\n          return;\n      }\n\n      this._pressedLetters = [];\n      event.preventDefault();\n    }\n    /** Index of the currently active item. */\n\n  }, {\n    key: \"activeItemIndex\",\n    get: function get() {\n      return this._activeItemIndex;\n    }\n    /** The active item. */\n\n  }, {\n    key: \"activeItem\",\n    get: function get() {\n      return this._activeItem;\n    }\n    /** Gets whether the user is currently typing into the manager using the typeahead feature. */\n\n  }, {\n    key: \"isTyping\",\n    value: function isTyping() {\n      return this._pressedLetters.length > 0;\n    }\n    /** Sets the active item to the first enabled item in the list. */\n\n  }, {\n    key: \"setFirstItemActive\",\n    value: function setFirstItemActive() {\n      this._setActiveItemByIndex(0, 1);\n    }\n    /** Sets the active item to the last enabled item in the list. */\n\n  }, {\n    key: \"setLastItemActive\",\n    value: function setLastItemActive() {\n      this._setActiveItemByIndex(this._items.length - 1, -1);\n    }\n    /** Sets the active item to the next enabled item in the list. */\n\n  }, {\n    key: \"setNextItemActive\",\n    value: function setNextItemActive() {\n      this._activeItemIndex < 0 ? this.setFirstItemActive() : this._setActiveItemByDelta(1);\n    }\n    /** Sets the active item to a previous enabled item in the list. */\n\n  }, {\n    key: \"setPreviousItemActive\",\n    value: function setPreviousItemActive() {\n      this._activeItemIndex < 0 && this._wrap ? this.setLastItemActive() : this._setActiveItemByDelta(-1);\n    }\n  }, {\n    key: \"updateActiveItem\",\n    value: function updateActiveItem(item) {\n      var itemArray = this._getItemsArray();\n\n      var index = typeof item === 'number' ? item : itemArray.indexOf(item);\n      var activeItem = itemArray[index]; // Explicitly check for `null` and `undefined` because other falsy values are valid.\n\n      this._activeItem = activeItem == null ? null : activeItem;\n      this._activeItemIndex = index;\n    }\n    /**\r\n     * This method sets the active item, given a list of items and the delta between the\r\n     * currently active item and the new active item. It will calculate differently\r\n     * depending on whether wrap mode is turned on.\r\n     */\n\n  }, {\n    key: \"_setActiveItemByDelta\",\n    value: function _setActiveItemByDelta(delta) {\n      this._wrap ? this._setActiveInWrapMode(delta) : this._setActiveInDefaultMode(delta);\n    }\n    /**\r\n     * Sets the active item properly given \"wrap\" mode. In other words, it will continue to move\r\n     * down the list until it finds an item that is not disabled, and it will wrap if it\r\n     * encounters either end of the list.\r\n     */\n\n  }, {\n    key: \"_setActiveInWrapMode\",\n    value: function _setActiveInWrapMode(delta) {\n      var items = this._getItemsArray();\n\n      for (var i = 1; i <= items.length; i++) {\n        var index = (this._activeItemIndex + delta * i + items.length) % items.length;\n        var item = items[index];\n\n        if (!this._skipPredicateFn(item)) {\n          this.setActiveItem(index);\n          return;\n        }\n      }\n    }\n    /**\r\n     * Sets the active item properly given the default mode. In other words, it will\r\n     * continue to move down the list until it finds an item that is not disabled. If\r\n     * it encounters either end of the list, it will stop and not wrap.\r\n     */\n\n  }, {\n    key: \"_setActiveInDefaultMode\",\n    value: function _setActiveInDefaultMode(delta) {\n      this._setActiveItemByIndex(this._activeItemIndex + delta, delta);\n    }\n    /**\r\n     * Sets the active item to the first enabled item starting at the index specified. If the\r\n     * item is disabled, it will move in the fallbackDelta direction until it either\r\n     * finds an enabled item or encounters the end of the list.\r\n     */\n\n  }, {\n    key: \"_setActiveItemByIndex\",\n    value: function _setActiveItemByIndex(index, fallbackDelta) {\n      var items = this._getItemsArray();\n\n      if (!items[index]) {\n        return;\n      }\n\n      while (this._skipPredicateFn(items[index])) {\n        index += fallbackDelta;\n\n        if (!items[index]) {\n          return;\n        }\n      }\n\n      this.setActiveItem(index);\n    }\n    /** Returns the items as an array. */\n\n  }, {\n    key: \"_getItemsArray\",\n    value: function _getItemsArray() {\n      return this._items instanceof QueryList ? this._items.toArray() : this._items;\n    }\n  }]);\n\n  return ListKeyManager;\n}();\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n\nvar ActiveDescendantKeyManager = /*#__PURE__*/function (_ListKeyManager) {\n  _inherits(ActiveDescendantKeyManager, _ListKeyManager);\n\n  var _super = _createSuper(ActiveDescendantKeyManager);\n\n  function ActiveDescendantKeyManager() {\n    _classCallCheck(this, ActiveDescendantKeyManager);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(ActiveDescendantKeyManager, [{\n    key: \"setActiveItem\",\n    value: function setActiveItem(index) {\n      if (this.activeItem) {\n        this.activeItem.setInactiveStyles();\n      }\n\n      _get(_getPrototypeOf(ActiveDescendantKeyManager.prototype), \"setActiveItem\", this).call(this, index);\n\n      if (this.activeItem) {\n        this.activeItem.setActiveStyles();\n      }\n    }\n  }]);\n\n  return ActiveDescendantKeyManager;\n}(ListKeyManager);\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n\nvar FocusKeyManager = /*#__PURE__*/function (_ListKeyManager2) {\n  _inherits(FocusKeyManager, _ListKeyManager2);\n\n  var _super2 = _createSuper(FocusKeyManager);\n\n  function FocusKeyManager() {\n    var _this4;\n\n    _classCallCheck(this, FocusKeyManager);\n\n    _this4 = _super2.apply(this, arguments);\n    _this4._origin = 'program';\n    return _this4;\n  }\n  /**\r\n   * Sets the focus origin that will be passed in to the items for any subsequent `focus` calls.\r\n   * @param origin Focus origin to be used when focusing items.\r\n   */\n\n\n  _createClass(FocusKeyManager, [{\n    key: \"setFocusOrigin\",\n    value: function setFocusOrigin(origin) {\n      this._origin = origin;\n      return this;\n    }\n  }, {\n    key: \"setActiveItem\",\n    value: function setActiveItem(item) {\n      _get(_getPrototypeOf(FocusKeyManager.prototype), \"setActiveItem\", this).call(this, item);\n\n      if (this.activeItem) {\n        this.activeItem.focus(this._origin);\n      }\n    }\n  }]);\n\n  return FocusKeyManager;\n}(ListKeyManager);\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n/**\r\n * Configuration for the isFocusable method.\r\n */\n\n\nvar IsFocusableConfig = function IsFocusableConfig() {\n  _classCallCheck(this, IsFocusableConfig);\n\n  /**\r\n   * Whether to count an element as focusable even if it is not currently visible.\r\n   */\n  this.ignoreVisibility = false;\n}; // The InteractivityChecker leans heavily on the ally.js accessibility utilities.\n// Methods like `isTabbable` are only covering specific edge-cases for the browsers which are\n// supported.\n\n/**\r\n * Utility for checking the interactivity of an element, such as whether is is focusable or\r\n * tabbable.\r\n */\n\n\nvar InteractivityChecker = /*#__PURE__*/function () {\n  function InteractivityChecker(_platform) {\n    _classCallCheck(this, InteractivityChecker);\n\n    this._platform = _platform;\n  }\n  /**\r\n   * Gets whether an element is disabled.\r\n   *\r\n   * @param element Element to be checked.\r\n   * @returns Whether the element is disabled.\r\n   */\n\n\n  _createClass(InteractivityChecker, [{\n    key: \"isDisabled\",\n    value: function isDisabled(element) {\n      // This does not capture some cases, such as a non-form control with a disabled attribute or\n      // a form control inside of a disabled form, but should capture the most common cases.\n      return element.hasAttribute('disabled');\n    }\n    /**\r\n     * Gets whether an element is visible for the purposes of interactivity.\r\n     *\r\n     * This will capture states like `display: none` and `visibility: hidden`, but not things like\r\n     * being clipped by an `overflow: hidden` parent or being outside the viewport.\r\n     *\r\n     * @returns Whether the element is visible.\r\n     */\n\n  }, {\n    key: \"isVisible\",\n    value: function isVisible(element) {\n      return hasGeometry(element) && getComputedStyle(element).visibility === 'visible';\n    }\n    /**\r\n     * Gets whether an element can be reached via Tab key.\r\n     * Assumes that the element has already been checked with isFocusable.\r\n     *\r\n     * @param element Element to be checked.\r\n     * @returns Whether the element is tabbable.\r\n     */\n\n  }, {\n    key: \"isTabbable\",\n    value: function isTabbable(element) {\n      // Nothing is tabbable on the server 😎\n      if (!this._platform.isBrowser) {\n        return false;\n      }\n\n      var frameElement = getFrameElement(getWindow(element));\n\n      if (frameElement) {\n        // Frame elements inherit their tabindex onto all child elements.\n        if (getTabIndexValue(frameElement) === -1) {\n          return false;\n        } // Browsers disable tabbing to an element inside of an invisible frame.\n\n\n        if (!this.isVisible(frameElement)) {\n          return false;\n        }\n      }\n\n      var nodeName = element.nodeName.toLowerCase();\n      var tabIndexValue = getTabIndexValue(element);\n\n      if (element.hasAttribute('contenteditable')) {\n        return tabIndexValue !== -1;\n      }\n\n      if (nodeName === 'iframe' || nodeName === 'object') {\n        // The frame or object's content may be tabbable depending on the content, but it's\n        // not possibly to reliably detect the content of the frames. We always consider such\n        // elements as non-tabbable.\n        return false;\n      } // In iOS, the browser only considers some specific elements as tabbable.\n\n\n      if (this._platform.WEBKIT && this._platform.IOS && !isPotentiallyTabbableIOS(element)) {\n        return false;\n      }\n\n      if (nodeName === 'audio') {\n        // Audio elements without controls enabled are never tabbable, regardless\n        // of the tabindex attribute explicitly being set.\n        if (!element.hasAttribute('controls')) {\n          return false;\n        } // Audio elements with controls are by default tabbable unless the\n        // tabindex attribute is set to `-1` explicitly.\n\n\n        return tabIndexValue !== -1;\n      }\n\n      if (nodeName === 'video') {\n        // For all video elements, if the tabindex attribute is set to `-1`, the video\n        // is not tabbable. Note: We cannot rely on the default `HTMLElement.tabIndex`\n        // property as that one is set to `-1` in Chrome, Edge and Safari v13.1. The\n        // tabindex attribute is the source of truth here.\n        if (tabIndexValue === -1) {\n          return false;\n        } // If the tabindex is explicitly set, and not `-1` (as per check before), the\n        // video element is always tabbable (regardless of whether it has controls or not).\n\n\n        if (tabIndexValue !== null) {\n          return true;\n        } // Otherwise (when no explicit tabindex is set), a video is only tabbable if it\n        // has controls enabled. Firefox is special as videos are always tabbable regardless\n        // of whether there are controls or not.\n\n\n        return this._platform.FIREFOX || element.hasAttribute('controls');\n      }\n\n      return element.tabIndex >= 0;\n    }\n    /**\r\n     * Gets whether an element can be focused by the user.\r\n     *\r\n     * @param element Element to be checked.\r\n     * @param config The config object with options to customize this method's behavior\r\n     * @returns Whether the element is focusable.\r\n     */\n\n  }, {\n    key: \"isFocusable\",\n    value: function isFocusable(element, config) {\n      // Perform checks in order of left to most expensive.\n      // Again, naive approach that does not capture many edge cases and browser quirks.\n      return isPotentiallyFocusable(element) && !this.isDisabled(element) && ((config === null || config === void 0 ? void 0 : config.ignoreVisibility) || this.isVisible(element));\n    }\n  }]);\n\n  return InteractivityChecker;\n}();\n\nInteractivityChecker.ɵfac = function InteractivityChecker_Factory(t) {\n  return new (t || InteractivityChecker)(ɵngcc0.ɵɵinject(ɵngcc1.Platform));\n};\n\nInteractivityChecker.ɵprov = ɵɵdefineInjectable({\n  factory: function InteractivityChecker_Factory() {\n    return new InteractivityChecker(ɵɵinject(Platform));\n  },\n  token: InteractivityChecker,\n  providedIn: \"root\"\n});\n\nInteractivityChecker.ctorParameters = function () {\n  return [{\n    type: Platform\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(InteractivityChecker, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc1.Platform\n    }];\n  }, null);\n})();\n/**\r\n * Returns the frame element from a window object. Since browsers like MS Edge throw errors if\r\n * the frameElement property is being accessed from a different host address, this property\r\n * should be accessed carefully.\r\n */\n\n\nfunction getFrameElement(window) {\n  try {\n    return window.frameElement;\n  } catch (_a) {\n    return null;\n  }\n}\n/** Checks whether the specified element has any geometry / rectangles. */\n\n\nfunction hasGeometry(element) {\n  // Use logic from jQuery to check for an invisible element.\n  // See https://github.com/jquery/jquery/blob/master/src/css/hiddenVisibleSelectors.js#L12\n  return !!(element.offsetWidth || element.offsetHeight || typeof element.getClientRects === 'function' && element.getClientRects().length);\n}\n/** Gets whether an element's  */\n\n\nfunction isNativeFormElement(element) {\n  var nodeName = element.nodeName.toLowerCase();\n  return nodeName === 'input' || nodeName === 'select' || nodeName === 'button' || nodeName === 'textarea';\n}\n/** Gets whether an element is an `<input type=\"hidden\">`. */\n\n\nfunction isHiddenInput(element) {\n  return isInputElement(element) && element.type == 'hidden';\n}\n/** Gets whether an element is an anchor that has an href attribute. */\n\n\nfunction isAnchorWithHref(element) {\n  return isAnchorElement(element) && element.hasAttribute('href');\n}\n/** Gets whether an element is an input element. */\n\n\nfunction isInputElement(element) {\n  return element.nodeName.toLowerCase() == 'input';\n}\n/** Gets whether an element is an anchor element. */\n\n\nfunction isAnchorElement(element) {\n  return element.nodeName.toLowerCase() == 'a';\n}\n/** Gets whether an element has a valid tabindex. */\n\n\nfunction hasValidTabIndex(element) {\n  if (!element.hasAttribute('tabindex') || element.tabIndex === undefined) {\n    return false;\n  }\n\n  var tabIndex = element.getAttribute('tabindex'); // IE11 parses tabindex=\"\" as the value \"-32768\"\n\n  if (tabIndex == '-32768') {\n    return false;\n  }\n\n  return !!(tabIndex && !isNaN(parseInt(tabIndex, 10)));\n}\n/**\r\n * Returns the parsed tabindex from the element attributes instead of returning the\r\n * evaluated tabindex from the browsers defaults.\r\n */\n\n\nfunction getTabIndexValue(element) {\n  if (!hasValidTabIndex(element)) {\n    return null;\n  } // See browser issue in Gecko https://bugzilla.mozilla.org/show_bug.cgi?id=1128054\n\n\n  var tabIndex = parseInt(element.getAttribute('tabindex') || '', 10);\n  return isNaN(tabIndex) ? -1 : tabIndex;\n}\n/** Checks whether the specified element is potentially tabbable on iOS */\n\n\nfunction isPotentiallyTabbableIOS(element) {\n  var nodeName = element.nodeName.toLowerCase();\n  var inputType = nodeName === 'input' && element.type;\n  return inputType === 'text' || inputType === 'password' || nodeName === 'select' || nodeName === 'textarea';\n}\n/**\r\n * Gets whether an element is potentially focusable without taking current visible/disabled state\r\n * into account.\r\n */\n\n\nfunction isPotentiallyFocusable(element) {\n  // Inputs are potentially focusable *unless* they're type=\"hidden\".\n  if (isHiddenInput(element)) {\n    return false;\n  }\n\n  return isNativeFormElement(element) || isAnchorWithHref(element) || element.hasAttribute('contenteditable') || hasValidTabIndex(element);\n}\n/** Gets the parent window of a DOM node with regards of being inside of an iframe. */\n\n\nfunction getWindow(node) {\n  // ownerDocument is null if `node` itself *is* a document.\n  return node.ownerDocument && node.ownerDocument.defaultView || window;\n}\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n/**\r\n * Class that allows for trapping focus within a DOM element.\r\n *\r\n * This class currently uses a relatively simple approach to focus trapping.\r\n * It assumes that the tab order is the same as DOM order, which is not necessarily true.\r\n * Things like `tabIndex > 0`, flex `order`, and shadow roots can cause the two to be misaligned.\r\n *\r\n * @deprecated Use `ConfigurableFocusTrap` instead.\r\n * @breaking-change 11.0.0\r\n */\n\n\nvar FocusTrap = /*#__PURE__*/function () {\n  function FocusTrap(_element, _checker, _ngZone, _document) {\n    var _this5 = this;\n\n    var deferAnchors = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n\n    _classCallCheck(this, FocusTrap);\n\n    this._element = _element;\n    this._checker = _checker;\n    this._ngZone = _ngZone;\n    this._document = _document;\n    this._hasAttached = false; // Event listeners for the anchors. Need to be regular functions so that we can unbind them later.\n\n    this.startAnchorListener = function () {\n      return _this5.focusLastTabbableElement();\n    };\n\n    this.endAnchorListener = function () {\n      return _this5.focusFirstTabbableElement();\n    };\n\n    this._enabled = true;\n\n    if (!deferAnchors) {\n      this.attachAnchors();\n    }\n  }\n  /** Whether the focus trap is active. */\n\n\n  _createClass(FocusTrap, [{\n    key: \"enabled\",\n    get: function get() {\n      return this._enabled;\n    },\n    set: function set(value) {\n      this._enabled = value;\n\n      if (this._startAnchor && this._endAnchor) {\n        this._toggleAnchorTabIndex(value, this._startAnchor);\n\n        this._toggleAnchorTabIndex(value, this._endAnchor);\n      }\n    }\n    /** Destroys the focus trap by cleaning up the anchors. */\n\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      var startAnchor = this._startAnchor;\n      var endAnchor = this._endAnchor;\n\n      if (startAnchor) {\n        startAnchor.removeEventListener('focus', this.startAnchorListener);\n\n        if (startAnchor.parentNode) {\n          startAnchor.parentNode.removeChild(startAnchor);\n        }\n      }\n\n      if (endAnchor) {\n        endAnchor.removeEventListener('focus', this.endAnchorListener);\n\n        if (endAnchor.parentNode) {\n          endAnchor.parentNode.removeChild(endAnchor);\n        }\n      }\n\n      this._startAnchor = this._endAnchor = null;\n      this._hasAttached = false;\n    }\n    /**\r\n     * Inserts the anchors into the DOM. This is usually done automatically\r\n     * in the constructor, but can be deferred for cases like directives with `*ngIf`.\r\n     * @returns Whether the focus trap managed to attach successfully. This may not be the case\r\n     * if the target element isn't currently in the DOM.\r\n     */\n\n  }, {\n    key: \"attachAnchors\",\n    value: function attachAnchors() {\n      var _this6 = this;\n\n      // If we're not on the browser, there can be no focus to trap.\n      if (this._hasAttached) {\n        return true;\n      }\n\n      this._ngZone.runOutsideAngular(function () {\n        if (!_this6._startAnchor) {\n          _this6._startAnchor = _this6._createAnchor();\n\n          _this6._startAnchor.addEventListener('focus', _this6.startAnchorListener);\n        }\n\n        if (!_this6._endAnchor) {\n          _this6._endAnchor = _this6._createAnchor();\n\n          _this6._endAnchor.addEventListener('focus', _this6.endAnchorListener);\n        }\n      });\n\n      if (this._element.parentNode) {\n        this._element.parentNode.insertBefore(this._startAnchor, this._element);\n\n        this._element.parentNode.insertBefore(this._endAnchor, this._element.nextSibling);\n\n        this._hasAttached = true;\n      }\n\n      return this._hasAttached;\n    }\n    /**\r\n     * Waits for the zone to stabilize, then either focuses the first element that the\r\n     * user specified, or the first tabbable element.\r\n     * @returns Returns a promise that resolves with a boolean, depending\r\n     * on whether focus was moved successfully.\r\n     */\n\n  }, {\n    key: \"focusInitialElementWhenReady\",\n    value: function focusInitialElementWhenReady() {\n      var _this7 = this;\n\n      return new Promise(function (resolve) {\n        _this7._executeOnStable(function () {\n          return resolve(_this7.focusInitialElement());\n        });\n      });\n    }\n    /**\r\n     * Waits for the zone to stabilize, then focuses\r\n     * the first tabbable element within the focus trap region.\r\n     * @returns Returns a promise that resolves with a boolean, depending\r\n     * on whether focus was moved successfully.\r\n     */\n\n  }, {\n    key: \"focusFirstTabbableElementWhenReady\",\n    value: function focusFirstTabbableElementWhenReady() {\n      var _this8 = this;\n\n      return new Promise(function (resolve) {\n        _this8._executeOnStable(function () {\n          return resolve(_this8.focusFirstTabbableElement());\n        });\n      });\n    }\n    /**\r\n     * Waits for the zone to stabilize, then focuses\r\n     * the last tabbable element within the focus trap region.\r\n     * @returns Returns a promise that resolves with a boolean, depending\r\n     * on whether focus was moved successfully.\r\n     */\n\n  }, {\n    key: \"focusLastTabbableElementWhenReady\",\n    value: function focusLastTabbableElementWhenReady() {\n      var _this9 = this;\n\n      return new Promise(function (resolve) {\n        _this9._executeOnStable(function () {\n          return resolve(_this9.focusLastTabbableElement());\n        });\n      });\n    }\n    /**\r\n     * Get the specified boundary element of the trapped region.\r\n     * @param bound The boundary to get (start or end of trapped region).\r\n     * @returns The boundary element.\r\n     */\n\n  }, {\n    key: \"_getRegionBoundary\",\n    value: function _getRegionBoundary(bound) {\n      // Contains the deprecated version of selector, for temporary backwards comparability.\n      var markers = this._element.querySelectorAll(\"[cdk-focus-region-\".concat(bound, \"], \") + \"[cdkFocusRegion\".concat(bound, \"], \") + \"[cdk-focus-\".concat(bound, \"]\"));\n\n      for (var i = 0; i < markers.length; i++) {\n        // @breaking-change 8.0.0\n        if (markers[i].hasAttribute(\"cdk-focus-\".concat(bound))) {\n          console.warn(\"Found use of deprecated attribute 'cdk-focus-\".concat(bound, \"', \") + \"use 'cdkFocusRegion\".concat(bound, \"' instead. The deprecated \") + \"attribute will be removed in 8.0.0.\", markers[i]);\n        } else if (markers[i].hasAttribute(\"cdk-focus-region-\".concat(bound))) {\n          console.warn(\"Found use of deprecated attribute 'cdk-focus-region-\".concat(bound, \"', \") + \"use 'cdkFocusRegion\".concat(bound, \"' instead. The deprecated attribute \") + \"will be removed in 8.0.0.\", markers[i]);\n        }\n      }\n\n      if (bound == 'start') {\n        return markers.length ? markers[0] : this._getFirstTabbableElement(this._element);\n      }\n\n      return markers.length ? markers[markers.length - 1] : this._getLastTabbableElement(this._element);\n    }\n    /**\r\n     * Focuses the element that should be focused when the focus trap is initialized.\r\n     * @returns Whether focus was moved successfully.\r\n     */\n\n  }, {\n    key: \"focusInitialElement\",\n    value: function focusInitialElement() {\n      // Contains the deprecated version of selector, for temporary backwards comparability.\n      var redirectToElement = this._element.querySelector(\"[cdk-focus-initial], \" + \"[cdkFocusInitial]\");\n\n      if (redirectToElement) {\n        // @breaking-change 8.0.0\n        if (redirectToElement.hasAttribute(\"cdk-focus-initial\")) {\n          console.warn(\"Found use of deprecated attribute 'cdk-focus-initial', \" + \"use 'cdkFocusInitial' instead. The deprecated attribute \" + \"will be removed in 8.0.0\", redirectToElement);\n        } // Warn the consumer if the element they've pointed to\n        // isn't focusable, when not in production mode.\n\n\n        if ((typeof ngDevMode === 'undefined' || ngDevMode) && !this._checker.isFocusable(redirectToElement)) {\n          console.warn(\"Element matching '[cdkFocusInitial]' is not focusable.\", redirectToElement);\n        }\n\n        if (!this._checker.isFocusable(redirectToElement)) {\n          var focusableChild = this._getFirstTabbableElement(redirectToElement);\n\n          focusableChild === null || focusableChild === void 0 ? void 0 : focusableChild.focus();\n          return !!focusableChild;\n        }\n\n        redirectToElement.focus();\n        return true;\n      }\n\n      return this.focusFirstTabbableElement();\n    }\n    /**\r\n     * Focuses the first tabbable element within the focus trap region.\r\n     * @returns Whether focus was moved successfully.\r\n     */\n\n  }, {\n    key: \"focusFirstTabbableElement\",\n    value: function focusFirstTabbableElement() {\n      var redirectToElement = this._getRegionBoundary('start');\n\n      if (redirectToElement) {\n        redirectToElement.focus();\n      }\n\n      return !!redirectToElement;\n    }\n    /**\r\n     * Focuses the last tabbable element within the focus trap region.\r\n     * @returns Whether focus was moved successfully.\r\n     */\n\n  }, {\n    key: \"focusLastTabbableElement\",\n    value: function focusLastTabbableElement() {\n      var redirectToElement = this._getRegionBoundary('end');\n\n      if (redirectToElement) {\n        redirectToElement.focus();\n      }\n\n      return !!redirectToElement;\n    }\n    /**\r\n     * Checks whether the focus trap has successfully been attached.\r\n     */\n\n  }, {\n    key: \"hasAttached\",\n    value: function hasAttached() {\n      return this._hasAttached;\n    }\n    /** Get the first tabbable element from a DOM subtree (inclusive). */\n\n  }, {\n    key: \"_getFirstTabbableElement\",\n    value: function _getFirstTabbableElement(root) {\n      if (this._checker.isFocusable(root) && this._checker.isTabbable(root)) {\n        return root;\n      } // Iterate in DOM order. Note that IE doesn't have `children` for SVG so we fall\n      // back to `childNodes` which includes text nodes, comments etc.\n\n\n      var children = root.children || root.childNodes;\n\n      for (var i = 0; i < children.length; i++) {\n        var tabbableChild = children[i].nodeType === this._document.ELEMENT_NODE ? this._getFirstTabbableElement(children[i]) : null;\n\n        if (tabbableChild) {\n          return tabbableChild;\n        }\n      }\n\n      return null;\n    }\n    /** Get the last tabbable element from a DOM subtree (inclusive). */\n\n  }, {\n    key: \"_getLastTabbableElement\",\n    value: function _getLastTabbableElement(root) {\n      if (this._checker.isFocusable(root) && this._checker.isTabbable(root)) {\n        return root;\n      } // Iterate in reverse DOM order.\n\n\n      var children = root.children || root.childNodes;\n\n      for (var i = children.length - 1; i >= 0; i--) {\n        var tabbableChild = children[i].nodeType === this._document.ELEMENT_NODE ? this._getLastTabbableElement(children[i]) : null;\n\n        if (tabbableChild) {\n          return tabbableChild;\n        }\n      }\n\n      return null;\n    }\n    /** Creates an anchor element. */\n\n  }, {\n    key: \"_createAnchor\",\n    value: function _createAnchor() {\n      var anchor = this._document.createElement('div');\n\n      this._toggleAnchorTabIndex(this._enabled, anchor);\n\n      anchor.classList.add('cdk-visually-hidden');\n      anchor.classList.add('cdk-focus-trap-anchor');\n      anchor.setAttribute('aria-hidden', 'true');\n      return anchor;\n    }\n    /**\r\n     * Toggles the `tabindex` of an anchor, based on the enabled state of the focus trap.\r\n     * @param isEnabled Whether the focus trap is enabled.\r\n     * @param anchor Anchor on which to toggle the tabindex.\r\n     */\n\n  }, {\n    key: \"_toggleAnchorTabIndex\",\n    value: function _toggleAnchorTabIndex(isEnabled, anchor) {\n      // Remove the tabindex completely, rather than setting it to -1, because if the\n      // element has a tabindex, the user might still hit it when navigating with the arrow keys.\n      isEnabled ? anchor.setAttribute('tabindex', '0') : anchor.removeAttribute('tabindex');\n    }\n    /**\r\n     * Toggles the`tabindex` of both anchors to either trap Tab focus or allow it to escape.\r\n     * @param enabled: Whether the anchors should trap Tab.\r\n     */\n\n  }, {\n    key: \"toggleAnchors\",\n    value: function toggleAnchors(enabled) {\n      if (this._startAnchor && this._endAnchor) {\n        this._toggleAnchorTabIndex(enabled, this._startAnchor);\n\n        this._toggleAnchorTabIndex(enabled, this._endAnchor);\n      }\n    }\n    /** Executes a function when the zone is stable. */\n\n  }, {\n    key: \"_executeOnStable\",\n    value: function _executeOnStable(fn) {\n      if (this._ngZone.isStable) {\n        fn();\n      } else {\n        this._ngZone.onStable.pipe(take(1)).subscribe(fn);\n      }\n    }\n  }]);\n\n  return FocusTrap;\n}();\n/**\r\n * Factory that allows easy instantiation of focus traps.\r\n * @deprecated Use `ConfigurableFocusTrapFactory` instead.\r\n * @breaking-change 11.0.0\r\n */\n\n\nvar FocusTrapFactory = /*#__PURE__*/function () {\n  function FocusTrapFactory(_checker, _ngZone, _document) {\n    _classCallCheck(this, FocusTrapFactory);\n\n    this._checker = _checker;\n    this._ngZone = _ngZone;\n    this._document = _document;\n  }\n  /**\r\n   * Creates a focus-trapped region around the given element.\r\n   * @param element The element around which focus will be trapped.\r\n   * @param deferCaptureElements Defers the creation of focus-capturing elements to be done\r\n   *     manually by the user.\r\n   * @returns The created focus trap instance.\r\n   */\n\n\n  _createClass(FocusTrapFactory, [{\n    key: \"create\",\n    value: function create(element) {\n      var deferCaptureElements = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      return new FocusTrap(element, this._checker, this._ngZone, this._document, deferCaptureElements);\n    }\n  }]);\n\n  return FocusTrapFactory;\n}();\n\nFocusTrapFactory.ɵfac = function FocusTrapFactory_Factory(t) {\n  return new (t || FocusTrapFactory)(ɵngcc0.ɵɵinject(InteractivityChecker), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(DOCUMENT));\n};\n\nFocusTrapFactory.ɵprov = ɵɵdefineInjectable({\n  factory: function FocusTrapFactory_Factory() {\n    return new FocusTrapFactory(ɵɵinject(InteractivityChecker), ɵɵinject(NgZone), ɵɵinject(DOCUMENT));\n  },\n  token: FocusTrapFactory,\n  providedIn: \"root\"\n});\n\nFocusTrapFactory.ctorParameters = function () {\n  return [{\n    type: InteractivityChecker\n  }, {\n    type: NgZone\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [DOCUMENT]\n    }]\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FocusTrapFactory, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: InteractivityChecker\n    }, {\n      type: ɵngcc0.NgZone\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, null);\n})();\n/** Directive for trapping focus within a region. */\n\n\nvar CdkTrapFocus = /*#__PURE__*/function () {\n  function CdkTrapFocus(_elementRef, _focusTrapFactory, _document) {\n    _classCallCheck(this, CdkTrapFocus);\n\n    this._elementRef = _elementRef;\n    this._focusTrapFactory = _focusTrapFactory;\n    /** Previously focused element to restore focus to upon destroy when using autoCapture. */\n\n    this._previouslyFocusedElement = null;\n    this._document = _document;\n    this.focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement, true);\n  }\n  /** Whether the focus trap is active. */\n\n\n  _createClass(CdkTrapFocus, [{\n    key: \"enabled\",\n    get: function get() {\n      return this.focusTrap.enabled;\n    },\n    set: function set(value) {\n      this.focusTrap.enabled = coerceBooleanProperty(value);\n    }\n    /**\r\n     * Whether the directive should automatically move focus into the trapped region upon\r\n     * initialization and return focus to the previous activeElement upon destruction.\r\n     */\n\n  }, {\n    key: \"autoCapture\",\n    get: function get() {\n      return this._autoCapture;\n    },\n    set: function set(value) {\n      this._autoCapture = coerceBooleanProperty(value);\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this.focusTrap.destroy(); // If we stored a previously focused element when using autoCapture, return focus to that\n      // element now that the trapped region is being destroyed.\n\n      if (this._previouslyFocusedElement) {\n        this._previouslyFocusedElement.focus();\n\n        this._previouslyFocusedElement = null;\n      }\n    }\n  }, {\n    key: \"ngAfterContentInit\",\n    value: function ngAfterContentInit() {\n      this.focusTrap.attachAnchors();\n\n      if (this.autoCapture) {\n        this._captureFocus();\n      }\n    }\n  }, {\n    key: \"ngDoCheck\",\n    value: function ngDoCheck() {\n      if (!this.focusTrap.hasAttached()) {\n        this.focusTrap.attachAnchors();\n      }\n    }\n  }, {\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      var autoCaptureChange = changes['autoCapture'];\n\n      if (autoCaptureChange && !autoCaptureChange.firstChange && this.autoCapture && this.focusTrap.hasAttached()) {\n        this._captureFocus();\n      }\n    }\n  }, {\n    key: \"_captureFocus\",\n    value: function _captureFocus() {\n      this._previouslyFocusedElement = this._document.activeElement;\n      this.focusTrap.focusInitialElementWhenReady();\n    }\n  }]);\n\n  return CdkTrapFocus;\n}();\n\nCdkTrapFocus.ɵfac = function CdkTrapFocus_Factory(t) {\n  return new (t || CdkTrapFocus)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(FocusTrapFactory), ɵngcc0.ɵɵdirectiveInject(DOCUMENT));\n};\n\nCdkTrapFocus.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: CdkTrapFocus,\n  selectors: [[\"\", \"cdkTrapFocus\", \"\"]],\n  inputs: {\n    enabled: [\"cdkTrapFocus\", \"enabled\"],\n    autoCapture: [\"cdkTrapFocusAutoCapture\", \"autoCapture\"]\n  },\n  exportAs: [\"cdkTrapFocus\"],\n  features: [ɵngcc0.ɵɵNgOnChangesFeature]\n});\n\nCdkTrapFocus.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: FocusTrapFactory\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [DOCUMENT]\n    }]\n  }];\n};\n\nCdkTrapFocus.propDecorators = {\n  enabled: [{\n    type: Input,\n    args: ['cdkTrapFocus']\n  }],\n  autoCapture: [{\n    type: Input,\n    args: ['cdkTrapFocusAutoCapture']\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkTrapFocus, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkTrapFocus]',\n      exportAs: 'cdkTrapFocus'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: FocusTrapFactory\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, {\n    enabled: [{\n      type: Input,\n      args: ['cdkTrapFocus']\n    }],\n    autoCapture: [{\n      type: Input,\n      args: ['cdkTrapFocusAutoCapture']\n    }]\n  });\n})();\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n/**\r\n * Class that allows for trapping focus within a DOM element.\r\n *\r\n * This class uses a strategy pattern that determines how it traps focus.\r\n * See FocusTrapInertStrategy.\r\n */\n\n\nvar ConfigurableFocusTrap = /*#__PURE__*/function (_FocusTrap) {\n  _inherits(ConfigurableFocusTrap, _FocusTrap);\n\n  var _super3 = _createSuper(ConfigurableFocusTrap);\n\n  function ConfigurableFocusTrap(_element, _checker, _ngZone, _document, _focusTrapManager, _inertStrategy, config) {\n    var _this10;\n\n    _classCallCheck(this, ConfigurableFocusTrap);\n\n    _this10 = _super3.call(this, _element, _checker, _ngZone, _document, config.defer);\n    _this10._focusTrapManager = _focusTrapManager;\n    _this10._inertStrategy = _inertStrategy;\n\n    _this10._focusTrapManager.register(_assertThisInitialized(_this10));\n\n    return _this10;\n  }\n  /** Whether the FocusTrap is enabled. */\n\n\n  _createClass(ConfigurableFocusTrap, [{\n    key: \"enabled\",\n    get: function get() {\n      return this._enabled;\n    },\n    set: function set(value) {\n      this._enabled = value;\n\n      if (this._enabled) {\n        this._focusTrapManager.register(this);\n      } else {\n        this._focusTrapManager.deregister(this);\n      }\n    }\n    /** Notifies the FocusTrapManager that this FocusTrap will be destroyed. */\n\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this._focusTrapManager.deregister(this);\n\n      _get(_getPrototypeOf(ConfigurableFocusTrap.prototype), \"destroy\", this).call(this);\n    }\n    /** @docs-private Implemented as part of ManagedFocusTrap. */\n\n  }, {\n    key: \"_enable\",\n    value: function _enable() {\n      this._inertStrategy.preventFocus(this);\n\n      this.toggleAnchors(true);\n    }\n    /** @docs-private Implemented as part of ManagedFocusTrap. */\n\n  }, {\n    key: \"_disable\",\n    value: function _disable() {\n      this._inertStrategy.allowFocus(this);\n\n      this.toggleAnchors(false);\n    }\n  }]);\n\n  return ConfigurableFocusTrap;\n}(FocusTrap);\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n/** IE 11 compatible closest implementation that is able to start from non-Element Nodes. */\n\n\nfunction closest(element, selector) {\n  if (!(element instanceof Node)) {\n    return null;\n  }\n\n  var curr = element;\n\n  while (curr != null && !(curr instanceof Element)) {\n    curr = curr.parentNode;\n  }\n\n  return curr && (hasNativeClosest ? curr.closest(selector) : polyfillClosest(curr, selector));\n}\n/** Polyfill for browsers without Element.closest. */\n\n\nfunction polyfillClosest(element, selector) {\n  var curr = element;\n\n  while (curr != null && !(curr instanceof Element && matches(curr, selector))) {\n    curr = curr.parentNode;\n  }\n\n  return curr || null;\n}\n\nvar hasNativeClosest = typeof Element != 'undefined' && !!Element.prototype.closest;\n/** IE 11 compatible matches implementation. */\n\nfunction matches(element, selector) {\n  return element.matches ? element.matches(selector) : element['msMatchesSelector'](selector);\n}\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n/**\r\n * Lightweight FocusTrapInertStrategy that adds a document focus event\r\n * listener to redirect focus back inside the FocusTrap.\r\n */\n\n\nvar EventListenerFocusTrapInertStrategy = /*#__PURE__*/function () {\n  function EventListenerFocusTrapInertStrategy() {\n    _classCallCheck(this, EventListenerFocusTrapInertStrategy);\n\n    /** Focus event handler. */\n    this._listener = null;\n  }\n  /** Adds a document event listener that keeps focus inside the FocusTrap. */\n\n\n  _createClass(EventListenerFocusTrapInertStrategy, [{\n    key: \"preventFocus\",\n    value: function preventFocus(focusTrap) {\n      var _this11 = this;\n\n      // Ensure there's only one listener per document\n      if (this._listener) {\n        focusTrap._document.removeEventListener('focus', this._listener, true);\n      }\n\n      this._listener = function (e) {\n        return _this11._trapFocus(focusTrap, e);\n      };\n\n      focusTrap._ngZone.runOutsideAngular(function () {\n        focusTrap._document.addEventListener('focus', _this11._listener, true);\n      });\n    }\n    /** Removes the event listener added in preventFocus. */\n\n  }, {\n    key: \"allowFocus\",\n    value: function allowFocus(focusTrap) {\n      if (!this._listener) {\n        return;\n      }\n\n      focusTrap._document.removeEventListener('focus', this._listener, true);\n\n      this._listener = null;\n    }\n    /**\r\n     * Refocuses the first element in the FocusTrap if the focus event target was outside\r\n     * the FocusTrap.\r\n     *\r\n     * This is an event listener callback. The event listener is added in runOutsideAngular,\r\n     * so all this code runs outside Angular as well.\r\n     */\n\n  }, {\n    key: \"_trapFocus\",\n    value: function _trapFocus(focusTrap, event) {\n      var target = event.target;\n      var focusTrapRoot = focusTrap._element; // Don't refocus if target was in an overlay, because the overlay might be associated\n      // with an element inside the FocusTrap, ex. mat-select.\n\n      if (!focusTrapRoot.contains(target) && closest(target, 'div.cdk-overlay-pane') === null) {\n        // Some legacy FocusTrap usages have logic that focuses some element on the page\n        // just before FocusTrap is destroyed. For backwards compatibility, wait\n        // to be sure FocusTrap is still enabled before refocusing.\n        setTimeout(function () {\n          // Check whether focus wasn't put back into the focus trap while the timeout was pending.\n          if (focusTrap.enabled && !focusTrapRoot.contains(focusTrap._document.activeElement)) {\n            focusTrap.focusFirstTabbableElement();\n          }\n        });\n      }\n    }\n  }]);\n\n  return EventListenerFocusTrapInertStrategy;\n}();\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n/**\r\n * Configuration for creating a ConfigurableFocusTrap.\r\n */\n\n\nvar ConfigurableFocusTrapConfig = function ConfigurableFocusTrapConfig() {\n  _classCallCheck(this, ConfigurableFocusTrapConfig);\n\n  /**\r\n   * Whether to defer the creation of FocusTrap elements to be\r\n   * done manually by the user. Default is to create them\r\n   * automatically.\r\n   */\n  this.defer = false;\n};\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n/** The injection token used to specify the inert strategy. */\n\n\nvar FOCUS_TRAP_INERT_STRATEGY = new InjectionToken('FOCUS_TRAP_INERT_STRATEGY');\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n/** Injectable that ensures only the most recently enabled FocusTrap is active. */\n\nvar FocusTrapManager = /*#__PURE__*/function () {\n  function FocusTrapManager() {\n    _classCallCheck(this, FocusTrapManager);\n\n    // A stack of the FocusTraps on the page. Only the FocusTrap at the\n    // top of the stack is active.\n    this._focusTrapStack = [];\n  }\n  /**\r\n   * Disables the FocusTrap at the top of the stack, and then pushes\r\n   * the new FocusTrap onto the stack.\r\n   */\n\n\n  _createClass(FocusTrapManager, [{\n    key: \"register\",\n    value: function register(focusTrap) {\n      // Dedupe focusTraps that register multiple times.\n      this._focusTrapStack = this._focusTrapStack.filter(function (ft) {\n        return ft !== focusTrap;\n      });\n      var stack = this._focusTrapStack;\n\n      if (stack.length) {\n        stack[stack.length - 1]._disable();\n      }\n\n      stack.push(focusTrap);\n\n      focusTrap._enable();\n    }\n    /**\r\n     * Removes the FocusTrap from the stack, and activates the\r\n     * FocusTrap that is the new top of the stack.\r\n     */\n\n  }, {\n    key: \"deregister\",\n    value: function deregister(focusTrap) {\n      focusTrap._disable();\n\n      var stack = this._focusTrapStack;\n      var i = stack.indexOf(focusTrap);\n\n      if (i !== -1) {\n        stack.splice(i, 1);\n\n        if (stack.length) {\n          stack[stack.length - 1]._enable();\n        }\n      }\n    }\n  }]);\n\n  return FocusTrapManager;\n}();\n\nFocusTrapManager.ɵfac = function FocusTrapManager_Factory(t) {\n  return new (t || FocusTrapManager)();\n};\n\nFocusTrapManager.ɵprov = ɵɵdefineInjectable({\n  factory: function FocusTrapManager_Factory() {\n    return new FocusTrapManager();\n  },\n  token: FocusTrapManager,\n  providedIn: \"root\"\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FocusTrapManager, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [];\n  }, null);\n})();\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n/** Factory that allows easy instantiation of configurable focus traps. */\n\n\nvar ConfigurableFocusTrapFactory = /*#__PURE__*/function () {\n  function ConfigurableFocusTrapFactory(_checker, _ngZone, _focusTrapManager, _document, _inertStrategy) {\n    _classCallCheck(this, ConfigurableFocusTrapFactory);\n\n    this._checker = _checker;\n    this._ngZone = _ngZone;\n    this._focusTrapManager = _focusTrapManager;\n    this._document = _document; // TODO split up the strategies into different modules, similar to DateAdapter.\n\n    this._inertStrategy = _inertStrategy || new EventListenerFocusTrapInertStrategy();\n  }\n\n  _createClass(ConfigurableFocusTrapFactory, [{\n    key: \"create\",\n    value: function create(element) {\n      var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new ConfigurableFocusTrapConfig();\n      var configObject;\n\n      if (typeof config === 'boolean') {\n        configObject = new ConfigurableFocusTrapConfig();\n        configObject.defer = config;\n      } else {\n        configObject = config;\n      }\n\n      return new ConfigurableFocusTrap(element, this._checker, this._ngZone, this._document, this._focusTrapManager, this._inertStrategy, configObject);\n    }\n  }]);\n\n  return ConfigurableFocusTrapFactory;\n}();\n\nConfigurableFocusTrapFactory.ɵfac = function ConfigurableFocusTrapFactory_Factory(t) {\n  return new (t || ConfigurableFocusTrapFactory)(ɵngcc0.ɵɵinject(InteractivityChecker), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(FocusTrapManager), ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(FOCUS_TRAP_INERT_STRATEGY, 8));\n};\n\nConfigurableFocusTrapFactory.ɵprov = ɵɵdefineInjectable({\n  factory: function ConfigurableFocusTrapFactory_Factory() {\n    return new ConfigurableFocusTrapFactory(ɵɵinject(InteractivityChecker), ɵɵinject(NgZone), ɵɵinject(FocusTrapManager), ɵɵinject(DOCUMENT), ɵɵinject(FOCUS_TRAP_INERT_STRATEGY, 8));\n  },\n  token: ConfigurableFocusTrapFactory,\n  providedIn: \"root\"\n});\n\nConfigurableFocusTrapFactory.ctorParameters = function () {\n  return [{\n    type: InteractivityChecker\n  }, {\n    type: NgZone\n  }, {\n    type: FocusTrapManager\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [DOCUMENT]\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [FOCUS_TRAP_INERT_STRATEGY]\n    }]\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ConfigurableFocusTrapFactory, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: InteractivityChecker\n    }, {\n      type: ɵngcc0.NgZone\n    }, {\n      type: FocusTrapManager\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [FOCUS_TRAP_INERT_STRATEGY]\n      }]\n    }];\n  }, null);\n})();\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n\nvar LIVE_ANNOUNCER_ELEMENT_TOKEN = new InjectionToken('liveAnnouncerElement', {\n  providedIn: 'root',\n  factory: LIVE_ANNOUNCER_ELEMENT_TOKEN_FACTORY\n});\n/** @docs-private */\n\nfunction LIVE_ANNOUNCER_ELEMENT_TOKEN_FACTORY() {\n  return null;\n}\n/** Injection token that can be used to configure the default options for the LiveAnnouncer. */\n\n\nvar LIVE_ANNOUNCER_DEFAULT_OPTIONS = new InjectionToken('LIVE_ANNOUNCER_DEFAULT_OPTIONS');\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\nvar LiveAnnouncer = /*#__PURE__*/function () {\n  function LiveAnnouncer(elementToken, _ngZone, _document, _defaultOptions) {\n    _classCallCheck(this, LiveAnnouncer);\n\n    this._ngZone = _ngZone;\n    this._defaultOptions = _defaultOptions; // We inject the live element and document as `any` because the constructor signature cannot\n    // reference browser globals (HTMLElement, Document) on non-browser environments, since having\n    // a class decorator causes TypeScript to preserve the constructor signature types.\n\n    this._document = _document;\n    this._liveElement = elementToken || this._createLiveElement();\n  }\n\n  _createClass(LiveAnnouncer, [{\n    key: \"announce\",\n    value: function announce(message) {\n      var _this12 = this;\n\n      var defaultOptions = this._defaultOptions;\n      var politeness;\n      var duration;\n\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      if (args.length === 1 && typeof args[0] === 'number') {\n        duration = args[0];\n      } else {\n        politeness = args[0];\n        duration = args[1];\n      }\n\n      this.clear();\n      clearTimeout(this._previousTimeout);\n\n      if (!politeness) {\n        politeness = defaultOptions && defaultOptions.politeness ? defaultOptions.politeness : 'polite';\n      }\n\n      if (duration == null && defaultOptions) {\n        duration = defaultOptions.duration;\n      } // TODO: ensure changing the politeness works on all environments we support.\n\n\n      this._liveElement.setAttribute('aria-live', politeness); // This 100ms timeout is necessary for some browser + screen-reader combinations:\n      // - Both JAWS and NVDA over IE11 will not announce anything without a non-zero timeout.\n      // - With Chrome and IE11 with NVDA or JAWS, a repeated (identical) message won't be read a\n      //   second time without clearing and then using a non-zero delay.\n      // (using JAWS 17 at time of this writing).\n\n\n      return this._ngZone.runOutsideAngular(function () {\n        return new Promise(function (resolve) {\n          clearTimeout(_this12._previousTimeout);\n          _this12._previousTimeout = setTimeout(function () {\n            _this12._liveElement.textContent = message;\n            resolve();\n\n            if (typeof duration === 'number') {\n              _this12._previousTimeout = setTimeout(function () {\n                return _this12.clear();\n              }, duration);\n            }\n          }, 100);\n        });\n      });\n    }\n    /**\r\n     * Clears the current text from the announcer element. Can be used to prevent\r\n     * screen readers from reading the text out again while the user is going\r\n     * through the page landmarks.\r\n     */\n\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      if (this._liveElement) {\n        this._liveElement.textContent = '';\n      }\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      clearTimeout(this._previousTimeout);\n\n      if (this._liveElement && this._liveElement.parentNode) {\n        this._liveElement.parentNode.removeChild(this._liveElement);\n\n        this._liveElement = null;\n      }\n    }\n  }, {\n    key: \"_createLiveElement\",\n    value: function _createLiveElement() {\n      var elementClass = 'cdk-live-announcer-element';\n\n      var previousElements = this._document.getElementsByClassName(elementClass);\n\n      var liveEl = this._document.createElement('div'); // Remove any old containers. This can happen when coming in from a server-side-rendered page.\n\n\n      for (var i = 0; i < previousElements.length; i++) {\n        previousElements[i].parentNode.removeChild(previousElements[i]);\n      }\n\n      liveEl.classList.add(elementClass);\n      liveEl.classList.add('cdk-visually-hidden');\n      liveEl.setAttribute('aria-atomic', 'true');\n      liveEl.setAttribute('aria-live', 'polite');\n\n      this._document.body.appendChild(liveEl);\n\n      return liveEl;\n    }\n  }]);\n\n  return LiveAnnouncer;\n}();\n\nLiveAnnouncer.ɵfac = function LiveAnnouncer_Factory(t) {\n  return new (t || LiveAnnouncer)(ɵngcc0.ɵɵinject(LIVE_ANNOUNCER_ELEMENT_TOKEN, 8), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(LIVE_ANNOUNCER_DEFAULT_OPTIONS, 8));\n};\n\nLiveAnnouncer.ɵprov = ɵɵdefineInjectable({\n  factory: function LiveAnnouncer_Factory() {\n    return new LiveAnnouncer(ɵɵinject(LIVE_ANNOUNCER_ELEMENT_TOKEN, 8), ɵɵinject(NgZone), ɵɵinject(DOCUMENT), ɵɵinject(LIVE_ANNOUNCER_DEFAULT_OPTIONS, 8));\n  },\n  token: LiveAnnouncer,\n  providedIn: \"root\"\n});\n\nLiveAnnouncer.ctorParameters = function () {\n  return [{\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [LIVE_ANNOUNCER_ELEMENT_TOKEN]\n    }]\n  }, {\n    type: NgZone\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [DOCUMENT]\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [LIVE_ANNOUNCER_DEFAULT_OPTIONS]\n    }]\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(LiveAnnouncer, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [LIVE_ANNOUNCER_ELEMENT_TOKEN]\n      }]\n    }, {\n      type: ɵngcc0.NgZone\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [LIVE_ANNOUNCER_DEFAULT_OPTIONS]\n      }]\n    }];\n  }, null);\n})();\n/**\r\n * A directive that works similarly to aria-live, but uses the LiveAnnouncer to ensure compatibility\r\n * with a wider range of browsers and screen readers.\r\n */\n\n\nvar CdkAriaLive = /*#__PURE__*/function () {\n  function CdkAriaLive(_elementRef, _liveAnnouncer, _contentObserver, _ngZone) {\n    _classCallCheck(this, CdkAriaLive);\n\n    this._elementRef = _elementRef;\n    this._liveAnnouncer = _liveAnnouncer;\n    this._contentObserver = _contentObserver;\n    this._ngZone = _ngZone;\n    this._politeness = 'polite';\n  }\n  /** The aria-live politeness level to use when announcing messages. */\n\n\n  _createClass(CdkAriaLive, [{\n    key: \"politeness\",\n    get: function get() {\n      return this._politeness;\n    },\n    set: function set(value) {\n      var _this13 = this;\n\n      this._politeness = value === 'off' || value === 'assertive' ? value : 'polite';\n\n      if (this._politeness === 'off') {\n        if (this._subscription) {\n          this._subscription.unsubscribe();\n\n          this._subscription = null;\n        }\n      } else if (!this._subscription) {\n        this._subscription = this._ngZone.runOutsideAngular(function () {\n          return _this13._contentObserver.observe(_this13._elementRef).subscribe(function () {\n            // Note that we use textContent here, rather than innerText, in order to avoid a reflow.\n            var elementText = _this13._elementRef.nativeElement.textContent; // The `MutationObserver` fires also for attribute\n            // changes which we don't want to announce.\n\n            if (elementText !== _this13._previousAnnouncedText) {\n              _this13._liveAnnouncer.announce(elementText, _this13._politeness);\n\n              _this13._previousAnnouncedText = elementText;\n            }\n          });\n        });\n      }\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      if (this._subscription) {\n        this._subscription.unsubscribe();\n      }\n    }\n  }]);\n\n  return CdkAriaLive;\n}();\n\nCdkAriaLive.ɵfac = function CdkAriaLive_Factory(t) {\n  return new (t || CdkAriaLive)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(LiveAnnouncer), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.ContentObserver), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n};\n\nCdkAriaLive.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: CdkAriaLive,\n  selectors: [[\"\", \"cdkAriaLive\", \"\"]],\n  inputs: {\n    politeness: [\"cdkAriaLive\", \"politeness\"]\n  },\n  exportAs: [\"cdkAriaLive\"]\n});\n\nCdkAriaLive.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: LiveAnnouncer\n  }, {\n    type: ContentObserver\n  }, {\n    type: NgZone\n  }];\n};\n\nCdkAriaLive.propDecorators = {\n  politeness: [{\n    type: Input,\n    args: ['cdkAriaLive']\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkAriaLive, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkAriaLive]',\n      exportAs: 'cdkAriaLive'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: LiveAnnouncer\n    }, {\n      type: ɵngcc2.ContentObserver\n    }, {\n      type: ɵngcc0.NgZone\n    }];\n  }, {\n    politeness: [{\n      type: Input,\n      args: ['cdkAriaLive']\n    }]\n  });\n})();\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n/** Gets whether an event could be a faked `mousedown` event dispatched by a screen reader. */\n\n\nfunction isFakeMousedownFromScreenReader(event) {\n  // We can typically distinguish between these faked mousedown events and real mousedown events\n  // using the \"buttons\" property. While real mousedowns will indicate the mouse button that was\n  // pressed (e.g. \"1\" for the left mouse button), faked mousedowns will usually set the property\n  // value to 0.\n  return event.buttons === 0;\n}\n/** Gets whether an event could be a faked `touchstart` event dispatched by a screen reader. */\n\n\nfunction isFakeTouchstartFromScreenReader(event) {\n  var touch = event.touches && event.touches[0] || event.changedTouches && event.changedTouches[0]; // A fake `touchstart` can be distinguished from a real one by looking at the `identifier`\n  // which is typically >= 0 on a real device versus -1 from a screen reader. Just to be safe,\n  // we can also look at `radiusX` and `radiusY`. This behavior was observed against a Windows 10\n  // device with a touch screen running NVDA v2020.4 and Firefox 85 or Chrome 88.\n\n  return !!touch && touch.identifier === -1 && (touch.radiusX == null || touch.radiusX === 1) && (touch.radiusY == null || touch.radiusY === 1);\n}\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n// This is the value used by AngularJS Material. Through trial and error (on iPhone 6S) they found\n// that a value of around 650ms seems appropriate.\n\n\nvar TOUCH_BUFFER_MS = 650;\n/** InjectionToken for FocusMonitorOptions. */\n\nvar FOCUS_MONITOR_DEFAULT_OPTIONS = new InjectionToken('cdk-focus-monitor-default-options');\n/**\r\n * Event listener options that enable capturing and also\r\n * mark the listener as passive if the browser supports it.\r\n */\n\nvar captureEventListenerOptions = normalizePassiveListenerOptions({\n  passive: true,\n  capture: true\n});\n/** Monitors mouse and keyboard events to determine the cause of focus events. */\n\nvar FocusMonitor = /*#__PURE__*/function () {\n  function FocusMonitor(_ngZone, _platform,\n  /** @breaking-change 11.0.0 make document required */\n  document, options) {\n    var _this14 = this;\n\n    _classCallCheck(this, FocusMonitor);\n\n    this._ngZone = _ngZone;\n    this._platform = _platform;\n    /** The focus origin that the next focus event is a result of. */\n\n    this._origin = null;\n    /** Whether the window has just been focused. */\n\n    this._windowFocused = false;\n    /** Map of elements being monitored to their info. */\n\n    this._elementInfo = new Map();\n    /** The number of elements currently being monitored. */\n\n    this._monitoredElementCount = 0;\n    /**\r\n     * Keeps track of the root nodes to which we've currently bound a focus/blur handler,\r\n     * as well as the number of monitored elements that they contain. We have to treat focus/blur\r\n     * handlers differently from the rest of the events, because the browser won't emit events\r\n     * to the document when focus moves inside of a shadow root.\r\n     */\n\n    this._rootNodeFocusListenerCount = new Map();\n    /**\r\n     * Event listener for `keydown` events on the document.\r\n     * Needs to be an arrow function in order to preserve the context when it gets bound.\r\n     */\n\n    this._documentKeydownListener = function () {\n      // On keydown record the origin and clear any touch event that may be in progress.\n      _this14._lastTouchTarget = null;\n\n      _this14._setOriginForCurrentEventQueue('keyboard');\n    };\n    /**\r\n     * Event listener for `mousedown` events on the document.\r\n     * Needs to be an arrow function in order to preserve the context when it gets bound.\r\n     */\n\n\n    this._documentMousedownListener = function (event) {\n      // On mousedown record the origin only if there is not touch\n      // target, since a mousedown can happen as a result of a touch event.\n      if (!_this14._lastTouchTarget) {\n        // In some cases screen readers fire fake `mousedown` events instead of `keydown`.\n        // Resolve the focus source to `keyboard` if we detect one of them.\n        var source = isFakeMousedownFromScreenReader(event) ? 'keyboard' : 'mouse';\n\n        _this14._setOriginForCurrentEventQueue(source);\n      }\n    };\n    /**\r\n     * Event listener for `touchstart` events on the document.\r\n     * Needs to be an arrow function in order to preserve the context when it gets bound.\r\n     */\n\n\n    this._documentTouchstartListener = function (event) {\n      // Some screen readers will fire a fake `touchstart` event if an element is activated using\n      // the keyboard while on a device with a touchsreen. Consider such events as keyboard focus.\n      if (!isFakeTouchstartFromScreenReader(event)) {\n        // When the touchstart event fires the focus event is not yet in the event queue. This means\n        // we can't rely on the trick used above (setting timeout of 1ms). Instead we wait 650ms to\n        // see if a focus happens.\n        if (_this14._touchTimeoutId != null) {\n          clearTimeout(_this14._touchTimeoutId);\n        }\n\n        _this14._lastTouchTarget = getTarget(event);\n        _this14._touchTimeoutId = setTimeout(function () {\n          return _this14._lastTouchTarget = null;\n        }, TOUCH_BUFFER_MS);\n      } else if (!_this14._lastTouchTarget) {\n        _this14._setOriginForCurrentEventQueue('keyboard');\n      }\n    };\n    /**\r\n     * Event listener for `focus` events on the window.\r\n     * Needs to be an arrow function in order to preserve the context when it gets bound.\r\n     */\n\n\n    this._windowFocusListener = function () {\n      // Make a note of when the window regains focus, so we can\n      // restore the origin info for the focused element.\n      _this14._windowFocused = true;\n      _this14._windowFocusTimeoutId = setTimeout(function () {\n        return _this14._windowFocused = false;\n      });\n    };\n    /**\r\n     * Event listener for `focus` and 'blur' events on the document.\r\n     * Needs to be an arrow function in order to preserve the context when it gets bound.\r\n     */\n\n\n    this._rootNodeFocusAndBlurListener = function (event) {\n      var target = getTarget(event);\n      var handler = event.type === 'focus' ? _this14._onFocus : _this14._onBlur; // We need to walk up the ancestor chain in order to support `checkChildren`.\n\n      for (var element = target; element; element = element.parentElement) {\n        handler.call(_this14, event, element);\n      }\n    };\n\n    this._document = document;\n    this._detectionMode = (options === null || options === void 0 ? void 0 : options.detectionMode) || 0\n    /* IMMEDIATE */\n    ;\n  }\n\n  _createClass(FocusMonitor, [{\n    key: \"monitor\",\n    value: function monitor(element) {\n      var checkChildren = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var nativeElement = coerceElement(element); // Do nothing if we're not on the browser platform or the passed in node isn't an element.\n\n      if (!this._platform.isBrowser || nativeElement.nodeType !== 1) {\n        return of(null);\n      } // If the element is inside the shadow DOM, we need to bind our focus/blur listeners to\n      // the shadow root, rather than the `document`, because the browser won't emit focus events\n      // to the `document`, if focus is moving within the same shadow root.\n\n\n      var rootNode = _getShadowRoot(nativeElement) || this._getDocument();\n\n      var cachedInfo = this._elementInfo.get(nativeElement); // Check if we're already monitoring this element.\n\n\n      if (cachedInfo) {\n        if (checkChildren) {\n          // TODO(COMP-318): this can be problematic, because it'll turn all non-checkChildren\n          // observers into ones that behave as if `checkChildren` was turned on. We need a more\n          // robust solution.\n          cachedInfo.checkChildren = true;\n        }\n\n        return cachedInfo.subject;\n      } // Create monitored element info.\n\n\n      var info = {\n        checkChildren: checkChildren,\n        subject: new Subject(),\n        rootNode: rootNode\n      };\n\n      this._elementInfo.set(nativeElement, info);\n\n      this._registerGlobalListeners(info);\n\n      return info.subject;\n    }\n  }, {\n    key: \"stopMonitoring\",\n    value: function stopMonitoring(element) {\n      var nativeElement = coerceElement(element);\n\n      var elementInfo = this._elementInfo.get(nativeElement);\n\n      if (elementInfo) {\n        elementInfo.subject.complete();\n\n        this._setClasses(nativeElement);\n\n        this._elementInfo.delete(nativeElement);\n\n        this._removeGlobalListeners(elementInfo);\n      }\n    }\n  }, {\n    key: \"focusVia\",\n    value: function focusVia(element, origin, options) {\n      var _this15 = this;\n\n      var nativeElement = coerceElement(element);\n\n      var focusedElement = this._getDocument().activeElement; // If the element is focused already, calling `focus` again won't trigger the event listener\n      // which means that the focus classes won't be updated. If that's the case, update the classes\n      // directly without waiting for an event.\n\n\n      if (nativeElement === focusedElement) {\n        this._getClosestElementsInfo(nativeElement).forEach(function (_ref) {\n          var _ref2 = _slicedToArray(_ref, 2),\n              currentElement = _ref2[0],\n              info = _ref2[1];\n\n          return _this15._originChanged(currentElement, origin, info);\n        });\n      } else {\n        this._setOriginForCurrentEventQueue(origin); // `focus` isn't available on the server\n\n\n        if (typeof nativeElement.focus === 'function') {\n          nativeElement.focus(options);\n        }\n      }\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      var _this16 = this;\n\n      this._elementInfo.forEach(function (_info, element) {\n        return _this16.stopMonitoring(element);\n      });\n    }\n    /** Access injected document if available or fallback to global document reference */\n\n  }, {\n    key: \"_getDocument\",\n    value: function _getDocument() {\n      return this._document || document;\n    }\n    /** Use defaultView of injected document if available or fallback to global window reference */\n\n  }, {\n    key: \"_getWindow\",\n    value: function _getWindow() {\n      var doc = this._getDocument();\n\n      return doc.defaultView || window;\n    }\n  }, {\n    key: \"_toggleClass\",\n    value: function _toggleClass(element, className, shouldSet) {\n      if (shouldSet) {\n        element.classList.add(className);\n      } else {\n        element.classList.remove(className);\n      }\n    }\n  }, {\n    key: \"_getFocusOrigin\",\n    value: function _getFocusOrigin(event) {\n      // If we couldn't detect a cause for the focus event, it's due to one of three reasons:\n      // 1) The window has just regained focus, in which case we want to restore the focused state of\n      //    the element from before the window blurred.\n      // 2) It was caused by a touch event, in which case we mark the origin as 'touch'.\n      // 3) The element was programmatically focused, in which case we should mark the origin as\n      //    'program'.\n      if (this._origin) {\n        return this._origin;\n      }\n\n      if (this._windowFocused && this._lastFocusOrigin) {\n        return this._lastFocusOrigin;\n      } else if (this._wasCausedByTouch(event)) {\n        return 'touch';\n      } else {\n        return 'program';\n      }\n    }\n    /**\r\n     * Sets the focus classes on the element based on the given focus origin.\r\n     * @param element The element to update the classes on.\r\n     * @param origin The focus origin.\r\n     */\n\n  }, {\n    key: \"_setClasses\",\n    value: function _setClasses(element, origin) {\n      this._toggleClass(element, 'cdk-focused', !!origin);\n\n      this._toggleClass(element, 'cdk-touch-focused', origin === 'touch');\n\n      this._toggleClass(element, 'cdk-keyboard-focused', origin === 'keyboard');\n\n      this._toggleClass(element, 'cdk-mouse-focused', origin === 'mouse');\n\n      this._toggleClass(element, 'cdk-program-focused', origin === 'program');\n    }\n    /**\r\n     * Sets the origin and schedules an async function to clear it at the end of the event queue.\r\n     * If the detection mode is 'eventual', the origin is never cleared.\r\n     * @param origin The origin to set.\r\n     */\n\n  }, {\n    key: \"_setOriginForCurrentEventQueue\",\n    value: function _setOriginForCurrentEventQueue(origin) {\n      var _this17 = this;\n\n      this._ngZone.runOutsideAngular(function () {\n        _this17._origin = origin;\n\n        if (_this17._detectionMode === 0\n        /* IMMEDIATE */\n        ) {\n            // Sometimes the focus origin won't be valid in Firefox because Firefox seems to focus *one*\n            // tick after the interaction event fired. To ensure the focus origin is always correct,\n            // the focus origin will be determined at the beginning of the next tick.\n            _this17._originTimeoutId = setTimeout(function () {\n              return _this17._origin = null;\n            }, 1);\n          }\n      });\n    }\n    /**\r\n     * Checks whether the given focus event was caused by a touchstart event.\r\n     * @param event The focus event to check.\r\n     * @returns Whether the event was caused by a touch.\r\n     */\n\n  }, {\n    key: \"_wasCausedByTouch\",\n    value: function _wasCausedByTouch(event) {\n      // Note(mmalerba): This implementation is not quite perfect, there is a small edge case.\n      // Consider the following dom structure:\n      //\n      // <div #parent tabindex=\"0\" cdkFocusClasses>\n      //   <div #child (click)=\"#parent.focus()\"></div>\n      // </div>\n      //\n      // If the user touches the #child element and the #parent is programmatically focused as a\n      // result, this code will still consider it to have been caused by the touch event and will\n      // apply the cdk-touch-focused class rather than the cdk-program-focused class. This is a\n      // relatively small edge-case that can be worked around by using\n      // focusVia(parentEl, 'program') to focus the parent element.\n      //\n      // If we decide that we absolutely must handle this case correctly, we can do so by listening\n      // for the first focus event after the touchstart, and then the first blur event after that\n      // focus event. When that blur event fires we know that whatever follows is not a result of the\n      // touchstart.\n      var focusTarget = getTarget(event);\n      return this._lastTouchTarget instanceof Node && focusTarget instanceof Node && (focusTarget === this._lastTouchTarget || focusTarget.contains(this._lastTouchTarget));\n    }\n    /**\r\n     * Handles focus events on a registered element.\r\n     * @param event The focus event.\r\n     * @param element The monitored element.\r\n     */\n\n  }, {\n    key: \"_onFocus\",\n    value: function _onFocus(event, element) {\n      // NOTE(mmalerba): We currently set the classes based on the focus origin of the most recent\n      // focus event affecting the monitored element. If we want to use the origin of the first event\n      // instead we should check for the cdk-focused class here and return if the element already has\n      // it. (This only matters for elements that have includesChildren = true).\n      // If we are not counting child-element-focus as focused, make sure that the event target is the\n      // monitored element itself.\n      var elementInfo = this._elementInfo.get(element);\n\n      if (!elementInfo || !elementInfo.checkChildren && element !== getTarget(event)) {\n        return;\n      }\n\n      this._originChanged(element, this._getFocusOrigin(event), elementInfo);\n    }\n    /**\r\n     * Handles blur events on a registered element.\r\n     * @param event The blur event.\r\n     * @param element The monitored element.\r\n     */\n\n  }, {\n    key: \"_onBlur\",\n    value: function _onBlur(event, element) {\n      // If we are counting child-element-focus as focused, make sure that we aren't just blurring in\n      // order to focus another child of the monitored element.\n      var elementInfo = this._elementInfo.get(element);\n\n      if (!elementInfo || elementInfo.checkChildren && event.relatedTarget instanceof Node && element.contains(event.relatedTarget)) {\n        return;\n      }\n\n      this._setClasses(element);\n\n      this._emitOrigin(elementInfo.subject, null);\n    }\n  }, {\n    key: \"_emitOrigin\",\n    value: function _emitOrigin(subject, origin) {\n      this._ngZone.run(function () {\n        return subject.next(origin);\n      });\n    }\n  }, {\n    key: \"_registerGlobalListeners\",\n    value: function _registerGlobalListeners(elementInfo) {\n      var _this18 = this;\n\n      if (!this._platform.isBrowser) {\n        return;\n      }\n\n      var rootNode = elementInfo.rootNode;\n      var rootNodeFocusListeners = this._rootNodeFocusListenerCount.get(rootNode) || 0;\n\n      if (!rootNodeFocusListeners) {\n        this._ngZone.runOutsideAngular(function () {\n          rootNode.addEventListener('focus', _this18._rootNodeFocusAndBlurListener, captureEventListenerOptions);\n          rootNode.addEventListener('blur', _this18._rootNodeFocusAndBlurListener, captureEventListenerOptions);\n        });\n      }\n\n      this._rootNodeFocusListenerCount.set(rootNode, rootNodeFocusListeners + 1); // Register global listeners when first element is monitored.\n\n\n      if (++this._monitoredElementCount === 1) {\n        // Note: we listen to events in the capture phase so we\n        // can detect them even if the user stops propagation.\n        this._ngZone.runOutsideAngular(function () {\n          var document = _this18._getDocument();\n\n          var window = _this18._getWindow();\n\n          document.addEventListener('keydown', _this18._documentKeydownListener, captureEventListenerOptions);\n          document.addEventListener('mousedown', _this18._documentMousedownListener, captureEventListenerOptions);\n          document.addEventListener('touchstart', _this18._documentTouchstartListener, captureEventListenerOptions);\n          window.addEventListener('focus', _this18._windowFocusListener);\n        });\n      }\n    }\n  }, {\n    key: \"_removeGlobalListeners\",\n    value: function _removeGlobalListeners(elementInfo) {\n      var rootNode = elementInfo.rootNode;\n\n      if (this._rootNodeFocusListenerCount.has(rootNode)) {\n        var rootNodeFocusListeners = this._rootNodeFocusListenerCount.get(rootNode);\n\n        if (rootNodeFocusListeners > 1) {\n          this._rootNodeFocusListenerCount.set(rootNode, rootNodeFocusListeners - 1);\n        } else {\n          rootNode.removeEventListener('focus', this._rootNodeFocusAndBlurListener, captureEventListenerOptions);\n          rootNode.removeEventListener('blur', this._rootNodeFocusAndBlurListener, captureEventListenerOptions);\n\n          this._rootNodeFocusListenerCount.delete(rootNode);\n        }\n      } // Unregister global listeners when last element is unmonitored.\n\n\n      if (! --this._monitoredElementCount) {\n        var _document2 = this._getDocument();\n\n        var _window = this._getWindow();\n\n        _document2.removeEventListener('keydown', this._documentKeydownListener, captureEventListenerOptions);\n\n        _document2.removeEventListener('mousedown', this._documentMousedownListener, captureEventListenerOptions);\n\n        _document2.removeEventListener('touchstart', this._documentTouchstartListener, captureEventListenerOptions);\n\n        _window.removeEventListener('focus', this._windowFocusListener); // Clear timeouts for all potentially pending timeouts to prevent the leaks.\n\n\n        clearTimeout(this._windowFocusTimeoutId);\n        clearTimeout(this._touchTimeoutId);\n        clearTimeout(this._originTimeoutId);\n      }\n    }\n    /** Updates all the state on an element once its focus origin has changed. */\n\n  }, {\n    key: \"_originChanged\",\n    value: function _originChanged(element, origin, elementInfo) {\n      this._setClasses(element, origin);\n\n      this._emitOrigin(elementInfo.subject, origin);\n\n      this._lastFocusOrigin = origin;\n    }\n    /**\r\n     * Collects the `MonitoredElementInfo` of a particular element and\r\n     * all of its ancestors that have enabled `checkChildren`.\r\n     * @param element Element from which to start the search.\r\n     */\n\n  }, {\n    key: \"_getClosestElementsInfo\",\n    value: function _getClosestElementsInfo(element) {\n      var results = [];\n\n      this._elementInfo.forEach(function (info, currentElement) {\n        if (currentElement === element || info.checkChildren && currentElement.contains(element)) {\n          results.push([currentElement, info]);\n        }\n      });\n\n      return results;\n    }\n  }]);\n\n  return FocusMonitor;\n}();\n\nFocusMonitor.ɵfac = function FocusMonitor_Factory(t) {\n  return new (t || FocusMonitor)(ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(ɵngcc1.Platform), ɵngcc0.ɵɵinject(DOCUMENT, 8), ɵngcc0.ɵɵinject(FOCUS_MONITOR_DEFAULT_OPTIONS, 8));\n};\n\nFocusMonitor.ɵprov = ɵɵdefineInjectable({\n  factory: function FocusMonitor_Factory() {\n    return new FocusMonitor(ɵɵinject(NgZone), ɵɵinject(Platform), ɵɵinject(DOCUMENT, 8), ɵɵinject(FOCUS_MONITOR_DEFAULT_OPTIONS, 8));\n  },\n  token: FocusMonitor,\n  providedIn: \"root\"\n});\n\nFocusMonitor.ctorParameters = function () {\n  return [{\n    type: NgZone\n  }, {\n    type: Platform\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [DOCUMENT]\n    }]\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Optional\n    }, {\n      type: Inject,\n      args: [FOCUS_MONITOR_DEFAULT_OPTIONS]\n    }]\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FocusMonitor, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.NgZone\n    }, {\n      type: ɵngcc1.Platform\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [FOCUS_MONITOR_DEFAULT_OPTIONS]\n      }]\n    }];\n  }, null);\n})();\n/** Gets the target of an event, accounting for Shadow DOM. */\n\n\nfunction getTarget(event) {\n  // If an event is bound outside the Shadow DOM, the `event.target` will\n  // point to the shadow root so we have to use `composedPath` instead.\n  return event.composedPath ? event.composedPath()[0] : event.target;\n}\n/**\r\n * Directive that determines how a particular element was focused (via keyboard, mouse, touch, or\r\n * programmatically) and adds corresponding classes to the element.\r\n *\r\n * There are two variants of this directive:\r\n * 1) cdkMonitorElementFocus: does not consider an element to be focused if one of its children is\r\n *    focused.\r\n * 2) cdkMonitorSubtreeFocus: considers an element focused if it or any of its children are focused.\r\n */\n\n\nvar CdkMonitorFocus = /*#__PURE__*/function () {\n  function CdkMonitorFocus(_elementRef, _focusMonitor) {\n    _classCallCheck(this, CdkMonitorFocus);\n\n    this._elementRef = _elementRef;\n    this._focusMonitor = _focusMonitor;\n    this.cdkFocusChange = new EventEmitter();\n  }\n\n  _createClass(CdkMonitorFocus, [{\n    key: \"ngAfterViewInit\",\n    value: function ngAfterViewInit() {\n      var _this19 = this;\n\n      var element = this._elementRef.nativeElement;\n      this._monitorSubscription = this._focusMonitor.monitor(element, element.nodeType === 1 && element.hasAttribute('cdkMonitorSubtreeFocus')).subscribe(function (origin) {\n        return _this19.cdkFocusChange.emit(origin);\n      });\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this._focusMonitor.stopMonitoring(this._elementRef);\n\n      if (this._monitorSubscription) {\n        this._monitorSubscription.unsubscribe();\n      }\n    }\n  }]);\n\n  return CdkMonitorFocus;\n}();\n\nCdkMonitorFocus.ɵfac = function CdkMonitorFocus_Factory(t) {\n  return new (t || CdkMonitorFocus)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(FocusMonitor));\n};\n\nCdkMonitorFocus.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: CdkMonitorFocus,\n  selectors: [[\"\", \"cdkMonitorElementFocus\", \"\"], [\"\", \"cdkMonitorSubtreeFocus\", \"\"]],\n  outputs: {\n    cdkFocusChange: \"cdkFocusChange\"\n  }\n});\n\nCdkMonitorFocus.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: FocusMonitor\n  }];\n};\n\nCdkMonitorFocus.propDecorators = {\n  cdkFocusChange: [{\n    type: Output\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkMonitorFocus, [{\n    type: Directive,\n    args: [{\n      selector: '[cdkMonitorElementFocus], [cdkMonitorSubtreeFocus]'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: FocusMonitor\n    }];\n  }, {\n    cdkFocusChange: [{\n      type: Output\n    }]\n  });\n})();\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n/** CSS class applied to the document body when in black-on-white high-contrast mode. */\n\n\nvar BLACK_ON_WHITE_CSS_CLASS = 'cdk-high-contrast-black-on-white';\n/** CSS class applied to the document body when in white-on-black high-contrast mode. */\n\nvar WHITE_ON_BLACK_CSS_CLASS = 'cdk-high-contrast-white-on-black';\n/** CSS class applied to the document body when in high-contrast mode. */\n\nvar HIGH_CONTRAST_MODE_ACTIVE_CSS_CLASS = 'cdk-high-contrast-active';\n/**\r\n * Service to determine whether the browser is currently in a high-contrast-mode environment.\r\n *\r\n * Microsoft Windows supports an accessibility feature called \"High Contrast Mode\". This mode\r\n * changes the appearance of all applications, including web applications, to dramatically increase\r\n * contrast.\r\n *\r\n * IE, Edge, and Firefox currently support this mode. Chrome does not support Windows High Contrast\r\n * Mode. This service does not detect high-contrast mode as added by the Chrome \"High Contrast\"\r\n * browser extension.\r\n */\n\nvar HighContrastModeDetector = /*#__PURE__*/function () {\n  function HighContrastModeDetector(_platform, document) {\n    _classCallCheck(this, HighContrastModeDetector);\n\n    this._platform = _platform;\n    this._document = document;\n  }\n  /** Gets the current high-contrast-mode for the page. */\n\n\n  _createClass(HighContrastModeDetector, [{\n    key: \"getHighContrastMode\",\n    value: function getHighContrastMode() {\n      if (!this._platform.isBrowser) {\n        return 0\n        /* NONE */\n        ;\n      } // Create a test element with an arbitrary background-color that is neither black nor\n      // white; high-contrast mode will coerce the color to either black or white. Also ensure that\n      // appending the test element to the DOM does not affect layout by absolutely positioning it\n\n\n      var testElement = this._document.createElement('div');\n\n      testElement.style.backgroundColor = 'rgb(1,2,3)';\n      testElement.style.position = 'absolute';\n\n      this._document.body.appendChild(testElement); // Get the computed style for the background color, collapsing spaces to normalize between\n      // browsers. Once we get this color, we no longer need the test element. Access the `window`\n      // via the document so we can fake it in tests. Note that we have extra null checks, because\n      // this logic will likely run during app bootstrap and throwing can break the entire app.\n\n\n      var documentWindow = this._document.defaultView || window;\n      var computedStyle = documentWindow && documentWindow.getComputedStyle ? documentWindow.getComputedStyle(testElement) : null;\n      var computedColor = (computedStyle && computedStyle.backgroundColor || '').replace(/ /g, '');\n\n      this._document.body.removeChild(testElement);\n\n      switch (computedColor) {\n        case 'rgb(0,0,0)':\n          return 2\n          /* WHITE_ON_BLACK */\n          ;\n\n        case 'rgb(255,255,255)':\n          return 1\n          /* BLACK_ON_WHITE */\n          ;\n      }\n\n      return 0\n      /* NONE */\n      ;\n    }\n    /** Applies CSS classes indicating high-contrast mode to document body (browser-only). */\n\n  }, {\n    key: \"_applyBodyHighContrastModeCssClasses\",\n    value: function _applyBodyHighContrastModeCssClasses() {\n      if (this._platform.isBrowser && this._document.body) {\n        var bodyClasses = this._document.body.classList; // IE11 doesn't support `classList` operations with multiple arguments\n\n        bodyClasses.remove(HIGH_CONTRAST_MODE_ACTIVE_CSS_CLASS);\n        bodyClasses.remove(BLACK_ON_WHITE_CSS_CLASS);\n        bodyClasses.remove(WHITE_ON_BLACK_CSS_CLASS);\n        var mode = this.getHighContrastMode();\n\n        if (mode === 1\n        /* BLACK_ON_WHITE */\n        ) {\n            bodyClasses.add(HIGH_CONTRAST_MODE_ACTIVE_CSS_CLASS);\n            bodyClasses.add(BLACK_ON_WHITE_CSS_CLASS);\n          } else if (mode === 2\n        /* WHITE_ON_BLACK */\n        ) {\n            bodyClasses.add(HIGH_CONTRAST_MODE_ACTIVE_CSS_CLASS);\n            bodyClasses.add(WHITE_ON_BLACK_CSS_CLASS);\n          }\n      }\n    }\n  }]);\n\n  return HighContrastModeDetector;\n}();\n\nHighContrastModeDetector.ɵfac = function HighContrastModeDetector_Factory(t) {\n  return new (t || HighContrastModeDetector)(ɵngcc0.ɵɵinject(ɵngcc1.Platform), ɵngcc0.ɵɵinject(DOCUMENT));\n};\n\nHighContrastModeDetector.ɵprov = ɵɵdefineInjectable({\n  factory: function HighContrastModeDetector_Factory() {\n    return new HighContrastModeDetector(ɵɵinject(Platform), ɵɵinject(DOCUMENT));\n  },\n  token: HighContrastModeDetector,\n  providedIn: \"root\"\n});\n\nHighContrastModeDetector.ctorParameters = function () {\n  return [{\n    type: Platform\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [DOCUMENT]\n    }]\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HighContrastModeDetector, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc1.Platform\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, null);\n})();\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n\nvar A11yModule = function A11yModule(highContrastModeDetector) {\n  _classCallCheck(this, A11yModule);\n\n  highContrastModeDetector._applyBodyHighContrastModeCssClasses();\n};\n\nA11yModule.ɵfac = function A11yModule_Factory(t) {\n  return new (t || A11yModule)(ɵngcc0.ɵɵinject(HighContrastModeDetector));\n};\n\nA11yModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n  type: A11yModule\n});\nA11yModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n  imports: [[PlatformModule, ObserversModule]]\n});\n\nA11yModule.ctorParameters = function () {\n  return [{\n    type: HighContrastModeDetector\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(A11yModule, [{\n    type: NgModule,\n    args: [{\n      imports: [PlatformModule, ObserversModule],\n      declarations: [CdkAriaLive, CdkTrapFocus, CdkMonitorFocus],\n      exports: [CdkAriaLive, CdkTrapFocus, CdkMonitorFocus]\n    }]\n  }], function () {\n    return [{\n      type: HighContrastModeDetector\n    }];\n  }, null);\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(A11yModule, {\n    declarations: function declarations() {\n      return [CdkAriaLive, CdkTrapFocus, CdkMonitorFocus];\n    },\n    imports: function imports() {\n      return [PlatformModule, ObserversModule];\n    },\n    exports: function exports() {\n      return [CdkAriaLive, CdkTrapFocus, CdkMonitorFocus];\n    }\n  });\n})();\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\n\nexport { A11yModule, ActiveDescendantKeyManager, AriaDescriber, CDK_DESCRIBEDBY_HOST_ATTRIBUTE, CDK_DESCRIBEDBY_ID_PREFIX, CdkAriaLive, CdkMonitorFocus, CdkTrapFocus, ConfigurableFocusTrap, ConfigurableFocusTrapFactory, EventListenerFocusTrapInertStrategy, FOCUS_MONITOR_DEFAULT_OPTIONS, FOCUS_TRAP_INERT_STRATEGY, FocusKeyManager, FocusMonitor, FocusTrap, FocusTrapFactory, HighContrastModeDetector, InteractivityChecker, IsFocusableConfig, LIVE_ANNOUNCER_DEFAULT_OPTIONS, LIVE_ANNOUNCER_ELEMENT_TOKEN, LIVE_ANNOUNCER_ELEMENT_TOKEN_FACTORY, ListKeyManager, LiveAnnouncer, MESSAGES_CONTAINER_ID, TOUCH_BUFFER_MS, isFakeMousedownFromScreenReader, isFakeTouchstartFromScreenReader, FocusTrapManager as ɵangular_material_src_cdk_a11y_a11y_a, ConfigurableFocusTrapConfig as ɵangular_material_src_cdk_a11y_a11y_b }; //# sourceMappingURL=a11y.js.map","map":{"version":3,"sources":["C:/Users/Andrei/Desktop/licenta/Licenta2021/frontend/node_modules/@angular/cdk/__ivy_ngcc__/fesm2015/a11y.js"],"names":["DOCUMENT","ɵɵdefineInjectable","ɵɵinject","Injectable","Inject","QueryList","NgZone","Directive","ElementRef","Input","InjectionToken","Optional","EventEmitter","Output","NgModule","Subject","Subscription","of","hasModifierKey","A","Z","ZERO","NINE","END","HOME","LEFT_ARROW","RIGHT_ARROW","UP_ARROW","DOWN_ARROW","TAB","tap","debounceTime","filter","map","take","coerceBooleanProperty","coerceElement","Platform","normalizePassiveListenerOptions","_getShadowRoot","PlatformModule","ContentObserver","ObserversModule","ɵngcc0","ɵngcc1","ɵngcc2","ID_DELIMITER","addAriaReferencedId","el","attr","id","ids","getAriaReferenceIds","some","existingId","trim","push","setAttribute","join","removeAriaReferencedId","filteredIds","val","length","removeAttribute","getAttribute","match","MESSAGES_CONTAINER_ID","CDK_DESCRIBEDBY_ID_PREFIX","CDK_DESCRIBEDBY_HOST_ATTRIBUTE","nextId","messageRegistry","Map","messagesContainer","AriaDescriber","_document","hostElement","message","role","_canBeDescribed","key","getKey","setMessageId","set","messageElement","referenceCount","has","_createMessageElement","_isElementDescribedByMessage","_addMessageReference","_isElementNode","_removeMessageReference","registeredMessage","get","_deleteMessageElement","childNodes","_deleteMessagesContainer","describedElements","querySelectorAll","i","_removeCdkDescribedByReferenceIds","clear","createElement","textContent","_createMessagesContainer","appendChild","removeChild","delete","preExistingContainer","getElementById","parentNode","style","visibility","classList","add","body","element","originalReferenceIds","indexOf","referenceIds","messageId","trimmedMessage","ariaLabel","nodeType","ELEMENT_NODE","ɵfac","AriaDescriber_Factory","t","ɵprov","factory","token","providedIn","ctorParameters","type","undefined","decorators","args","ngDevMode","ɵsetClassMetadata","ListKeyManager","_items","_activeItemIndex","_activeItem","_wrap","_letterKeyStream","_typeaheadSubscription","EMPTY","_vertical","_allowedModifierKeys","_homeAndEnd","_skipPredicateFn","item","disabled","_pressedLetters","tabOut","change","changes","subscribe","newItems","itemArray","toArray","newIndex","predicate","shouldWrap","enabled","direction","_horizontal","keys","debounceInterval","getLabel","Error","unsubscribe","pipe","letter","inputString","items","_getItemsArray","index","toUpperCase","setActiveItem","previousActiveItem","updateActiveItem","next","event","keyCode","modifiers","isModifierAllowed","every","modifier","setNextItemActive","setPreviousItemActive","setFirstItemActive","setLastItemActive","toLocaleUpperCase","String","fromCharCode","preventDefault","_setActiveItemByIndex","_setActiveItemByDelta","activeItem","delta","_setActiveInWrapMode","_setActiveInDefaultMode","fallbackDelta","ActiveDescendantKeyManager","setInactiveStyles","setActiveStyles","FocusKeyManager","arguments","_origin","origin","focus","IsFocusableConfig","ignoreVisibility","InteractivityChecker","_platform","hasAttribute","hasGeometry","getComputedStyle","isBrowser","frameElement","getFrameElement","getWindow","getTabIndexValue","isVisible","nodeName","toLowerCase","tabIndexValue","WEBKIT","IOS","isPotentiallyTabbableIOS","FIREFOX","tabIndex","config","isPotentiallyFocusable","isDisabled","InteractivityChecker_Factory","window","_a","offsetWidth","offsetHeight","getClientRects","isNativeFormElement","isHiddenInput","isInputElement","isAnchorWithHref","isAnchorElement","hasValidTabIndex","isNaN","parseInt","inputType","node","ownerDocument","defaultView","FocusTrap","_element","_checker","_ngZone","deferAnchors","_hasAttached","startAnchorListener","focusLastTabbableElement","endAnchorListener","focusFirstTabbableElement","_enabled","attachAnchors","value","_startAnchor","_endAnchor","_toggleAnchorTabIndex","startAnchor","endAnchor","removeEventListener","runOutsideAngular","_createAnchor","addEventListener","insertBefore","nextSibling","Promise","resolve","_executeOnStable","focusInitialElement","bound","markers","console","warn","_getFirstTabbableElement","_getLastTabbableElement","redirectToElement","querySelector","isFocusable","focusableChild","_getRegionBoundary","root","isTabbable","children","tabbableChild","anchor","isEnabled","fn","isStable","onStable","FocusTrapFactory","deferCaptureElements","FocusTrapFactory_Factory","CdkTrapFocus","_elementRef","_focusTrapFactory","_previouslyFocusedElement","focusTrap","create","nativeElement","_autoCapture","destroy","autoCapture","_captureFocus","hasAttached","autoCaptureChange","firstChange","activeElement","focusInitialElementWhenReady","CdkTrapFocus_Factory","ɵɵdirectiveInject","ɵdir","ɵɵdefineDirective","selectors","inputs","exportAs","features","ɵɵNgOnChangesFeature","propDecorators","selector","ConfigurableFocusTrap","_focusTrapManager","_inertStrategy","defer","register","deregister","preventFocus","toggleAnchors","allowFocus","closest","Node","curr","Element","hasNativeClosest","polyfillClosest","matches","prototype","EventListenerFocusTrapInertStrategy","_listener","e","_trapFocus","target","focusTrapRoot","contains","setTimeout","ConfigurableFocusTrapConfig","FOCUS_TRAP_INERT_STRATEGY","FocusTrapManager","_focusTrapStack","ft","stack","_disable","_enable","splice","FocusTrapManager_Factory","ConfigurableFocusTrapFactory","configObject","ConfigurableFocusTrapFactory_Factory","LIVE_ANNOUNCER_ELEMENT_TOKEN","LIVE_ANNOUNCER_ELEMENT_TOKEN_FACTORY","LIVE_ANNOUNCER_DEFAULT_OPTIONS","LiveAnnouncer","elementToken","_defaultOptions","_liveElement","_createLiveElement","defaultOptions","politeness","duration","clearTimeout","_previousTimeout","elementClass","previousElements","getElementsByClassName","liveEl","LiveAnnouncer_Factory","CdkAriaLive","_liveAnnouncer","_contentObserver","_politeness","_subscription","observe","elementText","_previousAnnouncedText","announce","CdkAriaLive_Factory","isFakeMousedownFromScreenReader","buttons","isFakeTouchstartFromScreenReader","touch","touches","changedTouches","identifier","radiusX","radiusY","TOUCH_BUFFER_MS","FOCUS_MONITOR_DEFAULT_OPTIONS","captureEventListenerOptions","passive","capture","FocusMonitor","document","options","_windowFocused","_elementInfo","_monitoredElementCount","_rootNodeFocusListenerCount","_documentKeydownListener","_lastTouchTarget","_setOriginForCurrentEventQueue","_documentMousedownListener","source","_documentTouchstartListener","_touchTimeoutId","getTarget","_windowFocusListener","_windowFocusTimeoutId","_rootNodeFocusAndBlurListener","handler","_onFocus","_onBlur","parentElement","call","_detectionMode","detectionMode","checkChildren","rootNode","_getDocument","cachedInfo","subject","info","_registerGlobalListeners","elementInfo","complete","_setClasses","_removeGlobalListeners","focusedElement","_getClosestElementsInfo","forEach","currentElement","_originChanged","_info","stopMonitoring","doc","className","shouldSet","remove","_lastFocusOrigin","_wasCausedByTouch","_toggleClass","_originTimeoutId","focusTarget","_getFocusOrigin","relatedTarget","_emitOrigin","run","rootNodeFocusListeners","_getWindow","results","FocusMonitor_Factory","composedPath","CdkMonitorFocus","_focusMonitor","cdkFocusChange","_monitorSubscription","monitor","emit","CdkMonitorFocus_Factory","outputs","BLACK_ON_WHITE_CSS_CLASS","WHITE_ON_BLACK_CSS_CLASS","HIGH_CONTRAST_MODE_ACTIVE_CSS_CLASS","HighContrastModeDetector","testElement","backgroundColor","position","documentWindow","computedStyle","computedColor","replace","bodyClasses","mode","getHighContrastMode","HighContrastModeDetector_Factory","A11yModule","highContrastModeDetector","_applyBodyHighContrastModeCssClasses","A11yModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports","declarations","exports","ngJitMode","ɵɵsetNgModuleScope","ɵangular_material_src_cdk_a11y_a11y_a","ɵangular_material_src_cdk_a11y_a11y_b"],"mappings":"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","sourcesContent":["import { DOCUMENT } from '@angular/common';\r\nimport { ɵɵdefineInjectable, ɵɵinject, Injectable, Inject, QueryList, NgZone, Directive, ElementRef, Input, InjectionToken, Optional, EventEmitter, Output, NgModule } from '@angular/core';\r\nimport { Subject, Subscription, of } from 'rxjs';\r\nimport { hasModifierKey, A, Z, ZERO, NINE, END, HOME, LEFT_ARROW, RIGHT_ARROW, UP_ARROW, DOWN_ARROW, TAB } from '@angular/cdk/keycodes';\r\nimport { tap, debounceTime, filter, map, take } from 'rxjs/operators';\r\nimport { coerceBooleanProperty, coerceElement } from '@angular/cdk/coercion';\r\nimport { Platform, normalizePassiveListenerOptions, _getShadowRoot, PlatformModule } from '@angular/cdk/platform';\r\nimport { ContentObserver, ObserversModule } from '@angular/cdk/observers';\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/** IDs are delimited by an empty space, as per the spec. */\r\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nimport * as ɵngcc2 from '@angular/cdk/observers';\nconst ID_DELIMITER = ' ';\r\n/**\r\n * Adds the given ID to the specified ARIA attribute on an element.\r\n * Used for attributes such as aria-labelledby, aria-owns, etc.\r\n */\r\nfunction addAriaReferencedId(el, attr, id) {\r\n    const ids = getAriaReferenceIds(el, attr);\r\n    if (ids.some(existingId => existingId.trim() == id.trim())) {\r\n        return;\r\n    }\r\n    ids.push(id.trim());\r\n    el.setAttribute(attr, ids.join(ID_DELIMITER));\r\n}\r\n/**\r\n * Removes the given ID from the specified ARIA attribute on an element.\r\n * Used for attributes such as aria-labelledby, aria-owns, etc.\r\n */\r\nfunction removeAriaReferencedId(el, attr, id) {\r\n    const ids = getAriaReferenceIds(el, attr);\r\n    const filteredIds = ids.filter(val => val != id.trim());\r\n    if (filteredIds.length) {\r\n        el.setAttribute(attr, filteredIds.join(ID_DELIMITER));\r\n    }\r\n    else {\r\n        el.removeAttribute(attr);\r\n    }\r\n}\r\n/**\r\n * Gets the list of IDs referenced by the given ARIA attribute on an element.\r\n * Used for attributes such as aria-labelledby, aria-owns, etc.\r\n */\r\nfunction getAriaReferenceIds(el, attr) {\r\n    // Get string array of all individual ids (whitespace delimited) in the attribute value\r\n    return (el.getAttribute(attr) || '').match(/\\S+/g) || [];\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/** ID used for the body container where all messages are appended. */\r\nconst MESSAGES_CONTAINER_ID = 'cdk-describedby-message-container';\r\n/** ID prefix used for each created message element. */\r\nconst CDK_DESCRIBEDBY_ID_PREFIX = 'cdk-describedby-message';\r\n/** Attribute given to each host element that is described by a message element. */\r\nconst CDK_DESCRIBEDBY_HOST_ATTRIBUTE = 'cdk-describedby-host';\r\n/** Global incremental identifier for each registered message element. */\r\nlet nextId = 0;\r\n/** Global map of all registered message elements that have been placed into the document. */\r\nconst messageRegistry = new Map();\r\n/** Container for all registered messages. */\r\nlet messagesContainer = null;\r\n/**\r\n * Utility that creates visually hidden elements with a message content. Useful for elements that\r\n * want to use aria-describedby to further describe themselves without adding additional visual\r\n * content.\r\n */\r\nclass AriaDescriber {\r\n    constructor(_document) {\r\n        this._document = _document;\r\n    }\r\n    describe(hostElement, message, role) {\r\n        if (!this._canBeDescribed(hostElement, message)) {\r\n            return;\r\n        }\r\n        const key = getKey(message, role);\r\n        if (typeof message !== 'string') {\r\n            // We need to ensure that the element has an ID.\r\n            setMessageId(message);\r\n            messageRegistry.set(key, { messageElement: message, referenceCount: 0 });\r\n        }\r\n        else if (!messageRegistry.has(key)) {\r\n            this._createMessageElement(message, role);\r\n        }\r\n        if (!this._isElementDescribedByMessage(hostElement, key)) {\r\n            this._addMessageReference(hostElement, key);\r\n        }\r\n    }\r\n    removeDescription(hostElement, message, role) {\r\n        if (!message || !this._isElementNode(hostElement)) {\r\n            return;\r\n        }\r\n        const key = getKey(message, role);\r\n        if (this._isElementDescribedByMessage(hostElement, key)) {\r\n            this._removeMessageReference(hostElement, key);\r\n        }\r\n        // If the message is a string, it means that it's one that we created for the\r\n        // consumer so we can remove it safely, otherwise we should leave it in place.\r\n        if (typeof message === 'string') {\r\n            const registeredMessage = messageRegistry.get(key);\r\n            if (registeredMessage && registeredMessage.referenceCount === 0) {\r\n                this._deleteMessageElement(key);\r\n            }\r\n        }\r\n        if (messagesContainer && messagesContainer.childNodes.length === 0) {\r\n            this._deleteMessagesContainer();\r\n        }\r\n    }\r\n    /** Unregisters all created message elements and removes the message container. */\r\n    ngOnDestroy() {\r\n        const describedElements = this._document.querySelectorAll(`[${CDK_DESCRIBEDBY_HOST_ATTRIBUTE}]`);\r\n        for (let i = 0; i < describedElements.length; i++) {\r\n            this._removeCdkDescribedByReferenceIds(describedElements[i]);\r\n            describedElements[i].removeAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE);\r\n        }\r\n        if (messagesContainer) {\r\n            this._deleteMessagesContainer();\r\n        }\r\n        messageRegistry.clear();\r\n    }\r\n    /**\r\n     * Creates a new element in the visually hidden message container element with the message\r\n     * as its content and adds it to the message registry.\r\n     */\r\n    _createMessageElement(message, role) {\r\n        const messageElement = this._document.createElement('div');\r\n        setMessageId(messageElement);\r\n        messageElement.textContent = message;\r\n        if (role) {\r\n            messageElement.setAttribute('role', role);\r\n        }\r\n        this._createMessagesContainer();\r\n        messagesContainer.appendChild(messageElement);\r\n        messageRegistry.set(getKey(message, role), { messageElement, referenceCount: 0 });\r\n    }\r\n    /** Deletes the message element from the global messages container. */\r\n    _deleteMessageElement(key) {\r\n        const registeredMessage = messageRegistry.get(key);\r\n        const messageElement = registeredMessage && registeredMessage.messageElement;\r\n        if (messagesContainer && messageElement) {\r\n            messagesContainer.removeChild(messageElement);\r\n        }\r\n        messageRegistry.delete(key);\r\n    }\r\n    /** Creates the global container for all aria-describedby messages. */\r\n    _createMessagesContainer() {\r\n        if (!messagesContainer) {\r\n            const preExistingContainer = this._document.getElementById(MESSAGES_CONTAINER_ID);\r\n            // When going from the server to the client, we may end up in a situation where there's\r\n            // already a container on the page, but we don't have a reference to it. Clear the\r\n            // old container so we don't get duplicates. Doing this, instead of emptying the previous\r\n            // container, should be slightly faster.\r\n            if (preExistingContainer && preExistingContainer.parentNode) {\r\n                preExistingContainer.parentNode.removeChild(preExistingContainer);\r\n            }\r\n            messagesContainer = this._document.createElement('div');\r\n            messagesContainer.id = MESSAGES_CONTAINER_ID;\r\n            // We add `visibility: hidden` in order to prevent text in this container from\r\n            // being searchable by the browser's Ctrl + F functionality.\r\n            // Screen-readers will still read the description for elements with aria-describedby even\r\n            // when the description element is not visible.\r\n            messagesContainer.style.visibility = 'hidden';\r\n            // Even though we use `visibility: hidden`, we still apply `cdk-visually-hidden` so that\r\n            // the description element doesn't impact page layout.\r\n            messagesContainer.classList.add('cdk-visually-hidden');\r\n            this._document.body.appendChild(messagesContainer);\r\n        }\r\n    }\r\n    /** Deletes the global messages container. */\r\n    _deleteMessagesContainer() {\r\n        if (messagesContainer && messagesContainer.parentNode) {\r\n            messagesContainer.parentNode.removeChild(messagesContainer);\r\n            messagesContainer = null;\r\n        }\r\n    }\r\n    /** Removes all cdk-describedby messages that are hosted through the element. */\r\n    _removeCdkDescribedByReferenceIds(element) {\r\n        // Remove all aria-describedby reference IDs that are prefixed by CDK_DESCRIBEDBY_ID_PREFIX\r\n        const originalReferenceIds = getAriaReferenceIds(element, 'aria-describedby')\r\n            .filter(id => id.indexOf(CDK_DESCRIBEDBY_ID_PREFIX) != 0);\r\n        element.setAttribute('aria-describedby', originalReferenceIds.join(' '));\r\n    }\r\n    /**\r\n     * Adds a message reference to the element using aria-describedby and increments the registered\r\n     * message's reference count.\r\n     */\r\n    _addMessageReference(element, key) {\r\n        const registeredMessage = messageRegistry.get(key);\r\n        // Add the aria-describedby reference and set the\r\n        // describedby_host attribute to mark the element.\r\n        addAriaReferencedId(element, 'aria-describedby', registeredMessage.messageElement.id);\r\n        element.setAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE, '');\r\n        registeredMessage.referenceCount++;\r\n    }\r\n    /**\r\n     * Removes a message reference from the element using aria-describedby\r\n     * and decrements the registered message's reference count.\r\n     */\r\n    _removeMessageReference(element, key) {\r\n        const registeredMessage = messageRegistry.get(key);\r\n        registeredMessage.referenceCount--;\r\n        removeAriaReferencedId(element, 'aria-describedby', registeredMessage.messageElement.id);\r\n        element.removeAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE);\r\n    }\r\n    /** Returns true if the element has been described by the provided message ID. */\r\n    _isElementDescribedByMessage(element, key) {\r\n        const referenceIds = getAriaReferenceIds(element, 'aria-describedby');\r\n        const registeredMessage = messageRegistry.get(key);\r\n        const messageId = registeredMessage && registeredMessage.messageElement.id;\r\n        return !!messageId && referenceIds.indexOf(messageId) != -1;\r\n    }\r\n    /** Determines whether a message can be described on a particular element. */\r\n    _canBeDescribed(element, message) {\r\n        if (!this._isElementNode(element)) {\r\n            return false;\r\n        }\r\n        if (message && typeof message === 'object') {\r\n            // We'd have to make some assumptions about the description element's text, if the consumer\r\n            // passed in an element. Assume that if an element is passed in, the consumer has verified\r\n            // that it can be used as a description.\r\n            return true;\r\n        }\r\n        const trimmedMessage = message == null ? '' : `${message}`.trim();\r\n        const ariaLabel = element.getAttribute('aria-label');\r\n        // We shouldn't set descriptions if they're exactly the same as the `aria-label` of the\r\n        // element, because screen readers will end up reading out the same text twice in a row.\r\n        return trimmedMessage ? (!ariaLabel || ariaLabel.trim() !== trimmedMessage) : false;\r\n    }\r\n    /** Checks whether a node is an Element node. */\r\n    _isElementNode(element) {\r\n        return element.nodeType === this._document.ELEMENT_NODE;\r\n    }\r\n}\nAriaDescriber.ɵfac = function AriaDescriber_Factory(t) { return new (t || AriaDescriber)(ɵngcc0.ɵɵinject(DOCUMENT)); };\r\nAriaDescriber.ɵprov = ɵɵdefineInjectable({ factory: function AriaDescriber_Factory() { return new AriaDescriber(ɵɵinject(DOCUMENT)); }, token: AriaDescriber, providedIn: \"root\" });\r\nAriaDescriber.ctorParameters = () => [\r\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\r\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(AriaDescriber, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, null); })();\r\n/** Gets a key that can be used to look messages up in the registry. */\r\nfunction getKey(message, role) {\r\n    return typeof message === 'string' ? `${role || ''}/${message}` : message;\r\n}\r\n/** Assigns a unique ID to an element, if it doesn't have one already. */\r\nfunction setMessageId(element) {\r\n    if (!element.id) {\r\n        element.id = `${CDK_DESCRIBEDBY_ID_PREFIX}-${nextId++}`;\r\n    }\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * This class manages keyboard events for selectable lists. If you pass it a query list\r\n * of items, it will set the active item correctly when arrow events occur.\r\n */\r\nclass ListKeyManager {\r\n    constructor(_items) {\r\n        this._items = _items;\r\n        this._activeItemIndex = -1;\r\n        this._activeItem = null;\r\n        this._wrap = false;\r\n        this._letterKeyStream = new Subject();\r\n        this._typeaheadSubscription = Subscription.EMPTY;\r\n        this._vertical = true;\r\n        this._allowedModifierKeys = [];\r\n        this._homeAndEnd = false;\r\n        /**\r\n         * Predicate function that can be used to check whether an item should be skipped\r\n         * by the key manager. By default, disabled items are skipped.\r\n         */\r\n        this._skipPredicateFn = (item) => item.disabled;\r\n        // Buffer for the letters that the user has pressed when the typeahead option is turned on.\r\n        this._pressedLetters = [];\r\n        /**\r\n         * Stream that emits any time the TAB key is pressed, so components can react\r\n         * when focus is shifted off of the list.\r\n         */\r\n        this.tabOut = new Subject();\r\n        /** Stream that emits whenever the active item of the list manager changes. */\r\n        this.change = new Subject();\r\n        // We allow for the items to be an array because, in some cases, the consumer may\r\n        // not have access to a QueryList of the items they want to manage (e.g. when the\r\n        // items aren't being collected via `ViewChildren` or `ContentChildren`).\r\n        if (_items instanceof QueryList) {\r\n            _items.changes.subscribe((newItems) => {\r\n                if (this._activeItem) {\r\n                    const itemArray = newItems.toArray();\r\n                    const newIndex = itemArray.indexOf(this._activeItem);\r\n                    if (newIndex > -1 && newIndex !== this._activeItemIndex) {\r\n                        this._activeItemIndex = newIndex;\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * Sets the predicate function that determines which items should be skipped by the\r\n     * list key manager.\r\n     * @param predicate Function that determines whether the given item should be skipped.\r\n     */\r\n    skipPredicate(predicate) {\r\n        this._skipPredicateFn = predicate;\r\n        return this;\r\n    }\r\n    /**\r\n     * Configures wrapping mode, which determines whether the active item will wrap to\r\n     * the other end of list when there are no more items in the given direction.\r\n     * @param shouldWrap Whether the list should wrap when reaching the end.\r\n     */\r\n    withWrap(shouldWrap = true) {\r\n        this._wrap = shouldWrap;\r\n        return this;\r\n    }\r\n    /**\r\n     * Configures whether the key manager should be able to move the selection vertically.\r\n     * @param enabled Whether vertical selection should be enabled.\r\n     */\r\n    withVerticalOrientation(enabled = true) {\r\n        this._vertical = enabled;\r\n        return this;\r\n    }\r\n    /**\r\n     * Configures the key manager to move the selection horizontally.\r\n     * Passing in `null` will disable horizontal movement.\r\n     * @param direction Direction in which the selection can be moved.\r\n     */\r\n    withHorizontalOrientation(direction) {\r\n        this._horizontal = direction;\r\n        return this;\r\n    }\r\n    /**\r\n     * Modifier keys which are allowed to be held down and whose default actions will be prevented\r\n     * as the user is pressing the arrow keys. Defaults to not allowing any modifier keys.\r\n     */\r\n    withAllowedModifierKeys(keys) {\r\n        this._allowedModifierKeys = keys;\r\n        return this;\r\n    }\r\n    /**\r\n     * Turns on typeahead mode which allows users to set the active item by typing.\r\n     * @param debounceInterval Time to wait after the last keystroke before setting the active item.\r\n     */\r\n    withTypeAhead(debounceInterval = 200) {\r\n        if ((typeof ngDevMode === 'undefined' || ngDevMode) && (this._items.length &&\r\n            this._items.some(item => typeof item.getLabel !== 'function'))) {\r\n            throw Error('ListKeyManager items in typeahead mode must implement the `getLabel` method.');\r\n        }\r\n        this._typeaheadSubscription.unsubscribe();\r\n        // Debounce the presses of non-navigational keys, collect the ones that correspond to letters\r\n        // and convert those letters back into a string. Afterwards find the first item that starts\r\n        // with that string and select it.\r\n        this._typeaheadSubscription = this._letterKeyStream.pipe(tap(letter => this._pressedLetters.push(letter)), debounceTime(debounceInterval), filter(() => this._pressedLetters.length > 0), map(() => this._pressedLetters.join(''))).subscribe(inputString => {\r\n            const items = this._getItemsArray();\r\n            // Start at 1 because we want to start searching at the item immediately\r\n            // following the current active item.\r\n            for (let i = 1; i < items.length + 1; i++) {\r\n                const index = (this._activeItemIndex + i) % items.length;\r\n                const item = items[index];\r\n                if (!this._skipPredicateFn(item) &&\r\n                    item.getLabel().toUpperCase().trim().indexOf(inputString) === 0) {\r\n                    this.setActiveItem(index);\r\n                    break;\r\n                }\r\n            }\r\n            this._pressedLetters = [];\r\n        });\r\n        return this;\r\n    }\r\n    /**\r\n     * Configures the key manager to activate the first and last items\r\n     * respectively when the Home or End key is pressed.\r\n     * @param enabled Whether pressing the Home or End key activates the first/last item.\r\n     */\r\n    withHomeAndEnd(enabled = true) {\r\n        this._homeAndEnd = enabled;\r\n        return this;\r\n    }\r\n    setActiveItem(item) {\r\n        const previousActiveItem = this._activeItem;\r\n        this.updateActiveItem(item);\r\n        if (this._activeItem !== previousActiveItem) {\r\n            this.change.next(this._activeItemIndex);\r\n        }\r\n    }\r\n    /**\r\n     * Sets the active item depending on the key event passed in.\r\n     * @param event Keyboard event to be used for determining which element should be active.\r\n     */\r\n    onKeydown(event) {\r\n        const keyCode = event.keyCode;\r\n        const modifiers = ['altKey', 'ctrlKey', 'metaKey', 'shiftKey'];\r\n        const isModifierAllowed = modifiers.every(modifier => {\r\n            return !event[modifier] || this._allowedModifierKeys.indexOf(modifier) > -1;\r\n        });\r\n        switch (keyCode) {\r\n            case TAB:\r\n                this.tabOut.next();\r\n                return;\r\n            case DOWN_ARROW:\r\n                if (this._vertical && isModifierAllowed) {\r\n                    this.setNextItemActive();\r\n                    break;\r\n                }\r\n                else {\r\n                    return;\r\n                }\r\n            case UP_ARROW:\r\n                if (this._vertical && isModifierAllowed) {\r\n                    this.setPreviousItemActive();\r\n                    break;\r\n                }\r\n                else {\r\n                    return;\r\n                }\r\n            case RIGHT_ARROW:\r\n                if (this._horizontal && isModifierAllowed) {\r\n                    this._horizontal === 'rtl' ? this.setPreviousItemActive() : this.setNextItemActive();\r\n                    break;\r\n                }\r\n                else {\r\n                    return;\r\n                }\r\n            case LEFT_ARROW:\r\n                if (this._horizontal && isModifierAllowed) {\r\n                    this._horizontal === 'rtl' ? this.setNextItemActive() : this.setPreviousItemActive();\r\n                    break;\r\n                }\r\n                else {\r\n                    return;\r\n                }\r\n            case HOME:\r\n                if (this._homeAndEnd && isModifierAllowed) {\r\n                    this.setFirstItemActive();\r\n                    break;\r\n                }\r\n                else {\r\n                    return;\r\n                }\r\n            case END:\r\n                if (this._homeAndEnd && isModifierAllowed) {\r\n                    this.setLastItemActive();\r\n                    break;\r\n                }\r\n                else {\r\n                    return;\r\n                }\r\n            default:\r\n                if (isModifierAllowed || hasModifierKey(event, 'shiftKey')) {\r\n                    // Attempt to use the `event.key` which also maps it to the user's keyboard language,\r\n                    // otherwise fall back to resolving alphanumeric characters via the keyCode.\r\n                    if (event.key && event.key.length === 1) {\r\n                        this._letterKeyStream.next(event.key.toLocaleUpperCase());\r\n                    }\r\n                    else if ((keyCode >= A && keyCode <= Z) || (keyCode >= ZERO && keyCode <= NINE)) {\r\n                        this._letterKeyStream.next(String.fromCharCode(keyCode));\r\n                    }\r\n                }\r\n                // Note that we return here, in order to avoid preventing\r\n                // the default action of non-navigational keys.\r\n                return;\r\n        }\r\n        this._pressedLetters = [];\r\n        event.preventDefault();\r\n    }\r\n    /** Index of the currently active item. */\r\n    get activeItemIndex() {\r\n        return this._activeItemIndex;\r\n    }\r\n    /** The active item. */\r\n    get activeItem() {\r\n        return this._activeItem;\r\n    }\r\n    /** Gets whether the user is currently typing into the manager using the typeahead feature. */\r\n    isTyping() {\r\n        return this._pressedLetters.length > 0;\r\n    }\r\n    /** Sets the active item to the first enabled item in the list. */\r\n    setFirstItemActive() {\r\n        this._setActiveItemByIndex(0, 1);\r\n    }\r\n    /** Sets the active item to the last enabled item in the list. */\r\n    setLastItemActive() {\r\n        this._setActiveItemByIndex(this._items.length - 1, -1);\r\n    }\r\n    /** Sets the active item to the next enabled item in the list. */\r\n    setNextItemActive() {\r\n        this._activeItemIndex < 0 ? this.setFirstItemActive() : this._setActiveItemByDelta(1);\r\n    }\r\n    /** Sets the active item to a previous enabled item in the list. */\r\n    setPreviousItemActive() {\r\n        this._activeItemIndex < 0 && this._wrap ? this.setLastItemActive()\r\n            : this._setActiveItemByDelta(-1);\r\n    }\r\n    updateActiveItem(item) {\r\n        const itemArray = this._getItemsArray();\r\n        const index = typeof item === 'number' ? item : itemArray.indexOf(item);\r\n        const activeItem = itemArray[index];\r\n        // Explicitly check for `null` and `undefined` because other falsy values are valid.\r\n        this._activeItem = activeItem == null ? null : activeItem;\r\n        this._activeItemIndex = index;\r\n    }\r\n    /**\r\n     * This method sets the active item, given a list of items and the delta between the\r\n     * currently active item and the new active item. It will calculate differently\r\n     * depending on whether wrap mode is turned on.\r\n     */\r\n    _setActiveItemByDelta(delta) {\r\n        this._wrap ? this._setActiveInWrapMode(delta) : this._setActiveInDefaultMode(delta);\r\n    }\r\n    /**\r\n     * Sets the active item properly given \"wrap\" mode. In other words, it will continue to move\r\n     * down the list until it finds an item that is not disabled, and it will wrap if it\r\n     * encounters either end of the list.\r\n     */\r\n    _setActiveInWrapMode(delta) {\r\n        const items = this._getItemsArray();\r\n        for (let i = 1; i <= items.length; i++) {\r\n            const index = (this._activeItemIndex + (delta * i) + items.length) % items.length;\r\n            const item = items[index];\r\n            if (!this._skipPredicateFn(item)) {\r\n                this.setActiveItem(index);\r\n                return;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Sets the active item properly given the default mode. In other words, it will\r\n     * continue to move down the list until it finds an item that is not disabled. If\r\n     * it encounters either end of the list, it will stop and not wrap.\r\n     */\r\n    _setActiveInDefaultMode(delta) {\r\n        this._setActiveItemByIndex(this._activeItemIndex + delta, delta);\r\n    }\r\n    /**\r\n     * Sets the active item to the first enabled item starting at the index specified. If the\r\n     * item is disabled, it will move in the fallbackDelta direction until it either\r\n     * finds an enabled item or encounters the end of the list.\r\n     */\r\n    _setActiveItemByIndex(index, fallbackDelta) {\r\n        const items = this._getItemsArray();\r\n        if (!items[index]) {\r\n            return;\r\n        }\r\n        while (this._skipPredicateFn(items[index])) {\r\n            index += fallbackDelta;\r\n            if (!items[index]) {\r\n                return;\r\n            }\r\n        }\r\n        this.setActiveItem(index);\r\n    }\r\n    /** Returns the items as an array. */\r\n    _getItemsArray() {\r\n        return this._items instanceof QueryList ? this._items.toArray() : this._items;\r\n    }\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nclass ActiveDescendantKeyManager extends ListKeyManager {\r\n    setActiveItem(index) {\r\n        if (this.activeItem) {\r\n            this.activeItem.setInactiveStyles();\r\n        }\r\n        super.setActiveItem(index);\r\n        if (this.activeItem) {\r\n            this.activeItem.setActiveStyles();\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nclass FocusKeyManager extends ListKeyManager {\r\n    constructor() {\r\n        super(...arguments);\r\n        this._origin = 'program';\r\n    }\r\n    /**\r\n     * Sets the focus origin that will be passed in to the items for any subsequent `focus` calls.\r\n     * @param origin Focus origin to be used when focusing items.\r\n     */\r\n    setFocusOrigin(origin) {\r\n        this._origin = origin;\r\n        return this;\r\n    }\r\n    setActiveItem(item) {\r\n        super.setActiveItem(item);\r\n        if (this.activeItem) {\r\n            this.activeItem.focus(this._origin);\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Configuration for the isFocusable method.\r\n */\r\nclass IsFocusableConfig {\r\n    constructor() {\r\n        /**\r\n         * Whether to count an element as focusable even if it is not currently visible.\r\n         */\r\n        this.ignoreVisibility = false;\r\n    }\r\n}\r\n// The InteractivityChecker leans heavily on the ally.js accessibility utilities.\r\n// Methods like `isTabbable` are only covering specific edge-cases for the browsers which are\r\n// supported.\r\n/**\r\n * Utility for checking the interactivity of an element, such as whether is is focusable or\r\n * tabbable.\r\n */\r\nclass InteractivityChecker {\r\n    constructor(_platform) {\r\n        this._platform = _platform;\r\n    }\r\n    /**\r\n     * Gets whether an element is disabled.\r\n     *\r\n     * @param element Element to be checked.\r\n     * @returns Whether the element is disabled.\r\n     */\r\n    isDisabled(element) {\r\n        // This does not capture some cases, such as a non-form control with a disabled attribute or\r\n        // a form control inside of a disabled form, but should capture the most common cases.\r\n        return element.hasAttribute('disabled');\r\n    }\r\n    /**\r\n     * Gets whether an element is visible for the purposes of interactivity.\r\n     *\r\n     * This will capture states like `display: none` and `visibility: hidden`, but not things like\r\n     * being clipped by an `overflow: hidden` parent or being outside the viewport.\r\n     *\r\n     * @returns Whether the element is visible.\r\n     */\r\n    isVisible(element) {\r\n        return hasGeometry(element) && getComputedStyle(element).visibility === 'visible';\r\n    }\r\n    /**\r\n     * Gets whether an element can be reached via Tab key.\r\n     * Assumes that the element has already been checked with isFocusable.\r\n     *\r\n     * @param element Element to be checked.\r\n     * @returns Whether the element is tabbable.\r\n     */\r\n    isTabbable(element) {\r\n        // Nothing is tabbable on the server 😎\r\n        if (!this._platform.isBrowser) {\r\n            return false;\r\n        }\r\n        const frameElement = getFrameElement(getWindow(element));\r\n        if (frameElement) {\r\n            // Frame elements inherit their tabindex onto all child elements.\r\n            if (getTabIndexValue(frameElement) === -1) {\r\n                return false;\r\n            }\r\n            // Browsers disable tabbing to an element inside of an invisible frame.\r\n            if (!this.isVisible(frameElement)) {\r\n                return false;\r\n            }\r\n        }\r\n        let nodeName = element.nodeName.toLowerCase();\r\n        let tabIndexValue = getTabIndexValue(element);\r\n        if (element.hasAttribute('contenteditable')) {\r\n            return tabIndexValue !== -1;\r\n        }\r\n        if (nodeName === 'iframe' || nodeName === 'object') {\r\n            // The frame or object's content may be tabbable depending on the content, but it's\r\n            // not possibly to reliably detect the content of the frames. We always consider such\r\n            // elements as non-tabbable.\r\n            return false;\r\n        }\r\n        // In iOS, the browser only considers some specific elements as tabbable.\r\n        if (this._platform.WEBKIT && this._platform.IOS && !isPotentiallyTabbableIOS(element)) {\r\n            return false;\r\n        }\r\n        if (nodeName === 'audio') {\r\n            // Audio elements without controls enabled are never tabbable, regardless\r\n            // of the tabindex attribute explicitly being set.\r\n            if (!element.hasAttribute('controls')) {\r\n                return false;\r\n            }\r\n            // Audio elements with controls are by default tabbable unless the\r\n            // tabindex attribute is set to `-1` explicitly.\r\n            return tabIndexValue !== -1;\r\n        }\r\n        if (nodeName === 'video') {\r\n            // For all video elements, if the tabindex attribute is set to `-1`, the video\r\n            // is not tabbable. Note: We cannot rely on the default `HTMLElement.tabIndex`\r\n            // property as that one is set to `-1` in Chrome, Edge and Safari v13.1. The\r\n            // tabindex attribute is the source of truth here.\r\n            if (tabIndexValue === -1) {\r\n                return false;\r\n            }\r\n            // If the tabindex is explicitly set, and not `-1` (as per check before), the\r\n            // video element is always tabbable (regardless of whether it has controls or not).\r\n            if (tabIndexValue !== null) {\r\n                return true;\r\n            }\r\n            // Otherwise (when no explicit tabindex is set), a video is only tabbable if it\r\n            // has controls enabled. Firefox is special as videos are always tabbable regardless\r\n            // of whether there are controls or not.\r\n            return this._platform.FIREFOX || element.hasAttribute('controls');\r\n        }\r\n        return element.tabIndex >= 0;\r\n    }\r\n    /**\r\n     * Gets whether an element can be focused by the user.\r\n     *\r\n     * @param element Element to be checked.\r\n     * @param config The config object with options to customize this method's behavior\r\n     * @returns Whether the element is focusable.\r\n     */\r\n    isFocusable(element, config) {\r\n        // Perform checks in order of left to most expensive.\r\n        // Again, naive approach that does not capture many edge cases and browser quirks.\r\n        return isPotentiallyFocusable(element) && !this.isDisabled(element) &&\r\n            ((config === null || config === void 0 ? void 0 : config.ignoreVisibility) || this.isVisible(element));\r\n    }\r\n}\nInteractivityChecker.ɵfac = function InteractivityChecker_Factory(t) { return new (t || InteractivityChecker)(ɵngcc0.ɵɵinject(ɵngcc1.Platform)); };\r\nInteractivityChecker.ɵprov = ɵɵdefineInjectable({ factory: function InteractivityChecker_Factory() { return new InteractivityChecker(ɵɵinject(Platform)); }, token: InteractivityChecker, providedIn: \"root\" });\r\nInteractivityChecker.ctorParameters = () => [\r\n    { type: Platform }\r\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(InteractivityChecker, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: ɵngcc1.Platform }]; }, null); })();\r\n/**\r\n * Returns the frame element from a window object. Since browsers like MS Edge throw errors if\r\n * the frameElement property is being accessed from a different host address, this property\r\n * should be accessed carefully.\r\n */\r\nfunction getFrameElement(window) {\r\n    try {\r\n        return window.frameElement;\r\n    }\r\n    catch (_a) {\r\n        return null;\r\n    }\r\n}\r\n/** Checks whether the specified element has any geometry / rectangles. */\r\nfunction hasGeometry(element) {\r\n    // Use logic from jQuery to check for an invisible element.\r\n    // See https://github.com/jquery/jquery/blob/master/src/css/hiddenVisibleSelectors.js#L12\r\n    return !!(element.offsetWidth || element.offsetHeight ||\r\n        (typeof element.getClientRects === 'function' && element.getClientRects().length));\r\n}\r\n/** Gets whether an element's  */\r\nfunction isNativeFormElement(element) {\r\n    let nodeName = element.nodeName.toLowerCase();\r\n    return nodeName === 'input' ||\r\n        nodeName === 'select' ||\r\n        nodeName === 'button' ||\r\n        nodeName === 'textarea';\r\n}\r\n/** Gets whether an element is an `<input type=\"hidden\">`. */\r\nfunction isHiddenInput(element) {\r\n    return isInputElement(element) && element.type == 'hidden';\r\n}\r\n/** Gets whether an element is an anchor that has an href attribute. */\r\nfunction isAnchorWithHref(element) {\r\n    return isAnchorElement(element) && element.hasAttribute('href');\r\n}\r\n/** Gets whether an element is an input element. */\r\nfunction isInputElement(element) {\r\n    return element.nodeName.toLowerCase() == 'input';\r\n}\r\n/** Gets whether an element is an anchor element. */\r\nfunction isAnchorElement(element) {\r\n    return element.nodeName.toLowerCase() == 'a';\r\n}\r\n/** Gets whether an element has a valid tabindex. */\r\nfunction hasValidTabIndex(element) {\r\n    if (!element.hasAttribute('tabindex') || element.tabIndex === undefined) {\r\n        return false;\r\n    }\r\n    let tabIndex = element.getAttribute('tabindex');\r\n    // IE11 parses tabindex=\"\" as the value \"-32768\"\r\n    if (tabIndex == '-32768') {\r\n        return false;\r\n    }\r\n    return !!(tabIndex && !isNaN(parseInt(tabIndex, 10)));\r\n}\r\n/**\r\n * Returns the parsed tabindex from the element attributes instead of returning the\r\n * evaluated tabindex from the browsers defaults.\r\n */\r\nfunction getTabIndexValue(element) {\r\n    if (!hasValidTabIndex(element)) {\r\n        return null;\r\n    }\r\n    // See browser issue in Gecko https://bugzilla.mozilla.org/show_bug.cgi?id=1128054\r\n    const tabIndex = parseInt(element.getAttribute('tabindex') || '', 10);\r\n    return isNaN(tabIndex) ? -1 : tabIndex;\r\n}\r\n/** Checks whether the specified element is potentially tabbable on iOS */\r\nfunction isPotentiallyTabbableIOS(element) {\r\n    let nodeName = element.nodeName.toLowerCase();\r\n    let inputType = nodeName === 'input' && element.type;\r\n    return inputType === 'text'\r\n        || inputType === 'password'\r\n        || nodeName === 'select'\r\n        || nodeName === 'textarea';\r\n}\r\n/**\r\n * Gets whether an element is potentially focusable without taking current visible/disabled state\r\n * into account.\r\n */\r\nfunction isPotentiallyFocusable(element) {\r\n    // Inputs are potentially focusable *unless* they're type=\"hidden\".\r\n    if (isHiddenInput(element)) {\r\n        return false;\r\n    }\r\n    return isNativeFormElement(element) ||\r\n        isAnchorWithHref(element) ||\r\n        element.hasAttribute('contenteditable') ||\r\n        hasValidTabIndex(element);\r\n}\r\n/** Gets the parent window of a DOM node with regards of being inside of an iframe. */\r\nfunction getWindow(node) {\r\n    // ownerDocument is null if `node` itself *is* a document.\r\n    return node.ownerDocument && node.ownerDocument.defaultView || window;\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Class that allows for trapping focus within a DOM element.\r\n *\r\n * This class currently uses a relatively simple approach to focus trapping.\r\n * It assumes that the tab order is the same as DOM order, which is not necessarily true.\r\n * Things like `tabIndex > 0`, flex `order`, and shadow roots can cause the two to be misaligned.\r\n *\r\n * @deprecated Use `ConfigurableFocusTrap` instead.\r\n * @breaking-change 11.0.0\r\n */\r\nclass FocusTrap {\r\n    constructor(_element, _checker, _ngZone, _document, deferAnchors = false) {\r\n        this._element = _element;\r\n        this._checker = _checker;\r\n        this._ngZone = _ngZone;\r\n        this._document = _document;\r\n        this._hasAttached = false;\r\n        // Event listeners for the anchors. Need to be regular functions so that we can unbind them later.\r\n        this.startAnchorListener = () => this.focusLastTabbableElement();\r\n        this.endAnchorListener = () => this.focusFirstTabbableElement();\r\n        this._enabled = true;\r\n        if (!deferAnchors) {\r\n            this.attachAnchors();\r\n        }\r\n    }\r\n    /** Whether the focus trap is active. */\r\n    get enabled() { return this._enabled; }\r\n    set enabled(value) {\r\n        this._enabled = value;\r\n        if (this._startAnchor && this._endAnchor) {\r\n            this._toggleAnchorTabIndex(value, this._startAnchor);\r\n            this._toggleAnchorTabIndex(value, this._endAnchor);\r\n        }\r\n    }\r\n    /** Destroys the focus trap by cleaning up the anchors. */\r\n    destroy() {\r\n        const startAnchor = this._startAnchor;\r\n        const endAnchor = this._endAnchor;\r\n        if (startAnchor) {\r\n            startAnchor.removeEventListener('focus', this.startAnchorListener);\r\n            if (startAnchor.parentNode) {\r\n                startAnchor.parentNode.removeChild(startAnchor);\r\n            }\r\n        }\r\n        if (endAnchor) {\r\n            endAnchor.removeEventListener('focus', this.endAnchorListener);\r\n            if (endAnchor.parentNode) {\r\n                endAnchor.parentNode.removeChild(endAnchor);\r\n            }\r\n        }\r\n        this._startAnchor = this._endAnchor = null;\r\n        this._hasAttached = false;\r\n    }\r\n    /**\r\n     * Inserts the anchors into the DOM. This is usually done automatically\r\n     * in the constructor, but can be deferred for cases like directives with `*ngIf`.\r\n     * @returns Whether the focus trap managed to attach successfully. This may not be the case\r\n     * if the target element isn't currently in the DOM.\r\n     */\r\n    attachAnchors() {\r\n        // If we're not on the browser, there can be no focus to trap.\r\n        if (this._hasAttached) {\r\n            return true;\r\n        }\r\n        this._ngZone.runOutsideAngular(() => {\r\n            if (!this._startAnchor) {\r\n                this._startAnchor = this._createAnchor();\r\n                this._startAnchor.addEventListener('focus', this.startAnchorListener);\r\n            }\r\n            if (!this._endAnchor) {\r\n                this._endAnchor = this._createAnchor();\r\n                this._endAnchor.addEventListener('focus', this.endAnchorListener);\r\n            }\r\n        });\r\n        if (this._element.parentNode) {\r\n            this._element.parentNode.insertBefore(this._startAnchor, this._element);\r\n            this._element.parentNode.insertBefore(this._endAnchor, this._element.nextSibling);\r\n            this._hasAttached = true;\r\n        }\r\n        return this._hasAttached;\r\n    }\r\n    /**\r\n     * Waits for the zone to stabilize, then either focuses the first element that the\r\n     * user specified, or the first tabbable element.\r\n     * @returns Returns a promise that resolves with a boolean, depending\r\n     * on whether focus was moved successfully.\r\n     */\r\n    focusInitialElementWhenReady() {\r\n        return new Promise(resolve => {\r\n            this._executeOnStable(() => resolve(this.focusInitialElement()));\r\n        });\r\n    }\r\n    /**\r\n     * Waits for the zone to stabilize, then focuses\r\n     * the first tabbable element within the focus trap region.\r\n     * @returns Returns a promise that resolves with a boolean, depending\r\n     * on whether focus was moved successfully.\r\n     */\r\n    focusFirstTabbableElementWhenReady() {\r\n        return new Promise(resolve => {\r\n            this._executeOnStable(() => resolve(this.focusFirstTabbableElement()));\r\n        });\r\n    }\r\n    /**\r\n     * Waits for the zone to stabilize, then focuses\r\n     * the last tabbable element within the focus trap region.\r\n     * @returns Returns a promise that resolves with a boolean, depending\r\n     * on whether focus was moved successfully.\r\n     */\r\n    focusLastTabbableElementWhenReady() {\r\n        return new Promise(resolve => {\r\n            this._executeOnStable(() => resolve(this.focusLastTabbableElement()));\r\n        });\r\n    }\r\n    /**\r\n     * Get the specified boundary element of the trapped region.\r\n     * @param bound The boundary to get (start or end of trapped region).\r\n     * @returns The boundary element.\r\n     */\r\n    _getRegionBoundary(bound) {\r\n        // Contains the deprecated version of selector, for temporary backwards comparability.\r\n        let markers = this._element.querySelectorAll(`[cdk-focus-region-${bound}], ` +\r\n            `[cdkFocusRegion${bound}], ` +\r\n            `[cdk-focus-${bound}]`);\r\n        for (let i = 0; i < markers.length; i++) {\r\n            // @breaking-change 8.0.0\r\n            if (markers[i].hasAttribute(`cdk-focus-${bound}`)) {\r\n                console.warn(`Found use of deprecated attribute 'cdk-focus-${bound}', ` +\r\n                    `use 'cdkFocusRegion${bound}' instead. The deprecated ` +\r\n                    `attribute will be removed in 8.0.0.`, markers[i]);\r\n            }\r\n            else if (markers[i].hasAttribute(`cdk-focus-region-${bound}`)) {\r\n                console.warn(`Found use of deprecated attribute 'cdk-focus-region-${bound}', ` +\r\n                    `use 'cdkFocusRegion${bound}' instead. The deprecated attribute ` +\r\n                    `will be removed in 8.0.0.`, markers[i]);\r\n            }\r\n        }\r\n        if (bound == 'start') {\r\n            return markers.length ? markers[0] : this._getFirstTabbableElement(this._element);\r\n        }\r\n        return markers.length ?\r\n            markers[markers.length - 1] : this._getLastTabbableElement(this._element);\r\n    }\r\n    /**\r\n     * Focuses the element that should be focused when the focus trap is initialized.\r\n     * @returns Whether focus was moved successfully.\r\n     */\r\n    focusInitialElement() {\r\n        // Contains the deprecated version of selector, for temporary backwards comparability.\r\n        const redirectToElement = this._element.querySelector(`[cdk-focus-initial], ` +\r\n            `[cdkFocusInitial]`);\r\n        if (redirectToElement) {\r\n            // @breaking-change 8.0.0\r\n            if (redirectToElement.hasAttribute(`cdk-focus-initial`)) {\r\n                console.warn(`Found use of deprecated attribute 'cdk-focus-initial', ` +\r\n                    `use 'cdkFocusInitial' instead. The deprecated attribute ` +\r\n                    `will be removed in 8.0.0`, redirectToElement);\r\n            }\r\n            // Warn the consumer if the element they've pointed to\r\n            // isn't focusable, when not in production mode.\r\n            if ((typeof ngDevMode === 'undefined' || ngDevMode) &&\r\n                !this._checker.isFocusable(redirectToElement)) {\r\n                console.warn(`Element matching '[cdkFocusInitial]' is not focusable.`, redirectToElement);\r\n            }\r\n            if (!this._checker.isFocusable(redirectToElement)) {\r\n                const focusableChild = this._getFirstTabbableElement(redirectToElement);\r\n                focusableChild === null || focusableChild === void 0 ? void 0 : focusableChild.focus();\r\n                return !!focusableChild;\r\n            }\r\n            redirectToElement.focus();\r\n            return true;\r\n        }\r\n        return this.focusFirstTabbableElement();\r\n    }\r\n    /**\r\n     * Focuses the first tabbable element within the focus trap region.\r\n     * @returns Whether focus was moved successfully.\r\n     */\r\n    focusFirstTabbableElement() {\r\n        const redirectToElement = this._getRegionBoundary('start');\r\n        if (redirectToElement) {\r\n            redirectToElement.focus();\r\n        }\r\n        return !!redirectToElement;\r\n    }\r\n    /**\r\n     * Focuses the last tabbable element within the focus trap region.\r\n     * @returns Whether focus was moved successfully.\r\n     */\r\n    focusLastTabbableElement() {\r\n        const redirectToElement = this._getRegionBoundary('end');\r\n        if (redirectToElement) {\r\n            redirectToElement.focus();\r\n        }\r\n        return !!redirectToElement;\r\n    }\r\n    /**\r\n     * Checks whether the focus trap has successfully been attached.\r\n     */\r\n    hasAttached() {\r\n        return this._hasAttached;\r\n    }\r\n    /** Get the first tabbable element from a DOM subtree (inclusive). */\r\n    _getFirstTabbableElement(root) {\r\n        if (this._checker.isFocusable(root) && this._checker.isTabbable(root)) {\r\n            return root;\r\n        }\r\n        // Iterate in DOM order. Note that IE doesn't have `children` for SVG so we fall\r\n        // back to `childNodes` which includes text nodes, comments etc.\r\n        let children = root.children || root.childNodes;\r\n        for (let i = 0; i < children.length; i++) {\r\n            let tabbableChild = children[i].nodeType === this._document.ELEMENT_NODE ?\r\n                this._getFirstTabbableElement(children[i]) :\r\n                null;\r\n            if (tabbableChild) {\r\n                return tabbableChild;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    /** Get the last tabbable element from a DOM subtree (inclusive). */\r\n    _getLastTabbableElement(root) {\r\n        if (this._checker.isFocusable(root) && this._checker.isTabbable(root)) {\r\n            return root;\r\n        }\r\n        // Iterate in reverse DOM order.\r\n        let children = root.children || root.childNodes;\r\n        for (let i = children.length - 1; i >= 0; i--) {\r\n            let tabbableChild = children[i].nodeType === this._document.ELEMENT_NODE ?\r\n                this._getLastTabbableElement(children[i]) :\r\n                null;\r\n            if (tabbableChild) {\r\n                return tabbableChild;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    /** Creates an anchor element. */\r\n    _createAnchor() {\r\n        const anchor = this._document.createElement('div');\r\n        this._toggleAnchorTabIndex(this._enabled, anchor);\r\n        anchor.classList.add('cdk-visually-hidden');\r\n        anchor.classList.add('cdk-focus-trap-anchor');\r\n        anchor.setAttribute('aria-hidden', 'true');\r\n        return anchor;\r\n    }\r\n    /**\r\n     * Toggles the `tabindex` of an anchor, based on the enabled state of the focus trap.\r\n     * @param isEnabled Whether the focus trap is enabled.\r\n     * @param anchor Anchor on which to toggle the tabindex.\r\n     */\r\n    _toggleAnchorTabIndex(isEnabled, anchor) {\r\n        // Remove the tabindex completely, rather than setting it to -1, because if the\r\n        // element has a tabindex, the user might still hit it when navigating with the arrow keys.\r\n        isEnabled ? anchor.setAttribute('tabindex', '0') : anchor.removeAttribute('tabindex');\r\n    }\r\n    /**\r\n     * Toggles the`tabindex` of both anchors to either trap Tab focus or allow it to escape.\r\n     * @param enabled: Whether the anchors should trap Tab.\r\n     */\r\n    toggleAnchors(enabled) {\r\n        if (this._startAnchor && this._endAnchor) {\r\n            this._toggleAnchorTabIndex(enabled, this._startAnchor);\r\n            this._toggleAnchorTabIndex(enabled, this._endAnchor);\r\n        }\r\n    }\r\n    /** Executes a function when the zone is stable. */\r\n    _executeOnStable(fn) {\r\n        if (this._ngZone.isStable) {\r\n            fn();\r\n        }\r\n        else {\r\n            this._ngZone.onStable.pipe(take(1)).subscribe(fn);\r\n        }\r\n    }\r\n}\r\n/**\r\n * Factory that allows easy instantiation of focus traps.\r\n * @deprecated Use `ConfigurableFocusTrapFactory` instead.\r\n * @breaking-change 11.0.0\r\n */\r\nclass FocusTrapFactory {\r\n    constructor(_checker, _ngZone, _document) {\r\n        this._checker = _checker;\r\n        this._ngZone = _ngZone;\r\n        this._document = _document;\r\n    }\r\n    /**\r\n     * Creates a focus-trapped region around the given element.\r\n     * @param element The element around which focus will be trapped.\r\n     * @param deferCaptureElements Defers the creation of focus-capturing elements to be done\r\n     *     manually by the user.\r\n     * @returns The created focus trap instance.\r\n     */\r\n    create(element, deferCaptureElements = false) {\r\n        return new FocusTrap(element, this._checker, this._ngZone, this._document, deferCaptureElements);\r\n    }\r\n}\nFocusTrapFactory.ɵfac = function FocusTrapFactory_Factory(t) { return new (t || FocusTrapFactory)(ɵngcc0.ɵɵinject(InteractivityChecker), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(DOCUMENT)); };\r\nFocusTrapFactory.ɵprov = ɵɵdefineInjectable({ factory: function FocusTrapFactory_Factory() { return new FocusTrapFactory(ɵɵinject(InteractivityChecker), ɵɵinject(NgZone), ɵɵinject(DOCUMENT)); }, token: FocusTrapFactory, providedIn: \"root\" });\r\nFocusTrapFactory.ctorParameters = () => [\r\n    { type: InteractivityChecker },\r\n    { type: NgZone },\r\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\r\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FocusTrapFactory, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: InteractivityChecker }, { type: ɵngcc0.NgZone }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, null); })();\r\n/** Directive for trapping focus within a region. */\r\nclass CdkTrapFocus {\r\n    constructor(_elementRef, _focusTrapFactory, _document) {\r\n        this._elementRef = _elementRef;\r\n        this._focusTrapFactory = _focusTrapFactory;\r\n        /** Previously focused element to restore focus to upon destroy when using autoCapture. */\r\n        this._previouslyFocusedElement = null;\r\n        this._document = _document;\r\n        this.focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement, true);\r\n    }\r\n    /** Whether the focus trap is active. */\r\n    get enabled() { return this.focusTrap.enabled; }\r\n    set enabled(value) { this.focusTrap.enabled = coerceBooleanProperty(value); }\r\n    /**\r\n     * Whether the directive should automatically move focus into the trapped region upon\r\n     * initialization and return focus to the previous activeElement upon destruction.\r\n     */\r\n    get autoCapture() { return this._autoCapture; }\r\n    set autoCapture(value) { this._autoCapture = coerceBooleanProperty(value); }\r\n    ngOnDestroy() {\r\n        this.focusTrap.destroy();\r\n        // If we stored a previously focused element when using autoCapture, return focus to that\r\n        // element now that the trapped region is being destroyed.\r\n        if (this._previouslyFocusedElement) {\r\n            this._previouslyFocusedElement.focus();\r\n            this._previouslyFocusedElement = null;\r\n        }\r\n    }\r\n    ngAfterContentInit() {\r\n        this.focusTrap.attachAnchors();\r\n        if (this.autoCapture) {\r\n            this._captureFocus();\r\n        }\r\n    }\r\n    ngDoCheck() {\r\n        if (!this.focusTrap.hasAttached()) {\r\n            this.focusTrap.attachAnchors();\r\n        }\r\n    }\r\n    ngOnChanges(changes) {\r\n        const autoCaptureChange = changes['autoCapture'];\r\n        if (autoCaptureChange && !autoCaptureChange.firstChange && this.autoCapture &&\r\n            this.focusTrap.hasAttached()) {\r\n            this._captureFocus();\r\n        }\r\n    }\r\n    _captureFocus() {\r\n        this._previouslyFocusedElement = this._document.activeElement;\r\n        this.focusTrap.focusInitialElementWhenReady();\r\n    }\r\n}\nCdkTrapFocus.ɵfac = function CdkTrapFocus_Factory(t) { return new (t || CdkTrapFocus)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(FocusTrapFactory), ɵngcc0.ɵɵdirectiveInject(DOCUMENT)); };\nCdkTrapFocus.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkTrapFocus, selectors: [[\"\", \"cdkTrapFocus\", \"\"]], inputs: { enabled: [\"cdkTrapFocus\", \"enabled\"], autoCapture: [\"cdkTrapFocusAutoCapture\", \"autoCapture\"] }, exportAs: [\"cdkTrapFocus\"], features: [ɵngcc0.ɵɵNgOnChangesFeature] });\r\nCdkTrapFocus.ctorParameters = () => [\r\n    { type: ElementRef },\r\n    { type: FocusTrapFactory },\r\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\r\n];\r\nCdkTrapFocus.propDecorators = {\r\n    enabled: [{ type: Input, args: ['cdkTrapFocus',] }],\r\n    autoCapture: [{ type: Input, args: ['cdkTrapFocusAutoCapture',] }]\r\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkTrapFocus, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkTrapFocus]',\n                exportAs: 'cdkTrapFocus'\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: FocusTrapFactory }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, { enabled: [{\n            type: Input,\n            args: ['cdkTrapFocus']\n        }], autoCapture: [{\n            type: Input,\n            args: ['cdkTrapFocusAutoCapture']\n        }] }); })();\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Class that allows for trapping focus within a DOM element.\r\n *\r\n * This class uses a strategy pattern that determines how it traps focus.\r\n * See FocusTrapInertStrategy.\r\n */\r\nclass ConfigurableFocusTrap extends FocusTrap {\r\n    constructor(_element, _checker, _ngZone, _document, _focusTrapManager, _inertStrategy, config) {\r\n        super(_element, _checker, _ngZone, _document, config.defer);\r\n        this._focusTrapManager = _focusTrapManager;\r\n        this._inertStrategy = _inertStrategy;\r\n        this._focusTrapManager.register(this);\r\n    }\r\n    /** Whether the FocusTrap is enabled. */\r\n    get enabled() { return this._enabled; }\r\n    set enabled(value) {\r\n        this._enabled = value;\r\n        if (this._enabled) {\r\n            this._focusTrapManager.register(this);\r\n        }\r\n        else {\r\n            this._focusTrapManager.deregister(this);\r\n        }\r\n    }\r\n    /** Notifies the FocusTrapManager that this FocusTrap will be destroyed. */\r\n    destroy() {\r\n        this._focusTrapManager.deregister(this);\r\n        super.destroy();\r\n    }\r\n    /** @docs-private Implemented as part of ManagedFocusTrap. */\r\n    _enable() {\r\n        this._inertStrategy.preventFocus(this);\r\n        this.toggleAnchors(true);\r\n    }\r\n    /** @docs-private Implemented as part of ManagedFocusTrap. */\r\n    _disable() {\r\n        this._inertStrategy.allowFocus(this);\r\n        this.toggleAnchors(false);\r\n    }\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/** IE 11 compatible closest implementation that is able to start from non-Element Nodes. */\r\nfunction closest(element, selector) {\r\n    if (!(element instanceof Node)) {\r\n        return null;\r\n    }\r\n    let curr = element;\r\n    while (curr != null && !(curr instanceof Element)) {\r\n        curr = curr.parentNode;\r\n    }\r\n    return curr && (hasNativeClosest ?\r\n        curr.closest(selector) : polyfillClosest(curr, selector));\r\n}\r\n/** Polyfill for browsers without Element.closest. */\r\nfunction polyfillClosest(element, selector) {\r\n    let curr = element;\r\n    while (curr != null && !(curr instanceof Element && matches(curr, selector))) {\r\n        curr = curr.parentNode;\r\n    }\r\n    return (curr || null);\r\n}\r\nconst hasNativeClosest = typeof Element != 'undefined' && !!Element.prototype.closest;\r\n/** IE 11 compatible matches implementation. */\r\nfunction matches(element, selector) {\r\n    return element.matches ?\r\n        element.matches(selector) :\r\n        element['msMatchesSelector'](selector);\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Lightweight FocusTrapInertStrategy that adds a document focus event\r\n * listener to redirect focus back inside the FocusTrap.\r\n */\r\nclass EventListenerFocusTrapInertStrategy {\r\n    constructor() {\r\n        /** Focus event handler. */\r\n        this._listener = null;\r\n    }\r\n    /** Adds a document event listener that keeps focus inside the FocusTrap. */\r\n    preventFocus(focusTrap) {\r\n        // Ensure there's only one listener per document\r\n        if (this._listener) {\r\n            focusTrap._document.removeEventListener('focus', this._listener, true);\r\n        }\r\n        this._listener = (e) => this._trapFocus(focusTrap, e);\r\n        focusTrap._ngZone.runOutsideAngular(() => {\r\n            focusTrap._document.addEventListener('focus', this._listener, true);\r\n        });\r\n    }\r\n    /** Removes the event listener added in preventFocus. */\r\n    allowFocus(focusTrap) {\r\n        if (!this._listener) {\r\n            return;\r\n        }\r\n        focusTrap._document.removeEventListener('focus', this._listener, true);\r\n        this._listener = null;\r\n    }\r\n    /**\r\n     * Refocuses the first element in the FocusTrap if the focus event target was outside\r\n     * the FocusTrap.\r\n     *\r\n     * This is an event listener callback. The event listener is added in runOutsideAngular,\r\n     * so all this code runs outside Angular as well.\r\n     */\r\n    _trapFocus(focusTrap, event) {\r\n        const target = event.target;\r\n        const focusTrapRoot = focusTrap._element;\r\n        // Don't refocus if target was in an overlay, because the overlay might be associated\r\n        // with an element inside the FocusTrap, ex. mat-select.\r\n        if (!focusTrapRoot.contains(target) && closest(target, 'div.cdk-overlay-pane') === null) {\r\n            // Some legacy FocusTrap usages have logic that focuses some element on the page\r\n            // just before FocusTrap is destroyed. For backwards compatibility, wait\r\n            // to be sure FocusTrap is still enabled before refocusing.\r\n            setTimeout(() => {\r\n                // Check whether focus wasn't put back into the focus trap while the timeout was pending.\r\n                if (focusTrap.enabled && !focusTrapRoot.contains(focusTrap._document.activeElement)) {\r\n                    focusTrap.focusFirstTabbableElement();\r\n                }\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Configuration for creating a ConfigurableFocusTrap.\r\n */\r\nclass ConfigurableFocusTrapConfig {\r\n    constructor() {\r\n        /**\r\n         * Whether to defer the creation of FocusTrap elements to be\r\n         * done manually by the user. Default is to create them\r\n         * automatically.\r\n         */\r\n        this.defer = false;\r\n    }\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/** The injection token used to specify the inert strategy. */\r\nconst FOCUS_TRAP_INERT_STRATEGY = new InjectionToken('FOCUS_TRAP_INERT_STRATEGY');\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/** Injectable that ensures only the most recently enabled FocusTrap is active. */\r\nclass FocusTrapManager {\r\n    constructor() {\r\n        // A stack of the FocusTraps on the page. Only the FocusTrap at the\r\n        // top of the stack is active.\r\n        this._focusTrapStack = [];\r\n    }\r\n    /**\r\n     * Disables the FocusTrap at the top of the stack, and then pushes\r\n     * the new FocusTrap onto the stack.\r\n     */\r\n    register(focusTrap) {\r\n        // Dedupe focusTraps that register multiple times.\r\n        this._focusTrapStack = this._focusTrapStack.filter((ft) => ft !== focusTrap);\r\n        let stack = this._focusTrapStack;\r\n        if (stack.length) {\r\n            stack[stack.length - 1]._disable();\r\n        }\r\n        stack.push(focusTrap);\r\n        focusTrap._enable();\r\n    }\r\n    /**\r\n     * Removes the FocusTrap from the stack, and activates the\r\n     * FocusTrap that is the new top of the stack.\r\n     */\r\n    deregister(focusTrap) {\r\n        focusTrap._disable();\r\n        const stack = this._focusTrapStack;\r\n        const i = stack.indexOf(focusTrap);\r\n        if (i !== -1) {\r\n            stack.splice(i, 1);\r\n            if (stack.length) {\r\n                stack[stack.length - 1]._enable();\r\n            }\r\n        }\r\n    }\r\n}\nFocusTrapManager.ɵfac = function FocusTrapManager_Factory(t) { return new (t || FocusTrapManager)(); };\r\nFocusTrapManager.ɵprov = ɵɵdefineInjectable({ factory: function FocusTrapManager_Factory() { return new FocusTrapManager(); }, token: FocusTrapManager, providedIn: \"root\" });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FocusTrapManager, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return []; }, null); })();\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/** Factory that allows easy instantiation of configurable focus traps. */\r\nclass ConfigurableFocusTrapFactory {\r\n    constructor(_checker, _ngZone, _focusTrapManager, _document, _inertStrategy) {\r\n        this._checker = _checker;\r\n        this._ngZone = _ngZone;\r\n        this._focusTrapManager = _focusTrapManager;\r\n        this._document = _document;\r\n        // TODO split up the strategies into different modules, similar to DateAdapter.\r\n        this._inertStrategy = _inertStrategy || new EventListenerFocusTrapInertStrategy();\r\n    }\r\n    create(element, config = new ConfigurableFocusTrapConfig()) {\r\n        let configObject;\r\n        if (typeof config === 'boolean') {\r\n            configObject = new ConfigurableFocusTrapConfig();\r\n            configObject.defer = config;\r\n        }\r\n        else {\r\n            configObject = config;\r\n        }\r\n        return new ConfigurableFocusTrap(element, this._checker, this._ngZone, this._document, this._focusTrapManager, this._inertStrategy, configObject);\r\n    }\r\n}\nConfigurableFocusTrapFactory.ɵfac = function ConfigurableFocusTrapFactory_Factory(t) { return new (t || ConfigurableFocusTrapFactory)(ɵngcc0.ɵɵinject(InteractivityChecker), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(FocusTrapManager), ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(FOCUS_TRAP_INERT_STRATEGY, 8)); };\r\nConfigurableFocusTrapFactory.ɵprov = ɵɵdefineInjectable({ factory: function ConfigurableFocusTrapFactory_Factory() { return new ConfigurableFocusTrapFactory(ɵɵinject(InteractivityChecker), ɵɵinject(NgZone), ɵɵinject(FocusTrapManager), ɵɵinject(DOCUMENT), ɵɵinject(FOCUS_TRAP_INERT_STRATEGY, 8)); }, token: ConfigurableFocusTrapFactory, providedIn: \"root\" });\r\nConfigurableFocusTrapFactory.ctorParameters = () => [\r\n    { type: InteractivityChecker },\r\n    { type: NgZone },\r\n    { type: FocusTrapManager },\r\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\r\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [FOCUS_TRAP_INERT_STRATEGY,] }] }\r\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ConfigurableFocusTrapFactory, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: InteractivityChecker }, { type: ɵngcc0.NgZone }, { type: FocusTrapManager }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [FOCUS_TRAP_INERT_STRATEGY]\n            }] }]; }, null); })();\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nconst LIVE_ANNOUNCER_ELEMENT_TOKEN = new InjectionToken('liveAnnouncerElement', {\r\n    providedIn: 'root',\r\n    factory: LIVE_ANNOUNCER_ELEMENT_TOKEN_FACTORY,\r\n});\r\n/** @docs-private */\r\nfunction LIVE_ANNOUNCER_ELEMENT_TOKEN_FACTORY() {\r\n    return null;\r\n}\r\n/** Injection token that can be used to configure the default options for the LiveAnnouncer. */\r\nconst LIVE_ANNOUNCER_DEFAULT_OPTIONS = new InjectionToken('LIVE_ANNOUNCER_DEFAULT_OPTIONS');\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nclass LiveAnnouncer {\r\n    constructor(elementToken, _ngZone, _document, _defaultOptions) {\r\n        this._ngZone = _ngZone;\r\n        this._defaultOptions = _defaultOptions;\r\n        // We inject the live element and document as `any` because the constructor signature cannot\r\n        // reference browser globals (HTMLElement, Document) on non-browser environments, since having\r\n        // a class decorator causes TypeScript to preserve the constructor signature types.\r\n        this._document = _document;\r\n        this._liveElement = elementToken || this._createLiveElement();\r\n    }\r\n    announce(message, ...args) {\r\n        const defaultOptions = this._defaultOptions;\r\n        let politeness;\r\n        let duration;\r\n        if (args.length === 1 && typeof args[0] === 'number') {\r\n            duration = args[0];\r\n        }\r\n        else {\r\n            [politeness, duration] = args;\r\n        }\r\n        this.clear();\r\n        clearTimeout(this._previousTimeout);\r\n        if (!politeness) {\r\n            politeness =\r\n                (defaultOptions && defaultOptions.politeness) ? defaultOptions.politeness : 'polite';\r\n        }\r\n        if (duration == null && defaultOptions) {\r\n            duration = defaultOptions.duration;\r\n        }\r\n        // TODO: ensure changing the politeness works on all environments we support.\r\n        this._liveElement.setAttribute('aria-live', politeness);\r\n        // This 100ms timeout is necessary for some browser + screen-reader combinations:\r\n        // - Both JAWS and NVDA over IE11 will not announce anything without a non-zero timeout.\r\n        // - With Chrome and IE11 with NVDA or JAWS, a repeated (identical) message won't be read a\r\n        //   second time without clearing and then using a non-zero delay.\r\n        // (using JAWS 17 at time of this writing).\r\n        return this._ngZone.runOutsideAngular(() => {\r\n            return new Promise(resolve => {\r\n                clearTimeout(this._previousTimeout);\r\n                this._previousTimeout = setTimeout(() => {\r\n                    this._liveElement.textContent = message;\r\n                    resolve();\r\n                    if (typeof duration === 'number') {\r\n                        this._previousTimeout = setTimeout(() => this.clear(), duration);\r\n                    }\r\n                }, 100);\r\n            });\r\n        });\r\n    }\r\n    /**\r\n     * Clears the current text from the announcer element. Can be used to prevent\r\n     * screen readers from reading the text out again while the user is going\r\n     * through the page landmarks.\r\n     */\r\n    clear() {\r\n        if (this._liveElement) {\r\n            this._liveElement.textContent = '';\r\n        }\r\n    }\r\n    ngOnDestroy() {\r\n        clearTimeout(this._previousTimeout);\r\n        if (this._liveElement && this._liveElement.parentNode) {\r\n            this._liveElement.parentNode.removeChild(this._liveElement);\r\n            this._liveElement = null;\r\n        }\r\n    }\r\n    _createLiveElement() {\r\n        const elementClass = 'cdk-live-announcer-element';\r\n        const previousElements = this._document.getElementsByClassName(elementClass);\r\n        const liveEl = this._document.createElement('div');\r\n        // Remove any old containers. This can happen when coming in from a server-side-rendered page.\r\n        for (let i = 0; i < previousElements.length; i++) {\r\n            previousElements[i].parentNode.removeChild(previousElements[i]);\r\n        }\r\n        liveEl.classList.add(elementClass);\r\n        liveEl.classList.add('cdk-visually-hidden');\r\n        liveEl.setAttribute('aria-atomic', 'true');\r\n        liveEl.setAttribute('aria-live', 'polite');\r\n        this._document.body.appendChild(liveEl);\r\n        return liveEl;\r\n    }\r\n}\nLiveAnnouncer.ɵfac = function LiveAnnouncer_Factory(t) { return new (t || LiveAnnouncer)(ɵngcc0.ɵɵinject(LIVE_ANNOUNCER_ELEMENT_TOKEN, 8), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(LIVE_ANNOUNCER_DEFAULT_OPTIONS, 8)); };\r\nLiveAnnouncer.ɵprov = ɵɵdefineInjectable({ factory: function LiveAnnouncer_Factory() { return new LiveAnnouncer(ɵɵinject(LIVE_ANNOUNCER_ELEMENT_TOKEN, 8), ɵɵinject(NgZone), ɵɵinject(DOCUMENT), ɵɵinject(LIVE_ANNOUNCER_DEFAULT_OPTIONS, 8)); }, token: LiveAnnouncer, providedIn: \"root\" });\r\nLiveAnnouncer.ctorParameters = () => [\r\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [LIVE_ANNOUNCER_ELEMENT_TOKEN,] }] },\r\n    { type: NgZone },\r\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\r\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [LIVE_ANNOUNCER_DEFAULT_OPTIONS,] }] }\r\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(LiveAnnouncer, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [LIVE_ANNOUNCER_ELEMENT_TOKEN]\n            }] }, { type: ɵngcc0.NgZone }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [LIVE_ANNOUNCER_DEFAULT_OPTIONS]\n            }] }]; }, null); })();\r\n/**\r\n * A directive that works similarly to aria-live, but uses the LiveAnnouncer to ensure compatibility\r\n * with a wider range of browsers and screen readers.\r\n */\r\nclass CdkAriaLive {\r\n    constructor(_elementRef, _liveAnnouncer, _contentObserver, _ngZone) {\r\n        this._elementRef = _elementRef;\r\n        this._liveAnnouncer = _liveAnnouncer;\r\n        this._contentObserver = _contentObserver;\r\n        this._ngZone = _ngZone;\r\n        this._politeness = 'polite';\r\n    }\r\n    /** The aria-live politeness level to use when announcing messages. */\r\n    get politeness() { return this._politeness; }\r\n    set politeness(value) {\r\n        this._politeness = value === 'off' || value === 'assertive' ? value : 'polite';\r\n        if (this._politeness === 'off') {\r\n            if (this._subscription) {\r\n                this._subscription.unsubscribe();\r\n                this._subscription = null;\r\n            }\r\n        }\r\n        else if (!this._subscription) {\r\n            this._subscription = this._ngZone.runOutsideAngular(() => {\r\n                return this._contentObserver\r\n                    .observe(this._elementRef)\r\n                    .subscribe(() => {\r\n                    // Note that we use textContent here, rather than innerText, in order to avoid a reflow.\r\n                    const elementText = this._elementRef.nativeElement.textContent;\r\n                    // The `MutationObserver` fires also for attribute\r\n                    // changes which we don't want to announce.\r\n                    if (elementText !== this._previousAnnouncedText) {\r\n                        this._liveAnnouncer.announce(elementText, this._politeness);\r\n                        this._previousAnnouncedText = elementText;\r\n                    }\r\n                });\r\n            });\r\n        }\r\n    }\r\n    ngOnDestroy() {\r\n        if (this._subscription) {\r\n            this._subscription.unsubscribe();\r\n        }\r\n    }\r\n}\nCdkAriaLive.ɵfac = function CdkAriaLive_Factory(t) { return new (t || CdkAriaLive)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(LiveAnnouncer), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.ContentObserver), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };\nCdkAriaLive.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkAriaLive, selectors: [[\"\", \"cdkAriaLive\", \"\"]], inputs: { politeness: [\"cdkAriaLive\", \"politeness\"] }, exportAs: [\"cdkAriaLive\"] });\r\nCdkAriaLive.ctorParameters = () => [\r\n    { type: ElementRef },\r\n    { type: LiveAnnouncer },\r\n    { type: ContentObserver },\r\n    { type: NgZone }\r\n];\r\nCdkAriaLive.propDecorators = {\r\n    politeness: [{ type: Input, args: ['cdkAriaLive',] }]\r\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkAriaLive, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkAriaLive]',\n                exportAs: 'cdkAriaLive'\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: LiveAnnouncer }, { type: ɵngcc2.ContentObserver }, { type: ɵngcc0.NgZone }]; }, { politeness: [{\n            type: Input,\n            args: ['cdkAriaLive']\n        }] }); })();\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/** Gets whether an event could be a faked `mousedown` event dispatched by a screen reader. */\r\nfunction isFakeMousedownFromScreenReader(event) {\r\n    // We can typically distinguish between these faked mousedown events and real mousedown events\r\n    // using the \"buttons\" property. While real mousedowns will indicate the mouse button that was\r\n    // pressed (e.g. \"1\" for the left mouse button), faked mousedowns will usually set the property\r\n    // value to 0.\r\n    return event.buttons === 0;\r\n}\r\n/** Gets whether an event could be a faked `touchstart` event dispatched by a screen reader. */\r\nfunction isFakeTouchstartFromScreenReader(event) {\r\n    const touch = (event.touches && event.touches[0]) ||\r\n        (event.changedTouches && event.changedTouches[0]);\r\n    // A fake `touchstart` can be distinguished from a real one by looking at the `identifier`\r\n    // which is typically >= 0 on a real device versus -1 from a screen reader. Just to be safe,\r\n    // we can also look at `radiusX` and `radiusY`. This behavior was observed against a Windows 10\r\n    // device with a touch screen running NVDA v2020.4 and Firefox 85 or Chrome 88.\r\n    return !!touch && touch.identifier === -1 && (touch.radiusX == null || touch.radiusX === 1) &&\r\n        (touch.radiusY == null || touch.radiusY === 1);\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n// This is the value used by AngularJS Material. Through trial and error (on iPhone 6S) they found\r\n// that a value of around 650ms seems appropriate.\r\nconst TOUCH_BUFFER_MS = 650;\r\n/** InjectionToken for FocusMonitorOptions. */\r\nconst FOCUS_MONITOR_DEFAULT_OPTIONS = new InjectionToken('cdk-focus-monitor-default-options');\r\n/**\r\n * Event listener options that enable capturing and also\r\n * mark the listener as passive if the browser supports it.\r\n */\r\nconst captureEventListenerOptions = normalizePassiveListenerOptions({\r\n    passive: true,\r\n    capture: true\r\n});\r\n/** Monitors mouse and keyboard events to determine the cause of focus events. */\r\nclass FocusMonitor {\r\n    constructor(_ngZone, _platform, \r\n    /** @breaking-change 11.0.0 make document required */\r\n    document, options) {\r\n        this._ngZone = _ngZone;\r\n        this._platform = _platform;\r\n        /** The focus origin that the next focus event is a result of. */\r\n        this._origin = null;\r\n        /** Whether the window has just been focused. */\r\n        this._windowFocused = false;\r\n        /** Map of elements being monitored to their info. */\r\n        this._elementInfo = new Map();\r\n        /** The number of elements currently being monitored. */\r\n        this._monitoredElementCount = 0;\r\n        /**\r\n         * Keeps track of the root nodes to which we've currently bound a focus/blur handler,\r\n         * as well as the number of monitored elements that they contain. We have to treat focus/blur\r\n         * handlers differently from the rest of the events, because the browser won't emit events\r\n         * to the document when focus moves inside of a shadow root.\r\n         */\r\n        this._rootNodeFocusListenerCount = new Map();\r\n        /**\r\n         * Event listener for `keydown` events on the document.\r\n         * Needs to be an arrow function in order to preserve the context when it gets bound.\r\n         */\r\n        this._documentKeydownListener = () => {\r\n            // On keydown record the origin and clear any touch event that may be in progress.\r\n            this._lastTouchTarget = null;\r\n            this._setOriginForCurrentEventQueue('keyboard');\r\n        };\r\n        /**\r\n         * Event listener for `mousedown` events on the document.\r\n         * Needs to be an arrow function in order to preserve the context when it gets bound.\r\n         */\r\n        this._documentMousedownListener = (event) => {\r\n            // On mousedown record the origin only if there is not touch\r\n            // target, since a mousedown can happen as a result of a touch event.\r\n            if (!this._lastTouchTarget) {\r\n                // In some cases screen readers fire fake `mousedown` events instead of `keydown`.\r\n                // Resolve the focus source to `keyboard` if we detect one of them.\r\n                const source = isFakeMousedownFromScreenReader(event) ? 'keyboard' : 'mouse';\r\n                this._setOriginForCurrentEventQueue(source);\r\n            }\r\n        };\r\n        /**\r\n         * Event listener for `touchstart` events on the document.\r\n         * Needs to be an arrow function in order to preserve the context when it gets bound.\r\n         */\r\n        this._documentTouchstartListener = (event) => {\r\n            // Some screen readers will fire a fake `touchstart` event if an element is activated using\r\n            // the keyboard while on a device with a touchsreen. Consider such events as keyboard focus.\r\n            if (!isFakeTouchstartFromScreenReader(event)) {\r\n                // When the touchstart event fires the focus event is not yet in the event queue. This means\r\n                // we can't rely on the trick used above (setting timeout of 1ms). Instead we wait 650ms to\r\n                // see if a focus happens.\r\n                if (this._touchTimeoutId != null) {\r\n                    clearTimeout(this._touchTimeoutId);\r\n                }\r\n                this._lastTouchTarget = getTarget(event);\r\n                this._touchTimeoutId = setTimeout(() => this._lastTouchTarget = null, TOUCH_BUFFER_MS);\r\n            }\r\n            else if (!this._lastTouchTarget) {\r\n                this._setOriginForCurrentEventQueue('keyboard');\r\n            }\r\n        };\r\n        /**\r\n         * Event listener for `focus` events on the window.\r\n         * Needs to be an arrow function in order to preserve the context when it gets bound.\r\n         */\r\n        this._windowFocusListener = () => {\r\n            // Make a note of when the window regains focus, so we can\r\n            // restore the origin info for the focused element.\r\n            this._windowFocused = true;\r\n            this._windowFocusTimeoutId = setTimeout(() => this._windowFocused = false);\r\n        };\r\n        /**\r\n         * Event listener for `focus` and 'blur' events on the document.\r\n         * Needs to be an arrow function in order to preserve the context when it gets bound.\r\n         */\r\n        this._rootNodeFocusAndBlurListener = (event) => {\r\n            const target = getTarget(event);\r\n            const handler = event.type === 'focus' ? this._onFocus : this._onBlur;\r\n            // We need to walk up the ancestor chain in order to support `checkChildren`.\r\n            for (let element = target; element; element = element.parentElement) {\r\n                handler.call(this, event, element);\r\n            }\r\n        };\r\n        this._document = document;\r\n        this._detectionMode = (options === null || options === void 0 ? void 0 : options.detectionMode) || 0 /* IMMEDIATE */;\r\n    }\r\n    monitor(element, checkChildren = false) {\r\n        const nativeElement = coerceElement(element);\r\n        // Do nothing if we're not on the browser platform or the passed in node isn't an element.\r\n        if (!this._platform.isBrowser || nativeElement.nodeType !== 1) {\r\n            return of(null);\r\n        }\r\n        // If the element is inside the shadow DOM, we need to bind our focus/blur listeners to\r\n        // the shadow root, rather than the `document`, because the browser won't emit focus events\r\n        // to the `document`, if focus is moving within the same shadow root.\r\n        const rootNode = _getShadowRoot(nativeElement) || this._getDocument();\r\n        const cachedInfo = this._elementInfo.get(nativeElement);\r\n        // Check if we're already monitoring this element.\r\n        if (cachedInfo) {\r\n            if (checkChildren) {\r\n                // TODO(COMP-318): this can be problematic, because it'll turn all non-checkChildren\r\n                // observers into ones that behave as if `checkChildren` was turned on. We need a more\r\n                // robust solution.\r\n                cachedInfo.checkChildren = true;\r\n            }\r\n            return cachedInfo.subject;\r\n        }\r\n        // Create monitored element info.\r\n        const info = {\r\n            checkChildren: checkChildren,\r\n            subject: new Subject(),\r\n            rootNode\r\n        };\r\n        this._elementInfo.set(nativeElement, info);\r\n        this._registerGlobalListeners(info);\r\n        return info.subject;\r\n    }\r\n    stopMonitoring(element) {\r\n        const nativeElement = coerceElement(element);\r\n        const elementInfo = this._elementInfo.get(nativeElement);\r\n        if (elementInfo) {\r\n            elementInfo.subject.complete();\r\n            this._setClasses(nativeElement);\r\n            this._elementInfo.delete(nativeElement);\r\n            this._removeGlobalListeners(elementInfo);\r\n        }\r\n    }\r\n    focusVia(element, origin, options) {\r\n        const nativeElement = coerceElement(element);\r\n        const focusedElement = this._getDocument().activeElement;\r\n        // If the element is focused already, calling `focus` again won't trigger the event listener\r\n        // which means that the focus classes won't be updated. If that's the case, update the classes\r\n        // directly without waiting for an event.\r\n        if (nativeElement === focusedElement) {\r\n            this._getClosestElementsInfo(nativeElement)\r\n                .forEach(([currentElement, info]) => this._originChanged(currentElement, origin, info));\r\n        }\r\n        else {\r\n            this._setOriginForCurrentEventQueue(origin);\r\n            // `focus` isn't available on the server\r\n            if (typeof nativeElement.focus === 'function') {\r\n                nativeElement.focus(options);\r\n            }\r\n        }\r\n    }\r\n    ngOnDestroy() {\r\n        this._elementInfo.forEach((_info, element) => this.stopMonitoring(element));\r\n    }\r\n    /** Access injected document if available or fallback to global document reference */\r\n    _getDocument() {\r\n        return this._document || document;\r\n    }\r\n    /** Use defaultView of injected document if available or fallback to global window reference */\r\n    _getWindow() {\r\n        const doc = this._getDocument();\r\n        return doc.defaultView || window;\r\n    }\r\n    _toggleClass(element, className, shouldSet) {\r\n        if (shouldSet) {\r\n            element.classList.add(className);\r\n        }\r\n        else {\r\n            element.classList.remove(className);\r\n        }\r\n    }\r\n    _getFocusOrigin(event) {\r\n        // If we couldn't detect a cause for the focus event, it's due to one of three reasons:\r\n        // 1) The window has just regained focus, in which case we want to restore the focused state of\r\n        //    the element from before the window blurred.\r\n        // 2) It was caused by a touch event, in which case we mark the origin as 'touch'.\r\n        // 3) The element was programmatically focused, in which case we should mark the origin as\r\n        //    'program'.\r\n        if (this._origin) {\r\n            return this._origin;\r\n        }\r\n        if (this._windowFocused && this._lastFocusOrigin) {\r\n            return this._lastFocusOrigin;\r\n        }\r\n        else if (this._wasCausedByTouch(event)) {\r\n            return 'touch';\r\n        }\r\n        else {\r\n            return 'program';\r\n        }\r\n    }\r\n    /**\r\n     * Sets the focus classes on the element based on the given focus origin.\r\n     * @param element The element to update the classes on.\r\n     * @param origin The focus origin.\r\n     */\r\n    _setClasses(element, origin) {\r\n        this._toggleClass(element, 'cdk-focused', !!origin);\r\n        this._toggleClass(element, 'cdk-touch-focused', origin === 'touch');\r\n        this._toggleClass(element, 'cdk-keyboard-focused', origin === 'keyboard');\r\n        this._toggleClass(element, 'cdk-mouse-focused', origin === 'mouse');\r\n        this._toggleClass(element, 'cdk-program-focused', origin === 'program');\r\n    }\r\n    /**\r\n     * Sets the origin and schedules an async function to clear it at the end of the event queue.\r\n     * If the detection mode is 'eventual', the origin is never cleared.\r\n     * @param origin The origin to set.\r\n     */\r\n    _setOriginForCurrentEventQueue(origin) {\r\n        this._ngZone.runOutsideAngular(() => {\r\n            this._origin = origin;\r\n            if (this._detectionMode === 0 /* IMMEDIATE */) {\r\n                // Sometimes the focus origin won't be valid in Firefox because Firefox seems to focus *one*\r\n                // tick after the interaction event fired. To ensure the focus origin is always correct,\r\n                // the focus origin will be determined at the beginning of the next tick.\r\n                this._originTimeoutId = setTimeout(() => this._origin = null, 1);\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Checks whether the given focus event was caused by a touchstart event.\r\n     * @param event The focus event to check.\r\n     * @returns Whether the event was caused by a touch.\r\n     */\r\n    _wasCausedByTouch(event) {\r\n        // Note(mmalerba): This implementation is not quite perfect, there is a small edge case.\r\n        // Consider the following dom structure:\r\n        //\r\n        // <div #parent tabindex=\"0\" cdkFocusClasses>\r\n        //   <div #child (click)=\"#parent.focus()\"></div>\r\n        // </div>\r\n        //\r\n        // If the user touches the #child element and the #parent is programmatically focused as a\r\n        // result, this code will still consider it to have been caused by the touch event and will\r\n        // apply the cdk-touch-focused class rather than the cdk-program-focused class. This is a\r\n        // relatively small edge-case that can be worked around by using\r\n        // focusVia(parentEl, 'program') to focus the parent element.\r\n        //\r\n        // If we decide that we absolutely must handle this case correctly, we can do so by listening\r\n        // for the first focus event after the touchstart, and then the first blur event after that\r\n        // focus event. When that blur event fires we know that whatever follows is not a result of the\r\n        // touchstart.\r\n        const focusTarget = getTarget(event);\r\n        return this._lastTouchTarget instanceof Node && focusTarget instanceof Node &&\r\n            (focusTarget === this._lastTouchTarget || focusTarget.contains(this._lastTouchTarget));\r\n    }\r\n    /**\r\n     * Handles focus events on a registered element.\r\n     * @param event The focus event.\r\n     * @param element The monitored element.\r\n     */\r\n    _onFocus(event, element) {\r\n        // NOTE(mmalerba): We currently set the classes based on the focus origin of the most recent\r\n        // focus event affecting the monitored element. If we want to use the origin of the first event\r\n        // instead we should check for the cdk-focused class here and return if the element already has\r\n        // it. (This only matters for elements that have includesChildren = true).\r\n        // If we are not counting child-element-focus as focused, make sure that the event target is the\r\n        // monitored element itself.\r\n        const elementInfo = this._elementInfo.get(element);\r\n        if (!elementInfo || (!elementInfo.checkChildren && element !== getTarget(event))) {\r\n            return;\r\n        }\r\n        this._originChanged(element, this._getFocusOrigin(event), elementInfo);\r\n    }\r\n    /**\r\n     * Handles blur events on a registered element.\r\n     * @param event The blur event.\r\n     * @param element The monitored element.\r\n     */\r\n    _onBlur(event, element) {\r\n        // If we are counting child-element-focus as focused, make sure that we aren't just blurring in\r\n        // order to focus another child of the monitored element.\r\n        const elementInfo = this._elementInfo.get(element);\r\n        if (!elementInfo || (elementInfo.checkChildren && event.relatedTarget instanceof Node &&\r\n            element.contains(event.relatedTarget))) {\r\n            return;\r\n        }\r\n        this._setClasses(element);\r\n        this._emitOrigin(elementInfo.subject, null);\r\n    }\r\n    _emitOrigin(subject, origin) {\r\n        this._ngZone.run(() => subject.next(origin));\r\n    }\r\n    _registerGlobalListeners(elementInfo) {\r\n        if (!this._platform.isBrowser) {\r\n            return;\r\n        }\r\n        const rootNode = elementInfo.rootNode;\r\n        const rootNodeFocusListeners = this._rootNodeFocusListenerCount.get(rootNode) || 0;\r\n        if (!rootNodeFocusListeners) {\r\n            this._ngZone.runOutsideAngular(() => {\r\n                rootNode.addEventListener('focus', this._rootNodeFocusAndBlurListener, captureEventListenerOptions);\r\n                rootNode.addEventListener('blur', this._rootNodeFocusAndBlurListener, captureEventListenerOptions);\r\n            });\r\n        }\r\n        this._rootNodeFocusListenerCount.set(rootNode, rootNodeFocusListeners + 1);\r\n        // Register global listeners when first element is monitored.\r\n        if (++this._monitoredElementCount === 1) {\r\n            // Note: we listen to events in the capture phase so we\r\n            // can detect them even if the user stops propagation.\r\n            this._ngZone.runOutsideAngular(() => {\r\n                const document = this._getDocument();\r\n                const window = this._getWindow();\r\n                document.addEventListener('keydown', this._documentKeydownListener, captureEventListenerOptions);\r\n                document.addEventListener('mousedown', this._documentMousedownListener, captureEventListenerOptions);\r\n                document.addEventListener('touchstart', this._documentTouchstartListener, captureEventListenerOptions);\r\n                window.addEventListener('focus', this._windowFocusListener);\r\n            });\r\n        }\r\n    }\r\n    _removeGlobalListeners(elementInfo) {\r\n        const rootNode = elementInfo.rootNode;\r\n        if (this._rootNodeFocusListenerCount.has(rootNode)) {\r\n            const rootNodeFocusListeners = this._rootNodeFocusListenerCount.get(rootNode);\r\n            if (rootNodeFocusListeners > 1) {\r\n                this._rootNodeFocusListenerCount.set(rootNode, rootNodeFocusListeners - 1);\r\n            }\r\n            else {\r\n                rootNode.removeEventListener('focus', this._rootNodeFocusAndBlurListener, captureEventListenerOptions);\r\n                rootNode.removeEventListener('blur', this._rootNodeFocusAndBlurListener, captureEventListenerOptions);\r\n                this._rootNodeFocusListenerCount.delete(rootNode);\r\n            }\r\n        }\r\n        // Unregister global listeners when last element is unmonitored.\r\n        if (!--this._monitoredElementCount) {\r\n            const document = this._getDocument();\r\n            const window = this._getWindow();\r\n            document.removeEventListener('keydown', this._documentKeydownListener, captureEventListenerOptions);\r\n            document.removeEventListener('mousedown', this._documentMousedownListener, captureEventListenerOptions);\r\n            document.removeEventListener('touchstart', this._documentTouchstartListener, captureEventListenerOptions);\r\n            window.removeEventListener('focus', this._windowFocusListener);\r\n            // Clear timeouts for all potentially pending timeouts to prevent the leaks.\r\n            clearTimeout(this._windowFocusTimeoutId);\r\n            clearTimeout(this._touchTimeoutId);\r\n            clearTimeout(this._originTimeoutId);\r\n        }\r\n    }\r\n    /** Updates all the state on an element once its focus origin has changed. */\r\n    _originChanged(element, origin, elementInfo) {\r\n        this._setClasses(element, origin);\r\n        this._emitOrigin(elementInfo.subject, origin);\r\n        this._lastFocusOrigin = origin;\r\n    }\r\n    /**\r\n     * Collects the `MonitoredElementInfo` of a particular element and\r\n     * all of its ancestors that have enabled `checkChildren`.\r\n     * @param element Element from which to start the search.\r\n     */\r\n    _getClosestElementsInfo(element) {\r\n        const results = [];\r\n        this._elementInfo.forEach((info, currentElement) => {\r\n            if (currentElement === element || (info.checkChildren && currentElement.contains(element))) {\r\n                results.push([currentElement, info]);\r\n            }\r\n        });\r\n        return results;\r\n    }\r\n}\nFocusMonitor.ɵfac = function FocusMonitor_Factory(t) { return new (t || FocusMonitor)(ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(ɵngcc1.Platform), ɵngcc0.ɵɵinject(DOCUMENT, 8), ɵngcc0.ɵɵinject(FOCUS_MONITOR_DEFAULT_OPTIONS, 8)); };\r\nFocusMonitor.ɵprov = ɵɵdefineInjectable({ factory: function FocusMonitor_Factory() { return new FocusMonitor(ɵɵinject(NgZone), ɵɵinject(Platform), ɵɵinject(DOCUMENT, 8), ɵɵinject(FOCUS_MONITOR_DEFAULT_OPTIONS, 8)); }, token: FocusMonitor, providedIn: \"root\" });\r\nFocusMonitor.ctorParameters = () => [\r\n    { type: NgZone },\r\n    { type: Platform },\r\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] },\r\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [FOCUS_MONITOR_DEFAULT_OPTIONS,] }] }\r\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(FocusMonitor, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: ɵngcc0.NgZone }, { type: ɵngcc1.Platform }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [FOCUS_MONITOR_DEFAULT_OPTIONS]\n            }] }]; }, null); })();\r\n/** Gets the target of an event, accounting for Shadow DOM. */\r\nfunction getTarget(event) {\r\n    // If an event is bound outside the Shadow DOM, the `event.target` will\r\n    // point to the shadow root so we have to use `composedPath` instead.\r\n    return (event.composedPath ? event.composedPath()[0] : event.target);\r\n}\r\n/**\r\n * Directive that determines how a particular element was focused (via keyboard, mouse, touch, or\r\n * programmatically) and adds corresponding classes to the element.\r\n *\r\n * There are two variants of this directive:\r\n * 1) cdkMonitorElementFocus: does not consider an element to be focused if one of its children is\r\n *    focused.\r\n * 2) cdkMonitorSubtreeFocus: considers an element focused if it or any of its children are focused.\r\n */\r\nclass CdkMonitorFocus {\r\n    constructor(_elementRef, _focusMonitor) {\r\n        this._elementRef = _elementRef;\r\n        this._focusMonitor = _focusMonitor;\r\n        this.cdkFocusChange = new EventEmitter();\r\n    }\r\n    ngAfterViewInit() {\r\n        const element = this._elementRef.nativeElement;\r\n        this._monitorSubscription = this._focusMonitor.monitor(element, element.nodeType === 1 && element.hasAttribute('cdkMonitorSubtreeFocus'))\r\n            .subscribe(origin => this.cdkFocusChange.emit(origin));\r\n    }\r\n    ngOnDestroy() {\r\n        this._focusMonitor.stopMonitoring(this._elementRef);\r\n        if (this._monitorSubscription) {\r\n            this._monitorSubscription.unsubscribe();\r\n        }\r\n    }\r\n}\nCdkMonitorFocus.ɵfac = function CdkMonitorFocus_Factory(t) { return new (t || CdkMonitorFocus)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(FocusMonitor)); };\nCdkMonitorFocus.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkMonitorFocus, selectors: [[\"\", \"cdkMonitorElementFocus\", \"\"], [\"\", \"cdkMonitorSubtreeFocus\", \"\"]], outputs: { cdkFocusChange: \"cdkFocusChange\" } });\r\nCdkMonitorFocus.ctorParameters = () => [\r\n    { type: ElementRef },\r\n    { type: FocusMonitor }\r\n];\r\nCdkMonitorFocus.propDecorators = {\r\n    cdkFocusChange: [{ type: Output }]\r\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkMonitorFocus, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkMonitorElementFocus], [cdkMonitorSubtreeFocus]'\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: FocusMonitor }]; }, { cdkFocusChange: [{\n            type: Output\n        }] }); })();\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/** CSS class applied to the document body when in black-on-white high-contrast mode. */\r\nconst BLACK_ON_WHITE_CSS_CLASS = 'cdk-high-contrast-black-on-white';\r\n/** CSS class applied to the document body when in white-on-black high-contrast mode. */\r\nconst WHITE_ON_BLACK_CSS_CLASS = 'cdk-high-contrast-white-on-black';\r\n/** CSS class applied to the document body when in high-contrast mode. */\r\nconst HIGH_CONTRAST_MODE_ACTIVE_CSS_CLASS = 'cdk-high-contrast-active';\r\n/**\r\n * Service to determine whether the browser is currently in a high-contrast-mode environment.\r\n *\r\n * Microsoft Windows supports an accessibility feature called \"High Contrast Mode\". This mode\r\n * changes the appearance of all applications, including web applications, to dramatically increase\r\n * contrast.\r\n *\r\n * IE, Edge, and Firefox currently support this mode. Chrome does not support Windows High Contrast\r\n * Mode. This service does not detect high-contrast mode as added by the Chrome \"High Contrast\"\r\n * browser extension.\r\n */\r\nclass HighContrastModeDetector {\r\n    constructor(_platform, document) {\r\n        this._platform = _platform;\r\n        this._document = document;\r\n    }\r\n    /** Gets the current high-contrast-mode for the page. */\r\n    getHighContrastMode() {\r\n        if (!this._platform.isBrowser) {\r\n            return 0 /* NONE */;\r\n        }\r\n        // Create a test element with an arbitrary background-color that is neither black nor\r\n        // white; high-contrast mode will coerce the color to either black or white. Also ensure that\r\n        // appending the test element to the DOM does not affect layout by absolutely positioning it\r\n        const testElement = this._document.createElement('div');\r\n        testElement.style.backgroundColor = 'rgb(1,2,3)';\r\n        testElement.style.position = 'absolute';\r\n        this._document.body.appendChild(testElement);\r\n        // Get the computed style for the background color, collapsing spaces to normalize between\r\n        // browsers. Once we get this color, we no longer need the test element. Access the `window`\r\n        // via the document so we can fake it in tests. Note that we have extra null checks, because\r\n        // this logic will likely run during app bootstrap and throwing can break the entire app.\r\n        const documentWindow = this._document.defaultView || window;\r\n        const computedStyle = (documentWindow && documentWindow.getComputedStyle) ?\r\n            documentWindow.getComputedStyle(testElement) : null;\r\n        const computedColor = (computedStyle && computedStyle.backgroundColor || '').replace(/ /g, '');\r\n        this._document.body.removeChild(testElement);\r\n        switch (computedColor) {\r\n            case 'rgb(0,0,0)': return 2 /* WHITE_ON_BLACK */;\r\n            case 'rgb(255,255,255)': return 1 /* BLACK_ON_WHITE */;\r\n        }\r\n        return 0 /* NONE */;\r\n    }\r\n    /** Applies CSS classes indicating high-contrast mode to document body (browser-only). */\r\n    _applyBodyHighContrastModeCssClasses() {\r\n        if (this._platform.isBrowser && this._document.body) {\r\n            const bodyClasses = this._document.body.classList;\r\n            // IE11 doesn't support `classList` operations with multiple arguments\r\n            bodyClasses.remove(HIGH_CONTRAST_MODE_ACTIVE_CSS_CLASS);\r\n            bodyClasses.remove(BLACK_ON_WHITE_CSS_CLASS);\r\n            bodyClasses.remove(WHITE_ON_BLACK_CSS_CLASS);\r\n            const mode = this.getHighContrastMode();\r\n            if (mode === 1 /* BLACK_ON_WHITE */) {\r\n                bodyClasses.add(HIGH_CONTRAST_MODE_ACTIVE_CSS_CLASS);\r\n                bodyClasses.add(BLACK_ON_WHITE_CSS_CLASS);\r\n            }\r\n            else if (mode === 2 /* WHITE_ON_BLACK */) {\r\n                bodyClasses.add(HIGH_CONTRAST_MODE_ACTIVE_CSS_CLASS);\r\n                bodyClasses.add(WHITE_ON_BLACK_CSS_CLASS);\r\n            }\r\n        }\r\n    }\r\n}\nHighContrastModeDetector.ɵfac = function HighContrastModeDetector_Factory(t) { return new (t || HighContrastModeDetector)(ɵngcc0.ɵɵinject(ɵngcc1.Platform), ɵngcc0.ɵɵinject(DOCUMENT)); };\r\nHighContrastModeDetector.ɵprov = ɵɵdefineInjectable({ factory: function HighContrastModeDetector_Factory() { return new HighContrastModeDetector(ɵɵinject(Platform), ɵɵinject(DOCUMENT)); }, token: HighContrastModeDetector, providedIn: \"root\" });\r\nHighContrastModeDetector.ctorParameters = () => [\r\n    { type: Platform },\r\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\r\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HighContrastModeDetector, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: ɵngcc1.Platform }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, null); })();\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nclass A11yModule {\r\n    constructor(highContrastModeDetector) {\r\n        highContrastModeDetector._applyBodyHighContrastModeCssClasses();\r\n    }\r\n}\nA11yModule.ɵfac = function A11yModule_Factory(t) { return new (t || A11yModule)(ɵngcc0.ɵɵinject(HighContrastModeDetector)); };\nA11yModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: A11yModule });\nA11yModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[PlatformModule, ObserversModule]] });\r\nA11yModule.ctorParameters = () => [\r\n    { type: HighContrastModeDetector }\r\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(A11yModule, [{\n        type: NgModule,\n        args: [{\n                imports: [PlatformModule, ObserversModule],\n                declarations: [CdkAriaLive, CdkTrapFocus, CdkMonitorFocus],\n                exports: [CdkAriaLive, CdkTrapFocus, CdkMonitorFocus]\n            }]\n    }], function () { return [{ type: HighContrastModeDetector }]; }, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(A11yModule, { declarations: function () { return [CdkAriaLive, CdkTrapFocus, CdkMonitorFocus]; }, imports: function () { return [PlatformModule, ObserversModule]; }, exports: function () { return [CdkAriaLive, CdkTrapFocus, CdkMonitorFocus]; } }); })();\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/**\r\n * Generated bundle index. Do not edit.\r\n */\r\n\r\nexport { A11yModule, ActiveDescendantKeyManager, AriaDescriber, CDK_DESCRIBEDBY_HOST_ATTRIBUTE, CDK_DESCRIBEDBY_ID_PREFIX, CdkAriaLive, CdkMonitorFocus, CdkTrapFocus, ConfigurableFocusTrap, ConfigurableFocusTrapFactory, EventListenerFocusTrapInertStrategy, FOCUS_MONITOR_DEFAULT_OPTIONS, FOCUS_TRAP_INERT_STRATEGY, FocusKeyManager, FocusMonitor, FocusTrap, FocusTrapFactory, HighContrastModeDetector, InteractivityChecker, IsFocusableConfig, LIVE_ANNOUNCER_DEFAULT_OPTIONS, LIVE_ANNOUNCER_ELEMENT_TOKEN, LIVE_ANNOUNCER_ELEMENT_TOKEN_FACTORY, ListKeyManager, LiveAnnouncer, MESSAGES_CONTAINER_ID, TOUCH_BUFFER_MS, isFakeMousedownFromScreenReader, isFakeTouchstartFromScreenReader, FocusTrapManager as ɵangular_material_src_cdk_a11y_a11y_a, ConfigurableFocusTrapConfig as ɵangular_material_src_cdk_a11y_a11y_b };\r\n\r\n\n//# sourceMappingURL=a11y.js.map"]},"metadata":{},"sourceType":"module"}